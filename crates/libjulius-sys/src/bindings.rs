/* automatically generated by rust-bindgen 0.66.1 */

pub const JULIUS_PRODUCTNAME: &[u8; 10] = b"JuliusLib\0";
pub const JULIUS_VERSION: &[u8; 4] = b"4.6\0";
pub const JULIUS_SETUP: &[u8; 5] = b"fast\0";
pub const JULIUS_HOSTINFO: &[u8; 25] = b"x86_64-unknown-linux-gnu\0";
pub const JULIUS_BUILD_INFO: &[u8; 35] = b"gcc -O6 -fomit-frame-pointer -fPIC\0";
pub const STDC_HEADERS: u32 = 1;
pub const HAVE_PTHREAD: u32 = 1;
pub const UNIGRAM_FACTORING: u32 = 1;
pub const LOWMEM2: u32 = 1;
pub const PASS1_IWCD: u32 = 1;
pub const SCAN_BEAM: u32 = 1;
pub const GPRUNE_DEFAULT_BEAM: u32 = 1;
pub const CONFIDENCE_MEASURE: u32 = 1;
pub const LM_FIX_DOUBLE_SCORING: u32 = 1;
pub const GRAPHOUT_DYNAMIC: u32 = 1;
pub const GRAPHOUT_SEARCH: u32 = 1;
pub const ENABLE_PLUGIN: u32 = 1;
pub const HAVE_LIBFVAD: u32 = 1;
pub const LIBSENT_VERSION: &[u8; 4] = b"4.6\0";
pub const AUDIO_API_NAME: &[u8; 5] = b"none\0";
pub const AUDIO_API_DESC: &[u8; 1] = b"\0";
pub const AUDIO_FORMAT_DESC: &[u8; 17] = b"RAW and WAV only\0";
pub const GZIP_READING_DESC: &[u8; 13] = b"zlib library\0";
pub const WORDS_INT: u32 = 1;
pub const USE_ADDLOG_ARRAY: u32 = 1;
pub const HAVE_SOCKLEN_T: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const HAVE_ZLIB: u32 = 1;
pub const HAVE_STRCASECMP: u32 = 1;
pub const HAVE_SLEEP: u32 = 1;
pub const CLASS_NGRAM: u32 = 1;
pub const MFCC_SINCOS_TABLE: u32 = 1;
pub const HAVE_SYS_SOUNDCARD_H: u32 = 1;
pub const HAVE_ALSA_ASOUNDLIB_H: u32 = 1;
pub const HAVE_PULSE_SIMPLE_H: u32 = 1;
pub const USE_MBR: u32 = 1;
pub const HAS_SIMD_FMA: u32 = 1;
pub const HAS_SIMD_AVX: u32 = 1;
pub const HAS_SIMD_SSE: u32 = 1;
pub const LM_UNDEF: u32 = 0;
pub const LM_PROB: u32 = 1;
pub const LM_DFA: u32 = 2;
pub const LM_NGRAM: u32 = 0;
pub const LM_DFA_GRAMMAR: u32 = 1;
pub const LM_DFA_WORD: u32 = 2;
pub const LM_NGRAM_USER: u32 = 3;
pub const J_RESULT_STATUS_REJECT_LONG: i32 = -8;
pub const J_RESULT_STATUS_BUFFER_OVERFLOW: i32 = -7;
pub const J_RESULT_STATUS_REJECT_POWER: i32 = -6;
pub const J_RESULT_STATUS_TERMINATE: i32 = -5;
pub const J_RESULT_STATUS_ONLY_SILENCE: i32 = -4;
pub const J_RESULT_STATUS_REJECT_GMM: i32 = -3;
pub const J_RESULT_STATUS_REJECT_SHORT: i32 = -2;
pub const J_RESULT_STATUS_FAIL: i32 = -1;
pub const J_RESULT_STATUS_SUCCESS: u32 = 0;
pub const SHORT_WORD_LEN: u32 = 2;
pub const DEFAULT_LM_WEIGHT_MONO_PASS1: f64 = 5.0;
pub const DEFAULT_LM_PENALTY_MONO_PASS1: f64 = -1.0;
pub const DEFAULT_LM_WEIGHT_MONO_PASS2: f64 = 6.0;
pub const DEFAULT_LM_PENALTY_MONO_PASS2: f64 = 0.0;
pub const DEFAULT_LM_WEIGHT_TRI_PASS1: f64 = 8.0;
pub const DEFAULT_LM_PENALTY_TRI_PASS1: f64 = -2.0;
pub const DEFAULT_LM_WEIGHT_TRI_PASS2: f64 = 8.0;
pub const DEFAULT_LM_PENALTY_TRI_PASS2: f64 = -2.0;
pub const STARTNODE_STEP: u32 = 300;
pub const IWSPENTRY_DEFAULT: &[u8; 17] = b"<UNK> [sp] sp sp\0";
pub const MINIMAL_BEAM_WIDTH: u32 = 200;
pub const MAX_SPEECH_ALLOC_STEP: u32 = 320000;
pub const POWER_REJECT_DEFAULT_THRES: f64 = 9.0;
pub const VTLN_RANGE: f64 = 0.2;
pub const VTLN_STEP: f64 = 0.02;
pub const PI: f64 = 3.14159265358979;
pub const TPI: f64 = 6.28318530717959;
pub const LOGTPI: f64 = 1.83787706640935;
pub const LOG_TEN: f64 = 2.30258509;
pub const INV_LOG_TEN: f64 = 0.434294482;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const DELM: &[u8; 4] = b" \t\n\0";
pub const LOG_ZERO: i32 = -1000000;
pub const LOG_ADDMIN: f64 = -13.815510558;
pub const MAX_WORD_NUM: u32 = 2147483647;
pub const WORD_INVALID: u32 = 2147483647;
pub const MAXLINELEN: u32 = 1024;
pub const MAXPATHLEN: u32 = 2048;
pub const MYBMALLOC_BLOCK_SIZE: u32 = 10000;
pub const ADINNET_PORT: u32 = 5530;
pub const VECINNET_PORT: u32 = 5531;
pub const NETAUDIO_DEVNAME: &[u8; 12] = b"localhost:0\0";
pub const CONNECTION_RETRY_TIMES: u32 = 5;
pub const CONNECTION_RETRY_INTERVAL: u32 = 2;
pub const SUPPORTED_WAVEFILE_FORMAT: &[u8; 12] = b"RAW(BE),WAV\0";
pub const ZMEANSAMPLES: u32 = 48000;
pub const DS_RBSIZE: u32 = 512;
pub const DS_BUFSIZE: u32 = 256;
pub const DS_BUFSIZE_Y: u32 = 512;
pub const ZC_UNDEF: u32 = 2;
pub const ZC_POSITIVE: u32 = 1;
pub const ZC_NEGATIVE: i32 = -1;
pub const MAXSEQNUM: u32 = 150;
pub const MAXSPEECHLEN: u32 = 320000;
pub const INPUT_DELAY_SEC: u32 = 8;
pub const OUTPROB_CACHE_PERIOD: u32 = 100;
pub const CPMAX: u32 = 500;
pub const CPSTEP: u32 = 5;
pub const F_ENERGY: u32 = 64;
pub const F_ENERGY_SUP: u32 = 128;
pub const F_DELTA: u32 = 256;
pub const F_ACCL: u32 = 512;
pub const F_COMPRESS: u32 = 1024;
pub const F_CEPNORM: u32 = 2048;
pub const F_CHECKSUM: u32 = 4096;
pub const F_ZEROTH: u32 = 8192;
pub const F_BASEMASK: u32 = 63;
pub const BINHMM_HEADER: &[u8; 9] = b"JBINHMM\n\0";
pub const BINHMM_HEADER_V2: &[u8; 10] = b"JBINHMMV2\0";
pub const BINHMM_HEADER_V2_EMBEDPARA: u8 = 80u8;
pub const BINHMM_HEADER_V2_VARINV: u8 = 86u8;
pub const BINHMM_HEADER_V2_MPDFMACRO: u8 = 77u8;
pub const MAXSTREAMNUM: u32 = 50;
pub const HTK_PARAM_INCREMENT_STEP_FRAME: u32 = 200;
pub const DEF_SMPPERIOD: u32 = 625;
pub const DEF_FRAMESIZE: u32 = 400;
pub const DEF_FFTNUM: u32 = 512;
pub const DEF_FRAMESHIFT: u32 = 160;
pub const DEF_PREENPH: f64 = 0.97;
pub const DEF_MFCCDIM: u32 = 12;
pub const DEF_CEPLIF: u32 = 22;
pub const DEF_FBANK: u32 = 24;
pub const DEF_DELWIN: u32 = 2;
pub const DEF_ACCWIN: u32 = 2;
pub const DEF_SILFLOOR: f64 = 50.0;
pub const DEF_ESCALE: f64 = 1.0;
pub const DEF_SSALPHA: f64 = 2.0;
pub const DEF_SSFLOOR: f64 = 0.5;
pub const VALUE_VERSION: u32 = 3;
pub const HMMDEF_DELM: &[u8; 7] = b" \t\r\n<>\0";
pub const MAX_STATE_NUM: u32 = 2147483647;
pub const HMM_RC_DLIM: &[u8; 2] = b"+\0";
pub const HMM_LC_DLIM: &[u8; 2] = b"-\0";
pub const HMM_RC_DLIM_C: u8 = 43u8;
pub const HMM_LC_DLIM_C: u8 = 45u8;
pub const SPMODEL_NAME_DEFAULT: &[u8; 3] = b"sp\0";
pub const MAX_HMMNAME_LEN: u32 = 256;
pub const USE_SIMD_NONE: u32 = 0;
pub const USE_SIMD_SSE: u32 = 1;
pub const USE_SIMD_AVX: u32 = 2;
pub const USE_SIMD_FMA: u32 = 3;
pub const USE_SIMD_NEON: u32 = 4;
pub const USE_SIMD_NEONV2: u32 = 5;
pub const TMBEAMWIDTH: f64 = 5.0;
pub const MAXWSTEP: u32 = 4000;
pub const NNID_INVALID: u32 = 4294967295;
pub const NNID_MAX: u32 = 4294967294;
pub const NNID_INVALID_UPPER: u32 = 255;
pub const NNID_MAX_24: u32 = 16711679;
pub const BEGIN_WORD_DEFAULT: &[u8; 4] = b"<s>\0";
pub const END_WORD_DEFAULT: &[u8; 5] = b"</s>\0";
pub const UNK_WORD_DEFAULT: &[u8; 6] = b"<unk>\0";
pub const UNK_WORD_DEFAULT2: &[u8; 6] = b"<UNK>\0";
pub const UNK_WORD_MAXLEN: u32 = 30;
pub const BINGRAM_IDSTR: &[u8; 18] = b"julius_bingram_v3\0";
pub const BINGRAM_IDSTR_V4: &[u8; 18] = b"julius_bingram_v4\0";
pub const BINGRAM_IDSTR_V5: &[u8; 18] = b"julius_bingram_v5\0";
pub const BINGRAM_HDSIZE: u32 = 512;
pub const BINGRAM_SIZESTR_HEAD: &[u8; 6] = b"word=\0";
pub const BINGRAM_SIZESTR_BODY_4BYTE: &[u8; 11] = b"4byte(int)\0";
pub const BINGRAM_SIZESTR_BODY_2BYTE: &[u8; 22] = b"2byte(unsigned short)\0";
pub const BINGRAM_SIZESTR_BODY: &[u8; 11] = b"4byte(int)\0";
pub const BINGRAM_BYTEORDER_HEAD: &[u8; 11] = b"byteorder=\0";
pub const BINGRAM_NATURAL_BYTEORDER: &[u8; 3] = b"LE\0";
pub const DFA_STATESTEP: u32 = 1000;
pub const DFA_CP_MINSTEP: u32 = 20;
pub const INITIAL_S: u32 = 268435456;
pub const ACCEPT_S: u32 = 1;
pub const PLUGIN_SUFFIX: &[u8; 5] = b".jpi\0";
pub const MAXGRAMNAMELEN: u32 = 512;
pub const MULTIGRAM_DEFAULT: u32 = 0;
pub const MULTIGRAM_DELETE: u32 = 1;
pub const MULTIGRAM_ACTIVATE: u32 = 2;
pub const MULTIGRAM_DEACTIVATE: u32 = 4;
pub const MULTIGRAM_MODIFIED: u32 = 8;
pub const A_CELL2_ALLOC_STEP: u32 = 4;
pub const FANOUTSTEP: u32 = 7;
pub const CN_CLUSTER_WG_STEP: u32 = 10;
pub const TOKENID_UNDEFINED: i32 = -1;
pub const FILLWIDTH: u32 = 70;
pub const MAX_CALLBACK_HOOK: u32 = 10;
pub const JCONF_MODULENAME_MAXLEN: u32 = 64;
pub const JCONF_MODULENAME_DEFAULT: &[u8; 9] = b"_default\0";
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type boolean = ::std::os::raw::c_uchar;
pub const LogOutputLevel_LOG_NORMAL: LogOutputLevel = 0;
pub const LogOutputLevel_LOG_VERBOSE: LogOutputLevel = 1;
pub const LogOutputLevel_LOG_DEBUG: LogOutputLevel = 2;
pub type LogOutputLevel = ::std::os::raw::c_uint;
pub const DIR_LR: _bindgen_ty_22 = 0;
pub const DIR_RL: _bindgen_ty_22 = 1;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
pub type PROB = f32;
pub type LOGPROB = f32;
pub type SP16 = ::std::os::raw::c_short;
pub type VECT = f32;
pub type WORD_ID = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bmalloc_base {
    pub base: *mut ::std::os::raw::c_void,
    pub now: *mut ::std::os::raw::c_char,
    pub end: *mut ::std::os::raw::c_char,
    pub next: *mut _bmalloc_base,
}
#[test]
fn bindgen_test_layout__bmalloc_base() {
    const UNINIT: ::std::mem::MaybeUninit<_bmalloc_base> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_bmalloc_base>(),
        32usize,
        concat!("Size of: ", stringify!(_bmalloc_base))
    );
    assert_eq!(
        ::std::mem::align_of::<_bmalloc_base>(),
        8usize,
        concat!("Alignment of ", stringify!(_bmalloc_base))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_bmalloc_base),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).now) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_bmalloc_base),
            "::",
            stringify!(now)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_bmalloc_base),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_bmalloc_base),
            "::",
            stringify!(next)
        )
    );
}
pub type BMALLOC_BASE = _bmalloc_base;
extern "C" {
    pub fn getl(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getl_fp(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_line_from_stdin(
        buf: *mut ::std::os::raw::c_char,
        buflen: ::std::os::raw::c_int,
        prompt: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen_readfile(arg1: *mut ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fclose_readfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen_writefile(arg1: *mut ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fclose_writefile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn myfread(ptr: *mut ::std::os::raw::c_void, size: usize, n: usize, fp: *mut FILE)
        -> usize;
}
extern "C" {
    pub fn myfwrite(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        n: usize,
        fp: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn myfgetc(fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn myfeof(fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn myfrewind(fp: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mybmalloc2(
        size: ::std::os::raw::c_uint,
        list: *mut *mut BMALLOC_BASE,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mybstrdup2(
        arg1: *mut ::std::os::raw::c_char,
        list: *mut *mut BMALLOC_BASE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mybfree2(list: *mut *mut BMALLOC_BASE);
}
extern "C" {
    pub fn mymalloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mymalloc_big(elsize: usize, nelem: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn myrealloc(arg1: *mut ::std::os::raw::c_void, arg2: usize)
        -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mycalloc(arg1: usize, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mymalloc_aligned(size: usize, align: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn myfree_aligned(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn swap_sample_bytes(buf: *mut SP16, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn swap_bytes(buf: *mut ::std::os::raw::c_char, unitbyte: usize, unitnum: usize);
}
extern "C" {
    pub fn jlog_set_output(fp: *mut FILE);
}
extern "C" {
    pub fn jlog_get_fp() -> *mut FILE;
}
extern "C" {
    pub fn jlog(format: *mut ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn jlog_flush() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mystrtok_quotation(
        str_: *mut ::std::os::raw::c_char,
        delim: *mut ::std::os::raw::c_char,
        left_paren: ::std::os::raw::c_int,
        right_paren: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mystrtok_quote(
        str_: *mut ::std::os::raw::c_char,
        delim: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mystrtok(
        str_: *mut ::std::os::raw::c_char,
        delim: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mystrtok_movetonext(
        str_: *mut ::std::os::raw::c_char,
        delim: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mystrtok_quotation_safe(
        str_: *mut ::std::os::raw::c_char,
        delim: *mut ::std::os::raw::c_char,
        left_paren: ::std::os::raw::c_int,
        right_paren: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        save: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mystrtok_safe(
        str_: *mut ::std::os::raw::c_char,
        delim: *mut ::std::os::raw::c_char,
        save: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn confout(strm: *mut FILE);
}
extern "C" {
    pub fn confout_version(strm: *mut FILE);
}
extern "C" {
    pub fn confout_audio(strm: *mut FILE);
}
extern "C" {
    pub fn confout_lm(strm: *mut FILE);
}
extern "C" {
    pub fn confout_am(strm: *mut FILE);
}
extern "C" {
    pub fn confout_lib(strm: *mut FILE);
}
extern "C" {
    pub fn confout_process(strm: *mut FILE);
}
extern "C" {
    pub fn confout_simd(strm: *mut FILE);
}
extern "C" {
    pub fn confout_cuda(strm: *mut FILE);
}
extern "C" {
    pub fn qsort_reentrant(
        base: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        compare: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        pointer: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn rd(
        fd: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_char,
        len: *mut ::std::os::raw::c_int,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wt(
        fd: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ready_as_server(port_num: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept_from(sd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn make_connection(
        hostname: *mut ::std::os::raw::c_char,
        port_num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn make_connection_unix(address: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close_socket(sd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cleanup_socket();
}
extern "C" {
    pub fn vecin_standby() -> boolean;
}
extern "C" {
    pub fn vecin_open() -> boolean;
}
extern "C" {
    pub fn vecin_get_configuration(opcode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vecin_read(vecbuf: *mut f32, veclen: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vecin_close() -> boolean;
}
extern "C" {
    pub fn vecin_terminate() -> boolean;
}
extern "C" {
    pub fn vecin_pause() -> boolean;
}
extern "C" {
    pub fn vecin_resume() -> boolean;
}
extern "C" {
    pub fn vecin_input_name() -> *mut ::std::os::raw::c_char;
}
pub const INPUT_WAVEFORM: _bindgen_ty_23 = 0;
pub const INPUT_VECTOR: _bindgen_ty_23 = 1;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const SP_RAWFILE: _bindgen_ty_24 = 0;
pub const SP_MIC: _bindgen_ty_24 = 1;
pub const SP_ADINNET: _bindgen_ty_24 = 2;
pub const SP_MFCFILE: _bindgen_ty_24 = 3;
pub const SP_NETAUDIO: _bindgen_ty_24 = 4;
pub const SP_STDIN: _bindgen_ty_24 = 5;
pub const SP_MFCMODULE: _bindgen_ty_24 = 6;
pub const SP_OUTPROBFILE: _bindgen_ty_24 = 7;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
pub const SP_INPUT_DEFAULT: _bindgen_ty_25 = 0;
pub const SP_INPUT_ALSA: _bindgen_ty_25 = 1;
pub const SP_INPUT_OSS: _bindgen_ty_25 = 2;
pub const SP_INPUT_ESD: _bindgen_ty_25 = 3;
pub const SP_INPUT_PULSEAUDIO: _bindgen_ty_25 = 4;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DS_FILTER {
    pub decrate: ::std::os::raw::c_int,
    pub intrate: ::std::os::raw::c_int,
    pub hdn: [f64; 513usize],
    pub hdn_len: ::std::os::raw::c_int,
    pub delay: ::std::os::raw::c_int,
    pub x: [f64; 256usize],
    pub y: [f64; 512usize],
    pub rb: [f64; 512usize],
    pub indx: ::std::os::raw::c_int,
    pub bp: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DS_FILTER() {
    const UNINIT: ::std::mem::MaybeUninit<DS_FILTER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DS_FILTER>(),
        14376usize,
        concat!("Size of: ", stringify!(DS_FILTER))
    );
    assert_eq!(
        ::std::mem::align_of::<DS_FILTER>(),
        8usize,
        concat!("Alignment of ", stringify!(DS_FILTER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decrate) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_FILTER),
            "::",
            stringify!(decrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).intrate) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_FILTER),
            "::",
            stringify!(intrate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_FILTER),
            "::",
            stringify!(hdn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdn_len) as usize - ptr as usize },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_FILTER),
            "::",
            stringify!(hdn_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delay) as usize - ptr as usize },
        4116usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_FILTER),
            "::",
            stringify!(delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        4120usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_FILTER),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        6168usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_FILTER),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rb) as usize - ptr as usize },
        10264usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_FILTER),
            "::",
            stringify!(rb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indx) as usize - ptr as usize },
        14360usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_FILTER),
            "::",
            stringify!(indx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bp) as usize - ptr as usize },
        14364usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_FILTER),
            "::",
            stringify!(bp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        14368usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_FILTER),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DS_BUFFER {
    pub fir: [*mut DS_FILTER; 3usize],
    pub buf: [*mut f64; 4usize],
    pub buflen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DS_BUFFER() {
    const UNINIT: ::std::mem::MaybeUninit<DS_BUFFER> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DS_BUFFER>(),
        64usize,
        concat!("Size of: ", stringify!(DS_BUFFER))
    );
    assert_eq!(
        ::std::mem::align_of::<DS_BUFFER>(),
        8usize,
        concat!("Alignment of ", stringify!(DS_BUFFER))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fir) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_BUFFER),
            "::",
            stringify!(fir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_BUFFER),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buflen) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DS_BUFFER),
            "::",
            stringify!(buflen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZEROCROSS {
    pub trigger: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_int,
    pub zero_cross: ::std::os::raw::c_int,
    pub is_trig: ::std::os::raw::c_int,
    pub sign: ::std::os::raw::c_int,
    pub top: ::std::os::raw::c_int,
    pub valid_len: ::std::os::raw::c_int,
    pub data: *mut SP16,
    pub is_zc: *mut ::std::os::raw::c_int,
    pub level: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ZEROCROSS() {
    const UNINIT: ::std::mem::MaybeUninit<ZEROCROSS> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ZEROCROSS>(),
        56usize,
        concat!("Size of: ", stringify!(ZEROCROSS))
    );
    assert_eq!(
        ::std::mem::align_of::<ZEROCROSS>(),
        8usize,
        concat!("Alignment of ", stringify!(ZEROCROSS))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trigger) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ZEROCROSS),
            "::",
            stringify!(trigger)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ZEROCROSS),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ZEROCROSS),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_cross) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ZEROCROSS),
            "::",
            stringify!(zero_cross)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_trig) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ZEROCROSS),
            "::",
            stringify!(is_trig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sign) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ZEROCROSS),
            "::",
            stringify!(sign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ZEROCROSS),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid_len) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ZEROCROSS),
            "::",
            stringify!(valid_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ZEROCROSS),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_zc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ZEROCROSS),
            "::",
            stringify!(is_zc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ZEROCROSS),
            "::",
            stringify!(level)
        )
    );
}
extern "C" {
    pub fn adin_mic_standby(
        freq: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> boolean;
}
extern "C" {
    pub fn adin_mic_begin(pathname: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn adin_mic_end() -> boolean;
}
extern "C" {
    pub fn adin_mic_read(buf: *mut SP16, sampnum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adin_mic_pause() -> boolean;
}
extern "C" {
    pub fn adin_mic_terminate() -> boolean;
}
extern "C" {
    pub fn adin_mic_resume() -> boolean;
}
extern "C" {
    pub fn adin_mic_input_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn adin_alsa_standby(
        freq: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> boolean;
}
extern "C" {
    pub fn adin_alsa_begin(pathname: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn adin_alsa_end() -> boolean;
}
extern "C" {
    pub fn adin_alsa_read(buf: *mut SP16, sampnum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adin_alsa_input_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn adin_oss_standby(
        freq: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> boolean;
}
extern "C" {
    pub fn adin_oss_begin(pathname: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn adin_oss_end() -> boolean;
}
extern "C" {
    pub fn adin_oss_read(buf: *mut SP16, sampnum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adin_oss_input_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn adin_esd_standby(
        freq: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> boolean;
}
extern "C" {
    pub fn adin_esd_begin(pathname: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn adin_esd_end() -> boolean;
}
extern "C" {
    pub fn adin_esd_read(buf: *mut SP16, sampnum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adin_esd_input_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn adin_pulseaudio_standby(
        freq: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> boolean;
}
extern "C" {
    pub fn adin_pulseaudio_begin(pathname: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn adin_pulseaudio_end() -> boolean;
}
extern "C" {
    pub fn adin_pulseaudio_read(
        buf: *mut SP16,
        sampnum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adin_pulseaudio_input_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn adin_netaudio_standby(
        freq: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> boolean;
}
extern "C" {
    pub fn adin_netaudio_begin(pathname: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn adin_netaudio_end() -> boolean;
}
extern "C" {
    pub fn adin_netaudio_read(
        buf: *mut SP16,
        sampnum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adin_netaudio_input_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn NA_standby(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn NA_start();
}
extern "C" {
    pub fn NA_stop();
}
extern "C" {
    pub fn NA_read(buf: *mut SP16, sampnum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adin_file_standby(
        freq: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> boolean;
}
extern "C" {
    pub fn adin_file_begin(pathname: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn adin_file_read(buf: *mut SP16, sampnum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adin_file_end() -> boolean;
}
extern "C" {
    pub fn adin_stdin_standby(
        freq: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> boolean;
}
extern "C" {
    pub fn adin_stdin_begin(pathname: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn adin_stdin_read(buf: *mut SP16, sampnum: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adin_file_get_current_filename() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn adin_stdin_input_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn adin_tcpip_standby(
        freq: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> boolean;
}
extern "C" {
    pub fn adin_tcpip_begin(pathname: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn adin_tcpip_end() -> boolean;
}
extern "C" {
    pub fn adin_tcpip_read(buf: *mut SP16, sampnum: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adin_tcpip_send_pause() -> boolean;
}
extern "C" {
    pub fn adin_tcpip_send_terminate() -> boolean;
}
extern "C" {
    pub fn adin_tcpip_send_resume() -> boolean;
}
extern "C" {
    pub fn adin_tcpip_input_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn init_count_zc_e(zc: *mut ZEROCROSS, length: ::std::os::raw::c_int);
}
extern "C" {
    pub fn reset_count_zc_e(
        zc: *mut ZEROCROSS,
        c_trigger: ::std::os::raw::c_int,
        c_length: ::std::os::raw::c_int,
        c_offset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn free_count_zc_e(zc: *mut ZEROCROSS);
}
extern "C" {
    pub fn count_zc_e(
        zc: *mut ZEROCROSS,
        buf: *mut SP16,
        step: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zc_copy_buffer(zc: *mut ZEROCROSS, newbuf: *mut SP16, len: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn zmean_reset();
}
extern "C" {
    pub fn sub_zmean(speech: *mut SP16, samplenum: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ds48to16_new() -> *mut DS_BUFFER;
}
extern "C" {
    pub fn ds48to16_free(ds: *mut DS_BUFFER);
}
extern "C" {
    pub fn ds48to16(
        dst: *mut SP16,
        src: *mut SP16,
        srclen: ::std::os::raw::c_int,
        maxdstlen: ::std::os::raw::c_int,
        ds: *mut DS_BUFFER,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrsamp(
        fd: ::std::os::raw::c_int,
        buf: *mut SP16,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wrwav_open(
        filename: *mut ::std::os::raw::c_char,
        sfreq: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn wrwav_data(fp: *mut FILE, buf: *mut SP16, len: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn wrwav_close(fp: *mut FILE) -> boolean;
}
extern "C" {
    pub fn strip_zero(a: *mut SP16, len: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const parameter_type_F_WAVEFORM: parameter_type = 0;
pub const parameter_type_F_LPC: parameter_type = 1;
pub const parameter_type_F_LPREFC: parameter_type = 2;
pub const parameter_type_F_LPCEPSTRA: parameter_type = 3;
pub const parameter_type_F_LPDELCEP: parameter_type = 4;
pub const parameter_type_F_IREFC: parameter_type = 5;
pub const parameter_type_F_MFCC: parameter_type = 6;
pub const parameter_type_F_FBANK: parameter_type = 7;
pub const parameter_type_F_MELSPEC: parameter_type = 8;
pub const parameter_type_F_USER: parameter_type = 9;
pub const parameter_type_F_DISCRETE: parameter_type = 10;
pub const parameter_type_F_ERR_INVALID: parameter_type = 11;
pub type parameter_type = ::std::os::raw::c_uint;
pub const C_DIAG_C: _bindgen_ty_26 = 0;
pub const C_INV_DIAG: _bindgen_ty_26 = 1;
pub const C_FULL: _bindgen_ty_26 = 2;
pub const C_LLT: _bindgen_ty_26 = 3;
pub const C_XFORM: _bindgen_ty_26 = 4;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
pub const D_NULL: _bindgen_ty_27 = 0;
pub const D_POISSON: _bindgen_ty_27 = 1;
pub const D_GAMMA: _bindgen_ty_27 = 2;
pub const D_GEN: _bindgen_ty_27 = 3;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OptionStr {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_short,
    pub desc: *mut ::std::os::raw::c_char,
    pub supported: boolean,
}
#[test]
fn bindgen_test_layout_OptionStr() {
    const UNINIT: ::std::mem::MaybeUninit<OptionStr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OptionStr>(),
        32usize,
        concat!("Size of: ", stringify!(OptionStr))
    );
    assert_eq!(
        ::std::mem::align_of::<OptionStr>(),
        8usize,
        concat!("Alignment of ", stringify!(OptionStr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OptionStr),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OptionStr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OptionStr),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supported) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OptionStr),
            "::",
            stringify!(supported)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HTK_Param_Header {
    pub samplenum: ::std::os::raw::c_uint,
    pub wshift: ::std::os::raw::c_uint,
    pub sampsize: ::std::os::raw::c_ushort,
    pub samptype: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_HTK_Param_Header() {
    const UNINIT: ::std::mem::MaybeUninit<HTK_Param_Header> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HTK_Param_Header>(),
        12usize,
        concat!("Size of: ", stringify!(HTK_Param_Header))
    );
    assert_eq!(
        ::std::mem::align_of::<HTK_Param_Header>(),
        4usize,
        concat!("Alignment of ", stringify!(HTK_Param_Header))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplenum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_Param_Header),
            "::",
            stringify!(samplenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wshift) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_Param_Header),
            "::",
            stringify!(wshift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sampsize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_Param_Header),
            "::",
            stringify!(sampsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samptype) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_Param_Header),
            "::",
            stringify!(samptype)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HTK_Param {
    pub header: HTK_Param_Header,
    pub samplenum: ::std::os::raw::c_uint,
    pub veclen: ::std::os::raw::c_short,
    pub parvec: *mut *mut VECT,
    pub veclen_alloc: ::std::os::raw::c_short,
    pub samplenum_alloc: ::std::os::raw::c_uint,
    pub mroot: *mut BMALLOC_BASE,
    pub is_outprob: boolean,
}
#[test]
fn bindgen_test_layout_HTK_Param() {
    const UNINIT: ::std::mem::MaybeUninit<HTK_Param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HTK_Param>(),
        56usize,
        concat!("Size of: ", stringify!(HTK_Param))
    );
    assert_eq!(
        ::std::mem::align_of::<HTK_Param>(),
        8usize,
        concat!("Alignment of ", stringify!(HTK_Param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).header) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_Param),
            "::",
            stringify!(header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplenum) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_Param),
            "::",
            stringify!(samplenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).veclen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_Param),
            "::",
            stringify!(veclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parvec) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_Param),
            "::",
            stringify!(parvec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).veclen_alloc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_Param),
            "::",
            stringify!(veclen_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplenum_alloc) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_Param),
            "::",
            stringify!(samplenum_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mroot) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_Param),
            "::",
            stringify!(mroot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_outprob) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_Param),
            "::",
            stringify!(is_outprob)
        )
    );
}
extern "C" {
    pub fn rdparam(arg1: *mut ::std::os::raw::c_char, arg2: *mut HTK_Param) -> boolean;
}
extern "C" {
    pub fn new_param() -> *mut HTK_Param;
}
extern "C" {
    pub fn free_param(arg1: *mut HTK_Param);
}
extern "C" {
    pub fn param_qualstr2code(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn param_str2code(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn param_qualcode2str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_short,
        arg3: boolean,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn param_code2str(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_short,
        arg3: boolean,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn guess_basenum(
        p: *mut HTK_Param,
        qualtype: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn param_strip_zero(param: *mut HTK_Param) -> boolean;
}
extern "C" {
    pub fn param_init_content(p: *mut HTK_Param);
}
extern "C" {
    pub fn param_alloc(
        p: *mut HTK_Param,
        samplenum: ::std::os::raw::c_uint,
        veclen: ::std::os::raw::c_short,
    ) -> boolean;
}
extern "C" {
    pub fn param_free_content(p: *mut HTK_Param);
}
extern "C" {
    pub fn put_param_head(fp: *mut FILE, h: *mut HTK_Param_Header);
}
extern "C" {
    pub fn put_vec(
        fp: *mut FILE,
        p: *mut *mut VECT,
        num: ::std::os::raw::c_int,
        veclen: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn put_param(fp: *mut FILE, pinfo: *mut HTK_Param);
}
extern "C" {
    pub fn put_param_info(fp: *mut FILE, pinfo: *mut HTK_Param);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Value {
    pub basetype: ::std::os::raw::c_short,
    pub smp_period: ::std::os::raw::c_int,
    pub smp_freq: ::std::os::raw::c_int,
    pub framesize: ::std::os::raw::c_int,
    pub frameshift: ::std::os::raw::c_int,
    pub preEmph: f32,
    pub lifter: ::std::os::raw::c_int,
    pub fbank_num: ::std::os::raw::c_int,
    pub delWin: ::std::os::raw::c_int,
    pub accWin: ::std::os::raw::c_int,
    pub silFloor: f32,
    pub escale: f32,
    pub hipass: ::std::os::raw::c_int,
    pub lopass: ::std::os::raw::c_int,
    pub enormal: ::std::os::raw::c_int,
    pub raw_e: ::std::os::raw::c_int,
    pub zmeanframe: ::std::os::raw::c_int,
    pub usepower: ::std::os::raw::c_int,
    pub vtln_alpha: f32,
    pub vtln_upper: f32,
    pub vtln_lower: f32,
    pub delta: ::std::os::raw::c_int,
    pub acc: ::std::os::raw::c_int,
    pub energy: ::std::os::raw::c_int,
    pub c0: ::std::os::raw::c_int,
    pub absesup: ::std::os::raw::c_int,
    pub cmn: ::std::os::raw::c_int,
    pub cvn: ::std::os::raw::c_int,
    pub mfcc_dim: ::std::os::raw::c_int,
    pub baselen: ::std::os::raw::c_int,
    pub vecbuflen: ::std::os::raw::c_int,
    pub veclen: ::std::os::raw::c_int,
    pub loaded: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Value() {
    const UNINIT: ::std::mem::MaybeUninit<Value> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Value>(),
        132usize,
        concat!("Size of: ", stringify!(Value))
    );
    assert_eq!(
        ::std::mem::align_of::<Value>(),
        4usize,
        concat!("Alignment of ", stringify!(Value))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basetype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(basetype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smp_period) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(smp_period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smp_freq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(smp_freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framesize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(framesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameshift) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(frameshift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preEmph) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(preEmph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lifter) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(lifter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fbank_num) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(fbank_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delWin) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(delWin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accWin) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(accWin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silFloor) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(silFloor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).escale) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(escale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hipass) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(hipass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lopass) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(lopass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enormal) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(enormal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_e) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(raw_e)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zmeanframe) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(zmeanframe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).usepower) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(usepower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtln_alpha) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(vtln_alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtln_upper) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(vtln_upper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtln_lower) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(vtln_lower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).acc) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(acc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).energy) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c0) as usize - ptr as usize },
        96usize,
        concat!("Offset of field: ", stringify!(Value), "::", stringify!(c0))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absesup) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(absesup)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmn) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(cmn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cvn) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(cvn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mfcc_dim) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(mfcc_dim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baselen) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(baselen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vecbuflen) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(vecbuflen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).veclen) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(veclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loaded) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Value),
            "::",
            stringify!(loaded)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FBankInfo {
    pub fftN: ::std::os::raw::c_int,
    pub n: ::std::os::raw::c_int,
    pub klo: ::std::os::raw::c_int,
    pub khi: ::std::os::raw::c_int,
    pub fres: f32,
    pub cf: *mut f32,
    pub loChan: *mut ::std::os::raw::c_short,
    pub loWt: *mut f32,
    pub Re: *mut f32,
    pub Im: *mut f32,
}
#[test]
fn bindgen_test_layout_FBankInfo() {
    const UNINIT: ::std::mem::MaybeUninit<FBankInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FBankInfo>(),
        64usize,
        concat!("Size of: ", stringify!(FBankInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<FBankInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(FBankInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fftN) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FBankInfo),
            "::",
            stringify!(fftN)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FBankInfo),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).klo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FBankInfo),
            "::",
            stringify!(klo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).khi) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FBankInfo),
            "::",
            stringify!(khi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fres) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FBankInfo),
            "::",
            stringify!(fres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FBankInfo),
            "::",
            stringify!(cf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loChan) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FBankInfo),
            "::",
            stringify!(loChan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loWt) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FBankInfo),
            "::",
            stringify!(loWt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Re) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FBankInfo),
            "::",
            stringify!(Re)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Im) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FBankInfo),
            "::",
            stringify!(Im)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeltaBuf {
    pub mfcc: *mut *mut f32,
    pub veclen: ::std::os::raw::c_int,
    pub vec: *mut f32,
    pub win: ::std::os::raw::c_int,
    pub len: ::std::os::raw::c_int,
    pub store: ::std::os::raw::c_int,
    pub is_on: *mut boolean,
    pub B: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DeltaBuf() {
    const UNINIT: ::std::mem::MaybeUninit<DeltaBuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DeltaBuf>(),
        56usize,
        concat!("Size of: ", stringify!(DeltaBuf))
    );
    assert_eq!(
        ::std::mem::align_of::<DeltaBuf>(),
        8usize,
        concat!("Alignment of ", stringify!(DeltaBuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mfcc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeltaBuf),
            "::",
            stringify!(mfcc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).veclen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DeltaBuf),
            "::",
            stringify!(veclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vec) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DeltaBuf),
            "::",
            stringify!(vec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).win) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DeltaBuf),
            "::",
            stringify!(win)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(DeltaBuf),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).store) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DeltaBuf),
            "::",
            stringify!(store)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_on) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DeltaBuf),
            "::",
            stringify!(is_on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).B) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DeltaBuf),
            "::",
            stringify!(B)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MFCCWork {
    pub bf: *mut f32,
    pub fbank: *mut f64,
    pub fb: FBankInfo,
    pub bflen: ::std::os::raw::c_int,
    pub fbank_only: boolean,
    pub log_fbank: boolean,
    pub costbl_hamming: *mut f64,
    pub costbl_hamming_len: ::std::os::raw::c_int,
    pub costbl_fft: *mut f64,
    pub sintbl_fft: *mut f64,
    pub tbllen: ::std::os::raw::c_int,
    pub costbl_makemfcc: *mut f64,
    pub costbl_makemfcc_len: ::std::os::raw::c_int,
    pub sintbl_wcep: *mut f64,
    pub sintbl_wcep_len: ::std::os::raw::c_int,
    pub sqrt2var: f32,
    pub ssbuf: *mut f32,
    pub ssbuflen: ::std::os::raw::c_int,
    pub ss_floor: f32,
    pub ss_alpha: f32,
}
#[test]
fn bindgen_test_layout_MFCCWork() {
    const UNINIT: ::std::mem::MaybeUninit<MFCCWork> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MFCCWork>(),
        184usize,
        concat!("Size of: ", stringify!(MFCCWork))
    );
    assert_eq!(
        ::std::mem::align_of::<MFCCWork>(),
        8usize,
        concat!("Alignment of ", stringify!(MFCCWork))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(bf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fbank) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(fbank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fb) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(fb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bflen) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(bflen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fbank_only) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(fbank_only)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_fbank) as usize - ptr as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(log_fbank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).costbl_hamming) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(costbl_hamming)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).costbl_hamming_len) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(costbl_hamming_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).costbl_fft) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(costbl_fft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sintbl_fft) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(sintbl_fft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tbllen) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(tbllen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).costbl_makemfcc) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(costbl_makemfcc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).costbl_makemfcc_len) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(costbl_makemfcc_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sintbl_wcep) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(sintbl_wcep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sintbl_wcep_len) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(sintbl_wcep_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sqrt2var) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(sqrt2var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssbuf) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(ssbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssbuflen) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(ssbuflen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_floor) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(ss_floor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_alpha) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(MFCCWork),
            "::",
            stringify!(ss_alpha)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CMEAN {
    pub mfcc_sum: *mut f32,
    pub mfcc_var: *mut f32,
    pub framenum: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_CMEAN() {
    const UNINIT: ::std::mem::MaybeUninit<CMEAN> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CMEAN>(),
        24usize,
        concat!("Size of: ", stringify!(CMEAN))
    );
    assert_eq!(
        ::std::mem::align_of::<CMEAN>(),
        8usize,
        concat!("Alignment of ", stringify!(CMEAN))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mfcc_sum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CMEAN),
            "::",
            stringify!(mfcc_sum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mfcc_var) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CMEAN),
            "::",
            stringify!(mfcc_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framenum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CMEAN),
            "::",
            stringify!(framenum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CMNWork {
    pub clist: *mut CMEAN,
    pub clist_max: ::std::os::raw::c_int,
    pub clist_num: ::std::os::raw::c_int,
    pub cweight: f32,
    pub cmean_init: *mut f32,
    pub cvar_init: *mut f32,
    pub mfcc_dim: ::std::os::raw::c_int,
    pub veclen: ::std::os::raw::c_int,
    pub mean: boolean,
    pub var: boolean,
    pub cmean_init_set: boolean,
    pub now: CMEAN,
    pub all: CMEAN,
    pub loaded_from_file: boolean,
    pub do_map: boolean,
    pub static_cvn_only: boolean,
}
#[test]
fn bindgen_test_layout_CMNWork() {
    const UNINIT: ::std::mem::MaybeUninit<CMNWork> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CMNWork>(),
        112usize,
        concat!("Size of: ", stringify!(CMNWork))
    );
    assert_eq!(
        ::std::mem::align_of::<CMNWork>(),
        8usize,
        concat!("Alignment of ", stringify!(CMNWork))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clist) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(clist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clist_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(clist_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).clist_num) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(clist_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cweight) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(cweight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmean_init) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(cmean_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cvar_init) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(cvar_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mfcc_dim) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(mfcc_dim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).veclen) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(veclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mean) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(mean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmean_init_set) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(cmean_init_set)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).now) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(now)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(all)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loaded_from_file) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(loaded_from_file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_map) as usize - ptr as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(do_map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_cvn_only) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(CMNWork),
            "::",
            stringify!(static_cvn_only)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENERGYWork {
    pub max_last: LOGPROB,
    pub min_last: LOGPROB,
    pub max: LOGPROB,
}
#[test]
fn bindgen_test_layout_ENERGYWork() {
    const UNINIT: ::std::mem::MaybeUninit<ENERGYWork> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ENERGYWork>(),
        12usize,
        concat!("Size of: ", stringify!(ENERGYWork))
    );
    assert_eq!(
        ::std::mem::align_of::<ENERGYWork>(),
        4usize,
        concat!("Alignment of ", stringify!(ENERGYWork))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_last) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ENERGYWork),
            "::",
            stringify!(max_last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_last) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ENERGYWork),
            "::",
            stringify!(min_last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ENERGYWork),
            "::",
            stringify!(max)
        )
    );
}
extern "C" {
    pub fn WMP_work_new(para: *mut Value) -> *mut MFCCWork;
}
extern "C" {
    pub fn WMP_calc(w: *mut MFCCWork, mfcc: *mut f32, para: *mut Value);
}
extern "C" {
    pub fn WMP_free(w: *mut MFCCWork);
}
extern "C" {
    pub fn InitFBank(w: *mut MFCCWork, para: *mut Value) -> boolean;
}
extern "C" {
    pub fn FreeFBank(fb: *mut FBankInfo);
}
extern "C" {
    pub fn Hamming(wave: *mut f32, framesize: ::std::os::raw::c_int, w: *mut MFCCWork);
}
extern "C" {
    pub fn PreEmphasise(wave: *mut f32, framesize: ::std::os::raw::c_int, preEmph: f32);
}
extern "C" {
    pub fn Mel(k: ::std::os::raw::c_int, fres: f32) -> f32;
}
extern "C" {
    pub fn FFT(xRe: *mut f32, xIm: *mut f32, p: ::std::os::raw::c_int, w: *mut MFCCWork);
}
extern "C" {
    pub fn MakeFBank(wave: *mut f32, w: *mut MFCCWork, para: *mut Value);
}
extern "C" {
    pub fn MakeMFCC(mfcc: *mut f32, para: *mut Value, w: *mut MFCCWork);
}
extern "C" {
    pub fn CalcC0(w: *mut MFCCWork, para: *mut Value) -> f32;
}
extern "C" {
    pub fn CalcLogRawE(wave: *mut f32, framesize: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ZMeanFrame(wave: *mut f32, framesize: ::std::os::raw::c_int);
}
extern "C" {
    pub fn WeightCepstrum(mfcc: *mut f32, para: *mut Value, w: *mut MFCCWork);
}
extern "C" {
    pub fn Wav2MFCC(
        wave: *mut SP16,
        mfcc: *mut *mut f32,
        para: *mut Value,
        nSamples: ::std::os::raw::c_int,
        w: *mut MFCCWork,
        c: *mut CMNWork,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn Delta(c: *mut *mut f32, frame: ::std::os::raw::c_int, para: *mut Value);
}
extern "C" {
    pub fn Accel(c: *mut *mut f32, frame: ::std::os::raw::c_int, para: *mut Value);
}
extern "C" {
    pub fn NormaliseLogE(c: *mut *mut f32, frame_num: ::std::os::raw::c_int, para: *mut Value);
}
extern "C" {
    pub fn CMN(
        mfcc: *mut *mut f32,
        frame_num: ::std::os::raw::c_int,
        dim: ::std::os::raw::c_int,
        c: *mut CMNWork,
    );
}
extern "C" {
    pub fn MVN(
        mfcc: *mut *mut f32,
        frame_num: ::std::os::raw::c_int,
        para: *mut Value,
        c: *mut CMNWork,
    );
}
extern "C" {
    pub fn WMP_deltabuf_new(
        veclen: ::std::os::raw::c_int,
        windowlen: ::std::os::raw::c_int,
    ) -> *mut DeltaBuf;
}
extern "C" {
    pub fn WMP_deltabuf_free(db: *mut DeltaBuf);
}
extern "C" {
    pub fn WMP_deltabuf_prepare(db: *mut DeltaBuf);
}
extern "C" {
    pub fn WMP_deltabuf_proceed(db: *mut DeltaBuf, new_mfcc: *mut f32) -> boolean;
}
extern "C" {
    pub fn WMP_deltabuf_flush(db: *mut DeltaBuf) -> boolean;
}
extern "C" {
    pub fn CMN_realtime_new(para: *mut Value, weight: f32, map: boolean) -> *mut CMNWork;
}
extern "C" {
    pub fn CMN_realtime_free(c: *mut CMNWork);
}
extern "C" {
    pub fn CMN_realtime_prepare(c: *mut CMNWork);
}
extern "C" {
    pub fn CMN_realtime(c: *mut CMNWork, mfcc: *mut f32);
}
extern "C" {
    pub fn CMN_realtime_update(c: *mut CMNWork, param: *mut HTK_Param);
}
extern "C" {
    pub fn CMN_load_from_file(c: *mut CMNWork, filename: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn CMN_save_to_file(c: *mut CMNWork, filename: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn energy_max_init(energy: *mut ENERGYWork);
}
extern "C" {
    pub fn energy_max_prepare(energy: *mut ENERGYWork, para: *mut Value);
}
extern "C" {
    pub fn energy_max_normalize(energy: *mut ENERGYWork, f: LOGPROB, para: *mut Value) -> LOGPROB;
}
extern "C" {
    pub fn new_SS_load_from_file(
        filename: *mut ::std::os::raw::c_char,
        slen: *mut ::std::os::raw::c_int,
    ) -> *mut f32;
}
extern "C" {
    pub fn new_SS_calculate(
        wave: *mut SP16,
        wavelen: ::std::os::raw::c_int,
        slen: *mut ::std::os::raw::c_int,
        w: *mut MFCCWork,
        para: *mut Value,
    ) -> *mut f32;
}
extern "C" {
    pub fn undef_para(para: *mut Value);
}
extern "C" {
    pub fn make_default_para(para: *mut Value);
}
extern "C" {
    pub fn make_default_para_htk(para: *mut Value);
}
extern "C" {
    pub fn apply_para(dst: *mut Value, src: *mut Value);
}
extern "C" {
    pub fn htk_config_file_parse(
        HTKconffile: *mut ::std::os::raw::c_char,
        para: *mut Value,
    ) -> boolean;
}
extern "C" {
    pub fn calc_para_from_header(
        para: *mut Value,
        param_type: ::std::os::raw::c_short,
        vec_size: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn put_para(fp: *mut FILE, para: *mut Value);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _apatnode {
    pub value: _apatnode__bindgen_ty_1,
    pub left0: *mut _apatnode,
    pub right1: *mut _apatnode,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _apatnode__bindgen_ty_1 {
    pub data: *mut ::std::os::raw::c_void,
    pub thres_bit: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__apatnode__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_apatnode__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_apatnode__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_apatnode__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_apatnode__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_apatnode__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_apatnode__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thres_bit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_apatnode__bindgen_ty_1),
            "::",
            stringify!(thres_bit)
        )
    );
}
#[test]
fn bindgen_test_layout__apatnode() {
    const UNINIT: ::std::mem::MaybeUninit<_apatnode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_apatnode>(),
        24usize,
        concat!("Size of: ", stringify!(_apatnode))
    );
    assert_eq!(
        ::std::mem::align_of::<_apatnode>(),
        8usize,
        concat!("Alignment of ", stringify!(_apatnode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_apatnode),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_apatnode),
            "::",
            stringify!(left0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_apatnode),
            "::",
            stringify!(right1)
        )
    );
}
pub type APATNODE = _apatnode;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _patnode {
    pub value: _patnode__bindgen_ty_1,
    pub left0: *mut _patnode,
    pub right1: *mut _patnode,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _patnode__bindgen_ty_1 {
    pub data: ::std::os::raw::c_int,
    pub thres_bit: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__patnode__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_patnode__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_patnode__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(_patnode__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_patnode__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(_patnode__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_patnode__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thres_bit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_patnode__bindgen_ty_1),
            "::",
            stringify!(thres_bit)
        )
    );
}
#[test]
fn bindgen_test_layout__patnode() {
    const UNINIT: ::std::mem::MaybeUninit<_patnode> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_patnode>(),
        24usize,
        concat!("Size of: ", stringify!(_patnode))
    );
    assert_eq!(
        ::std::mem::align_of::<_patnode>(),
        8usize,
        concat!("Alignment of ", stringify!(_patnode))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_patnode),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left0) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_patnode),
            "::",
            stringify!(left0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right1) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_patnode),
            "::",
            stringify!(right1)
        )
    );
}
pub type PATNODE = _patnode;
extern "C" {
    pub fn testbit(
        str_: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        bitplace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn testbit_max(
        str_: *mut ::std::os::raw::c_char,
        bitplace: ::std::os::raw::c_int,
        maxbitplace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn where_the_bit_differ(
        str1: *mut ::std::os::raw::c_char,
        str2: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn make_ptree(
        words: *mut *mut ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_int,
        wordsnum: ::std::os::raw::c_int,
        bitplace: ::std::os::raw::c_int,
        mroot: *mut *mut BMALLOC_BASE,
    ) -> *mut PATNODE;
}
extern "C" {
    pub fn disp_ptree(node: *mut PATNODE, level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ptree_search_data(
        str_: *mut ::std::os::raw::c_char,
        rootnode: *mut PATNODE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptree_replace_data(
        str_: *mut ::std::os::raw::c_char,
        val: ::std::os::raw::c_int,
        node: *mut PATNODE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptree_make_root_node(
        data: ::std::os::raw::c_int,
        mroot: *mut *mut BMALLOC_BASE,
    ) -> *mut PATNODE;
}
extern "C" {
    pub fn ptree_add_entry(
        str_: *mut ::std::os::raw::c_char,
        data: ::std::os::raw::c_int,
        matchstr: *mut ::std::os::raw::c_char,
        rootnode: *mut *mut PATNODE,
        mroot: *mut *mut BMALLOC_BASE,
    );
}
extern "C" {
    pub fn aptree_search_data(
        str_: *mut ::std::os::raw::c_char,
        rootnode: *mut APATNODE,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aptree_make_root_node(
        data: *mut ::std::os::raw::c_void,
        mroot: *mut *mut BMALLOC_BASE,
    ) -> *mut APATNODE;
}
extern "C" {
    pub fn aptree_add_entry(
        str_: *mut ::std::os::raw::c_char,
        data: *mut ::std::os::raw::c_void,
        matchstr: *mut ::std::os::raw::c_char,
        rootnode: *mut *mut APATNODE,
        mroot: *mut *mut BMALLOC_BASE,
    );
}
extern "C" {
    pub fn aptree_remove_entry(str_: *mut ::std::os::raw::c_char, rootnode: *mut *mut APATNODE);
}
extern "C" {
    pub fn aptree_traverse_and_do(
        node: *mut APATNODE,
        callback: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn aptree_write(
        fp: *mut FILE,
        root: *mut APATNODE,
        save_data_func: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, fp: *mut FILE) -> boolean,
        >,
    ) -> boolean;
}
extern "C" {
    pub fn aptree_read(
        fp: *mut FILE,
        root: *mut *mut APATNODE,
        mroot: *mut *mut BMALLOC_BASE,
        data: *mut ::std::os::raw::c_void,
        load_data_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
                fp: *mut FILE,
            ) -> boolean,
        >,
    ) -> boolean;
}
pub const iwcd_type_IWCD_UNDEF: iwcd_type = 0;
pub const iwcd_type_IWCD_MAX: iwcd_type = 1;
pub const iwcd_type_IWCD_AVG: iwcd_type = 2;
pub const iwcd_type_IWCD_NBEST: iwcd_type = 3;
pub type iwcd_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HTK_HMM_StreamInfo {
    pub num: ::std::os::raw::c_short,
    pub vsize: [::std::os::raw::c_short; 50usize],
}
#[test]
fn bindgen_test_layout_HTK_HMM_StreamInfo() {
    const UNINIT: ::std::mem::MaybeUninit<HTK_HMM_StreamInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HTK_HMM_StreamInfo>(),
        102usize,
        concat!("Size of: ", stringify!(HTK_HMM_StreamInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<HTK_HMM_StreamInfo>(),
        2usize,
        concat!("Alignment of ", stringify!(HTK_HMM_StreamInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_StreamInfo),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vsize) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_StreamInfo),
            "::",
            stringify!(vsize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HTK_HMM_Options {
    pub stream_info: HTK_HMM_StreamInfo,
    pub vec_size: ::std::os::raw::c_short,
    pub cov_type: ::std::os::raw::c_short,
    pub dur_type: ::std::os::raw::c_short,
    pub param_type: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_HTK_HMM_Options() {
    const UNINIT: ::std::mem::MaybeUninit<HTK_HMM_Options> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HTK_HMM_Options>(),
        110usize,
        concat!("Size of: ", stringify!(HTK_HMM_Options))
    );
    assert_eq!(
        ::std::mem::align_of::<HTK_HMM_Options>(),
        2usize,
        concat!("Alignment of ", stringify!(HTK_HMM_Options))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_info) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_Options),
            "::",
            stringify!(stream_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vec_size) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_Options),
            "::",
            stringify!(vec_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cov_type) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_Options),
            "::",
            stringify!(cov_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dur_type) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_Options),
            "::",
            stringify!(dur_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_type) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_Options),
            "::",
            stringify!(param_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTK_HMM_trans {
    pub name: *mut ::std::os::raw::c_char,
    pub statenum: ::std::os::raw::c_short,
    pub a: *mut *mut PROB,
    pub id: ::std::os::raw::c_int,
    pub next: *mut _HTK_HMM_trans,
}
#[test]
fn bindgen_test_layout__HTK_HMM_trans() {
    const UNINIT: ::std::mem::MaybeUninit<_HTK_HMM_trans> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTK_HMM_trans>(),
        40usize,
        concat!("Size of: ", stringify!(_HTK_HMM_trans))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTK_HMM_trans>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTK_HMM_trans))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_trans),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).statenum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_trans),
            "::",
            stringify!(statenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_trans),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_trans),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_trans),
            "::",
            stringify!(next)
        )
    );
}
pub type HTK_HMM_Trans = _HTK_HMM_trans;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTK_HMM_variance {
    pub name: *mut ::std::os::raw::c_char,
    pub vec: *mut VECT,
    pub len: ::std::os::raw::c_short,
    pub next: *mut _HTK_HMM_variance,
}
#[test]
fn bindgen_test_layout__HTK_HMM_variance() {
    const UNINIT: ::std::mem::MaybeUninit<_HTK_HMM_variance> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTK_HMM_variance>(),
        32usize,
        concat!("Size of: ", stringify!(_HTK_HMM_variance))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTK_HMM_variance>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTK_HMM_variance))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_variance),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_variance),
            "::",
            stringify!(vec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_variance),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_variance),
            "::",
            stringify!(next)
        )
    );
}
pub type HTK_HMM_Var = _HTK_HMM_variance;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTK_HMM_dens {
    pub name: *mut ::std::os::raw::c_char,
    pub mean: *mut VECT,
    pub meanlen: ::std::os::raw::c_short,
    pub var: *mut HTK_HMM_Var,
    pub gconst: LOGPROB,
    pub next: *mut _HTK_HMM_dens,
}
#[test]
fn bindgen_test_layout__HTK_HMM_dens() {
    const UNINIT: ::std::mem::MaybeUninit<_HTK_HMM_dens> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTK_HMM_dens>(),
        48usize,
        concat!("Size of: ", stringify!(_HTK_HMM_dens))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTK_HMM_dens>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTK_HMM_dens))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_dens),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mean) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_dens),
            "::",
            stringify!(mean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).meanlen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_dens),
            "::",
            stringify!(meanlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).var) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_dens),
            "::",
            stringify!(var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gconst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_dens),
            "::",
            stringify!(gconst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_dens),
            "::",
            stringify!(next)
        )
    );
}
pub type HTK_HMM_Dens = _HTK_HMM_dens;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTK_HMM_stream_weight {
    pub name: *mut ::std::os::raw::c_char,
    pub weight: *mut VECT,
    pub len: ::std::os::raw::c_short,
    pub next: *mut _HTK_HMM_stream_weight,
}
#[test]
fn bindgen_test_layout__HTK_HMM_stream_weight() {
    const UNINIT: ::std::mem::MaybeUninit<_HTK_HMM_stream_weight> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTK_HMM_stream_weight>(),
        32usize,
        concat!("Size of: ", stringify!(_HTK_HMM_stream_weight))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTK_HMM_stream_weight>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTK_HMM_stream_weight))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_stream_weight),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_stream_weight),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_stream_weight),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_stream_weight),
            "::",
            stringify!(next)
        )
    );
}
pub type HTK_HMM_StreamWeight = _HTK_HMM_stream_weight;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTK_HMM_PDF {
    pub name: *mut ::std::os::raw::c_char,
    pub tmix: boolean,
    pub stream_id: ::std::os::raw::c_short,
    pub mix_num: ::std::os::raw::c_short,
    pub b: *mut *mut HTK_HMM_Dens,
    pub bweight: *mut PROB,
    pub next: *mut _HTK_HMM_PDF,
}
#[test]
fn bindgen_test_layout__HTK_HMM_PDF() {
    const UNINIT: ::std::mem::MaybeUninit<_HTK_HMM_PDF> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTK_HMM_PDF>(),
        40usize,
        concat!("Size of: ", stringify!(_HTK_HMM_PDF))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTK_HMM_PDF>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTK_HMM_PDF))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_PDF),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmix) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_PDF),
            "::",
            stringify!(tmix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stream_id) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_PDF),
            "::",
            stringify!(stream_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mix_num) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_PDF),
            "::",
            stringify!(mix_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_PDF),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bweight) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_PDF),
            "::",
            stringify!(bweight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_PDF),
            "::",
            stringify!(next)
        )
    );
}
pub type HTK_HMM_PDF = _HTK_HMM_PDF;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTK_HMM_state {
    pub name: *mut ::std::os::raw::c_char,
    pub nstream: ::std::os::raw::c_short,
    pub w: *mut HTK_HMM_StreamWeight,
    pub pdf: *mut *mut HTK_HMM_PDF,
    pub id: ::std::os::raw::c_int,
    pub next: *mut _HTK_HMM_state,
}
#[test]
fn bindgen_test_layout__HTK_HMM_state() {
    const UNINIT: ::std::mem::MaybeUninit<_HTK_HMM_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTK_HMM_state>(),
        48usize,
        concat!("Size of: ", stringify!(_HTK_HMM_state))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTK_HMM_state>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTK_HMM_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_state),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nstream) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_state),
            "::",
            stringify!(nstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_state),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_state),
            "::",
            stringify!(pdf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_state),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_state),
            "::",
            stringify!(next)
        )
    );
}
pub type HTK_HMM_State = _HTK_HMM_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _HTK_HMM_data {
    pub name: *mut ::std::os::raw::c_char,
    pub state_num: ::std::os::raw::c_short,
    pub s: *mut *mut HTK_HMM_State,
    pub tr: *mut HTK_HMM_Trans,
    pub next: *mut _HTK_HMM_data,
}
#[test]
fn bindgen_test_layout__HTK_HMM_data() {
    const UNINIT: ::std::mem::MaybeUninit<_HTK_HMM_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HTK_HMM_data>(),
        40usize,
        concat!("Size of: ", stringify!(_HTK_HMM_data))
    );
    assert_eq!(
        ::std::mem::align_of::<_HTK_HMM_data>(),
        8usize,
        concat!("Alignment of ", stringify!(_HTK_HMM_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_data),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_data),
            "::",
            stringify!(state_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_data),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_data),
            "::",
            stringify!(tr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_HTK_HMM_data),
            "::",
            stringify!(next)
        )
    );
}
pub type HTK_HMM_Data = _HTK_HMM_data;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GCODEBOOK {
    pub name: *mut ::std::os::raw::c_char,
    pub num: ::std::os::raw::c_int,
    pub d: *mut *mut HTK_HMM_Dens,
    pub id: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_GCODEBOOK() {
    const UNINIT: ::std::mem::MaybeUninit<GCODEBOOK> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GCODEBOOK>(),
        32usize,
        concat!("Size of: ", stringify!(GCODEBOOK))
    );
    assert_eq!(
        ::std::mem::align_of::<GCODEBOOK>(),
        8usize,
        concat!("Alignment of ", stringify!(GCODEBOOK))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GCODEBOOK),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GCODEBOOK),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GCODEBOOK),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GCODEBOOK),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GS_SET {
    pub state: *mut HTK_HMM_State,
}
#[test]
fn bindgen_test_layout_GS_SET() {
    const UNINIT: ::std::mem::MaybeUninit<GS_SET> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<GS_SET>(),
        8usize,
        concat!("Size of: ", stringify!(GS_SET))
    );
    assert_eq!(
        ::std::mem::align_of::<GS_SET>(),
        8usize,
        concat!("Alignment of ", stringify!(GS_SET))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GS_SET),
            "::",
            stringify!(state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CD_State_Set {
    pub s: *mut *mut HTK_HMM_State,
    pub num: ::std::os::raw::c_ushort,
    pub maxnum: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_CD_State_Set() {
    const UNINIT: ::std::mem::MaybeUninit<CD_State_Set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CD_State_Set>(),
        16usize,
        concat!("Size of: ", stringify!(CD_State_Set))
    );
    assert_eq!(
        ::std::mem::align_of::<CD_State_Set>(),
        8usize,
        concat!("Alignment of ", stringify!(CD_State_Set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CD_State_Set),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CD_State_Set),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxnum) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(CD_State_Set),
            "::",
            stringify!(maxnum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cd_set {
    pub name: *mut ::std::os::raw::c_char,
    pub stateset: *mut CD_State_Set,
    pub state_num: ::std::os::raw::c_ushort,
    pub tr: *mut HTK_HMM_Trans,
    pub next: *mut _cd_set,
}
#[test]
fn bindgen_test_layout__cd_set() {
    const UNINIT: ::std::mem::MaybeUninit<_cd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_cd_set>(),
        40usize,
        concat!("Size of: ", stringify!(_cd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<_cd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(_cd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_cd_set),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stateset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_cd_set),
            "::",
            stringify!(stateset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state_num) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_cd_set),
            "::",
            stringify!(state_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_cd_set),
            "::",
            stringify!(tr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_cd_set),
            "::",
            stringify!(next)
        )
    );
}
pub type CD_Set = _cd_set;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HMM_CDSET_INFO {
    pub binary_malloc: boolean,
    pub cdtree: *mut APATNODE,
}
#[test]
fn bindgen_test_layout_HMM_CDSET_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<HMM_CDSET_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HMM_CDSET_INFO>(),
        16usize,
        concat!("Size of: ", stringify!(HMM_CDSET_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<HMM_CDSET_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(HMM_CDSET_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).binary_malloc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HMM_CDSET_INFO),
            "::",
            stringify!(binary_malloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdtree) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HMM_CDSET_INFO),
            "::",
            stringify!(cdtree)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _HMM_logical {
    pub name: *mut ::std::os::raw::c_char,
    pub is_pseudo: boolean,
    pub body: _HMM_logical__bindgen_ty_1,
    pub next: *mut _HMM_logical,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _HMM_logical__bindgen_ty_1 {
    pub defined: *mut HTK_HMM_Data,
    pub pseudo: *mut CD_Set,
}
#[test]
fn bindgen_test_layout__HMM_logical__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<_HMM_logical__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HMM_logical__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_HMM_logical__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_HMM_logical__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_HMM_logical__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defined) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HMM_logical__bindgen_ty_1),
            "::",
            stringify!(defined)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pseudo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HMM_logical__bindgen_ty_1),
            "::",
            stringify!(pseudo)
        )
    );
}
#[test]
fn bindgen_test_layout__HMM_logical() {
    const UNINIT: ::std::mem::MaybeUninit<_HMM_logical> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_HMM_logical>(),
        32usize,
        concat!("Size of: ", stringify!(_HMM_logical))
    );
    assert_eq!(
        ::std::mem::align_of::<_HMM_logical>(),
        8usize,
        concat!("Alignment of ", stringify!(_HMM_logical))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_HMM_logical),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_pseudo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_HMM_logical),
            "::",
            stringify!(is_pseudo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_HMM_logical),
            "::",
            stringify!(body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_HMM_logical),
            "::",
            stringify!(next)
        )
    );
}
pub type HMM_Logical = _HMM_logical;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BASEPHONE {
    pub name: *mut ::std::os::raw::c_char,
    pub bgnflag: boolean,
    pub endflag: boolean,
}
#[test]
fn bindgen_test_layout_BASEPHONE() {
    const UNINIT: ::std::mem::MaybeUninit<BASEPHONE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BASEPHONE>(),
        16usize,
        concat!("Size of: ", stringify!(BASEPHONE))
    );
    assert_eq!(
        ::std::mem::align_of::<BASEPHONE>(),
        8usize,
        concat!("Alignment of ", stringify!(BASEPHONE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BASEPHONE),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bgnflag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BASEPHONE),
            "::",
            stringify!(bgnflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endflag) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(BASEPHONE),
            "::",
            stringify!(endflag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HMM_basephone {
    pub num: ::std::os::raw::c_int,
    pub bgnnum: ::std::os::raw::c_int,
    pub endnum: ::std::os::raw::c_int,
    pub root: *mut APATNODE,
}
#[test]
fn bindgen_test_layout_HMM_basephone() {
    const UNINIT: ::std::mem::MaybeUninit<HMM_basephone> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HMM_basephone>(),
        24usize,
        concat!("Size of: ", stringify!(HMM_basephone))
    );
    assert_eq!(
        ::std::mem::align_of::<HMM_basephone>(),
        8usize,
        concat!("Alignment of ", stringify!(HMM_basephone))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HMM_basephone),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bgnnum) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HMM_basephone),
            "::",
            stringify!(bgnnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HMM_basephone),
            "::",
            stringify!(endnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HMM_basephone),
            "::",
            stringify!(root)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HTK_HMM_INFO {
    pub opt: HTK_HMM_Options,
    pub trstart: *mut HTK_HMM_Trans,
    pub vrstart: *mut HTK_HMM_Var,
    pub dnstart: *mut HTK_HMM_Dens,
    pub pdfstart: *mut HTK_HMM_PDF,
    pub swstart: *mut HTK_HMM_StreamWeight,
    pub ststart: *mut HTK_HMM_State,
    pub start: *mut HTK_HMM_Data,
    pub lgstart: *mut HMM_Logical,
    pub tr_root: *mut APATNODE,
    pub vr_root: *mut APATNODE,
    pub sw_root: *mut APATNODE,
    pub dn_root: *mut APATNODE,
    pub pdf_root: *mut APATNODE,
    pub st_root: *mut APATNODE,
    pub physical_root: *mut APATNODE,
    pub logical_root: *mut APATNODE,
    pub codebook_root: *mut APATNODE,
    pub basephone: HMM_basephone,
    pub cdset_info: HMM_CDSET_INFO,
    pub need_multipath: boolean,
    pub multipath: boolean,
    pub is_triphone: boolean,
    pub is_tied_mixture: boolean,
    pub cdset_method: ::std::os::raw::c_short,
    pub cdmax_num: ::std::os::raw::c_short,
    pub sp: *mut HMM_Logical,
    pub iwsp_penalty: LOGPROB,
    pub variance_inversed: boolean,
    pub totaltransnum: ::std::os::raw::c_int,
    pub totalmixnum: ::std::os::raw::c_int,
    pub totalstatenum: ::std::os::raw::c_int,
    pub totalhmmnum: ::std::os::raw::c_int,
    pub totallogicalnum: ::std::os::raw::c_int,
    pub totalpseudonum: ::std::os::raw::c_int,
    pub totalpdfnum: ::std::os::raw::c_int,
    pub codebooknum: ::std::os::raw::c_int,
    pub maxcodebooksize: ::std::os::raw::c_int,
    pub maxmixturenum: ::std::os::raw::c_int,
    pub maxstatenum: ::std::os::raw::c_int,
    pub mroot: *mut BMALLOC_BASE,
    pub lroot: *mut BMALLOC_BASE,
    pub cdset_root: *mut BMALLOC_BASE,
    pub tmp_mixnum: *mut ::std::os::raw::c_int,
    pub hook: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_HTK_HMM_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<HTK_HMM_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HTK_HMM_INFO>(),
        400usize,
        concat!("Size of: ", stringify!(HTK_HMM_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<HTK_HMM_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(HTK_HMM_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trstart) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(trstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vrstart) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(vrstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dnstart) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(dnstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdfstart) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(pdfstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swstart) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(swstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ststart) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(ststart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lgstart) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(lgstart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tr_root) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(tr_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vr_root) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(vr_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sw_root) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(sw_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dn_root) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(dn_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pdf_root) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(pdf_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_root) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(st_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).physical_root) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(physical_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logical_root) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(logical_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codebook_root) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(codebook_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basephone) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(basephone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdset_info) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(cdset_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).need_multipath) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(need_multipath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multipath) as usize - ptr as usize },
        289usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(multipath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_triphone) as usize - ptr as usize },
        290usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(is_triphone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_tied_mixture) as usize - ptr as usize },
        291usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(is_tied_mixture)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdset_method) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(cdset_method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdmax_num) as usize - ptr as usize },
        294usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(cdmax_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iwsp_penalty) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(iwsp_penalty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).variance_inversed) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(variance_inversed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totaltransnum) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(totaltransnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalmixnum) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(totalmixnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalstatenum) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(totalstatenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalhmmnum) as usize - ptr as usize },
        324usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(totalhmmnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totallogicalnum) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(totallogicalnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalpseudonum) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(totalpseudonum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalpdfnum) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(totalpdfnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).codebooknum) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(codebooknum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxcodebooksize) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(maxcodebooksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxmixturenum) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(maxmixturenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxstatenum) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(maxstatenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mroot) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(mroot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lroot) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(lroot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdset_root) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(cdset_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmp_mixnum) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(tmp_mixnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hook) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(HTK_HMM_INFO),
            "::",
            stringify!(hook)
        )
    );
}
extern "C" {
    pub fn htk_hmm_set_pause_model(
        hmminfo: *mut HTK_HMM_INFO,
        spmodel_name: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn rderr(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn read_token(fp: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rdhmmdef(arg1: *mut FILE, arg2: *mut HTK_HMM_INFO) -> boolean;
}
extern "C" {
    pub fn htk_hmm_inverse_variances(hmm: *mut HTK_HMM_INFO);
}
extern "C" {
    pub fn htk_hmm_check_sid(hmm: *mut HTK_HMM_INFO) -> boolean;
}
extern "C" {
    pub fn set_global_opt(fp: *mut FILE, hmm: *mut HTK_HMM_INFO) -> boolean;
}
extern "C" {
    pub fn get_cov_str(covtype: ::std::os::raw::c_short) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_dur_str(durtype: ::std::os::raw::c_short) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn trans_add(hmm: *mut HTK_HMM_INFO, newParam: *mut HTK_HMM_Trans);
}
extern "C" {
    pub fn get_trans_data(arg1: *mut FILE, arg2: *mut HTK_HMM_INFO) -> *mut HTK_HMM_Trans;
}
extern "C" {
    pub fn def_trans_macro(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut FILE,
        arg3: *mut HTK_HMM_INFO,
    );
}
extern "C" {
    pub fn get_state_data(arg1: *mut FILE, arg2: *mut HTK_HMM_INFO) -> *mut HTK_HMM_State;
}
extern "C" {
    pub fn def_state_macro(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut FILE,
        arg3: *mut HTK_HMM_INFO,
    );
}
extern "C" {
    pub fn state_lookup(
        hmm: *mut HTK_HMM_INFO,
        keyname: *mut ::std::os::raw::c_char,
    ) -> *mut HTK_HMM_State;
}
extern "C" {
    pub fn state_add(hmm: *mut HTK_HMM_INFO, newParam: *mut HTK_HMM_State);
}
extern "C" {
    pub fn mpdf_add(hmm: *mut HTK_HMM_INFO, newParam: *mut HTK_HMM_PDF);
}
extern "C" {
    pub fn mpdf_lookup(
        hmm: *mut HTK_HMM_INFO,
        keyname: *mut ::std::os::raw::c_char,
    ) -> *mut HTK_HMM_PDF;
}
extern "C" {
    pub fn get_mpdf_data(
        fp: *mut FILE,
        hmm: *mut HTK_HMM_INFO,
        mix_num: ::std::os::raw::c_int,
        stream_id: ::std::os::raw::c_short,
    ) -> *mut HTK_HMM_PDF;
}
extern "C" {
    pub fn def_mpdf_macro(name: *mut ::std::os::raw::c_char, fp: *mut FILE, hmm: *mut HTK_HMM_INFO);
}
extern "C" {
    pub fn get_dens_data(arg1: *mut FILE, arg2: *mut HTK_HMM_INFO) -> *mut HTK_HMM_Dens;
}
extern "C" {
    pub fn def_dens_macro(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut FILE,
        arg3: *mut HTK_HMM_INFO,
    );
}
extern "C" {
    pub fn dens_lookup(
        hmm: *mut HTK_HMM_INFO,
        keyname: *mut ::std::os::raw::c_char,
    ) -> *mut HTK_HMM_Dens;
}
extern "C" {
    pub fn dens_add(hmm: *mut HTK_HMM_INFO, newParam: *mut HTK_HMM_Dens);
}
extern "C" {
    pub fn get_var_data(arg1: *mut FILE, arg2: *mut HTK_HMM_INFO) -> *mut HTK_HMM_Var;
}
extern "C" {
    pub fn def_var_macro(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut FILE,
        arg3: *mut HTK_HMM_INFO,
    );
}
extern "C" {
    pub fn var_add(hmm: *mut HTK_HMM_INFO, newParam: *mut HTK_HMM_Var);
}
extern "C" {
    pub fn get_streamweight_data(
        fp: *mut FILE,
        hmm: *mut HTK_HMM_INFO,
    ) -> *mut HTK_HMM_StreamWeight;
}
extern "C" {
    pub fn def_streamweight_macro(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut FILE,
        arg3: *mut HTK_HMM_INFO,
    );
}
extern "C" {
    pub fn sw_add(hmm: *mut HTK_HMM_INFO, newParam: *mut HTK_HMM_StreamWeight);
}
extern "C" {
    pub fn def_HMM(arg1: *mut ::std::os::raw::c_char, arg2: *mut FILE, arg3: *mut HTK_HMM_INFO);
}
extern "C" {
    pub fn htk_hmmdata_new(arg1: *mut HTK_HMM_INFO) -> *mut HTK_HMM_Data;
}
extern "C" {
    pub fn htk_hmmdata_add(hmm: *mut HTK_HMM_INFO, newParam: *mut HTK_HMM_Data);
}
extern "C" {
    pub fn tmix_read(fp: *mut FILE, mpdf: *mut HTK_HMM_PDF, hmm: *mut HTK_HMM_INFO);
}
extern "C" {
    pub fn codebook_add(hmm: *mut HTK_HMM_INFO, newParam: *mut GCODEBOOK);
}
extern "C" {
    pub fn def_regtree_macro(
        name: *mut ::std::os::raw::c_char,
        fp: *mut FILE,
        hmm: *mut HTK_HMM_INFO,
    );
}
extern "C" {
    pub fn rdhmmlist(fp: *mut FILE, hmminfo: *mut HTK_HMM_INFO) -> boolean;
}
extern "C" {
    pub fn save_hmmlist_bin(fp: *mut FILE, hmminfo: *mut HTK_HMM_INFO) -> boolean;
}
extern "C" {
    pub fn load_hmmlist_bin(fp: *mut FILE, hmminfo: *mut HTK_HMM_INFO) -> boolean;
}
extern "C" {
    pub fn put_htk_trans(fp: *mut FILE, t: *mut HTK_HMM_Trans);
}
extern "C" {
    pub fn put_htk_var(fp: *mut FILE, v: *mut HTK_HMM_Var);
}
extern "C" {
    pub fn put_htk_dens(fp: *mut FILE, d: *mut HTK_HMM_Dens);
}
extern "C" {
    pub fn put_htk_mpdf(fp: *mut FILE, m: *mut HTK_HMM_PDF);
}
extern "C" {
    pub fn put_htk_state(fp: *mut FILE, s: *mut HTK_HMM_State);
}
extern "C" {
    pub fn put_htk_hmm(fp: *mut FILE, h: *mut HTK_HMM_Data);
}
extern "C" {
    pub fn put_logical_hmm(fp: *mut FILE, l: *mut HMM_Logical);
}
extern "C" {
    pub fn print_hmmdef_info(fp: *mut FILE, arg1: *mut HTK_HMM_INFO);
}
extern "C" {
    pub fn hmminfo_new() -> *mut HTK_HMM_INFO;
}
extern "C" {
    pub fn hmminfo_free(arg1: *mut HTK_HMM_INFO) -> boolean;
}
extern "C" {
    pub fn init_hmminfo(
        hmminfo: *mut HTK_HMM_INFO,
        filename: *mut ::std::os::raw::c_char,
        mapfile: *mut ::std::os::raw::c_char,
        para: *mut Value,
    ) -> boolean;
}
extern "C" {
    pub fn htk_hmmdata_lookup_physical(
        arg1: *mut HTK_HMM_INFO,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut HTK_HMM_Data;
}
extern "C" {
    pub fn htk_hmmdata_lookup_logical(
        arg1: *mut HTK_HMM_INFO,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut HMM_Logical;
}
extern "C" {
    pub fn hmm_add_physical_to_logical(arg1: *mut HTK_HMM_INFO);
}
extern "C" {
    pub fn hmm_add_pseudo_phones(hmminfo: *mut HTK_HMM_INFO);
}
extern "C" {
    pub fn make_hmm_basephone_list(hmminfo: *mut HTK_HMM_INFO);
}
extern "C" {
    pub fn htk_hmm_has_several_arc_on_edge(hmminfo: *mut HTK_HMM_INFO) -> boolean;
}
extern "C" {
    pub fn check_hmm_limit(dt: *mut HTK_HMM_Data) -> boolean;
}
extern "C" {
    pub fn check_all_hmm_limit(hmm: *mut HTK_HMM_INFO) -> boolean;
}
extern "C" {
    pub fn check_hmm_options(hmm: *mut HTK_HMM_INFO) -> boolean;
}
extern "C" {
    pub fn is_skippable_model(d: *mut HTK_HMM_Data) -> boolean;
}
extern "C" {
    pub fn guess_if_cd_hmm(hmm: *mut HTK_HMM_INFO) -> boolean;
}
extern "C" {
    pub fn get_right_context_HMM(
        base: *mut HMM_Logical,
        rc_name: *mut ::std::os::raw::c_char,
        hmminfo: *mut HTK_HMM_INFO,
    ) -> *mut HMM_Logical;
}
extern "C" {
    pub fn get_left_context_HMM(
        base: *mut HMM_Logical,
        lc_name: *mut ::std::os::raw::c_char,
        hmminfo: *mut HTK_HMM_INFO,
    ) -> *mut HMM_Logical;
}
extern "C" {
    pub fn add_right_context(name: *mut ::std::os::raw::c_char, rc: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn add_left_context(name: *mut ::std::os::raw::c_char, lc: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn center_name(
        hmmname: *mut ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn leftcenter_name(
        hmmname: *mut ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rightcenter_name(
        hmmname: *mut ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn regist_cdset(
        root: *mut *mut APATNODE,
        d: *mut HTK_HMM_Data,
        cdname: *mut ::std::os::raw::c_char,
        mroot: *mut *mut BMALLOC_BASE,
    ) -> boolean;
}
extern "C" {
    pub fn make_cdset(hmminfo: *mut HTK_HMM_INFO) -> boolean;
}
extern "C" {
    pub fn put_all_cdinfo(hmminfo: *mut HTK_HMM_INFO);
}
extern "C" {
    pub fn free_cdset(root: *mut *mut APATNODE, mroot: *mut *mut BMALLOC_BASE);
}
extern "C" {
    pub fn cdset_lookup(
        hmminfo: *mut HTK_HMM_INFO,
        cdstr: *mut ::std::os::raw::c_char,
    ) -> *mut CD_Set;
}
extern "C" {
    pub fn lcdset_lookup_by_hmmname(
        hmminfo: *mut HTK_HMM_INFO,
        hmmname: *mut ::std::os::raw::c_char,
    ) -> *mut CD_Set;
}
extern "C" {
    pub fn rcdset_lookup_by_hmmname(
        hmminfo: *mut HTK_HMM_INFO,
        hmmname: *mut ::std::os::raw::c_char,
    ) -> *mut CD_Set;
}
extern "C" {
    pub fn hmm_logical_state_num(lg: *mut HMM_Logical) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hmm_logical_trans(lg: *mut HMM_Logical) -> *mut HTK_HMM_Trans;
}
extern "C" {
    pub fn check_param_coherence(hmm: *mut HTK_HMM_INFO, pinfo: *mut HTK_Param) -> boolean;
}
extern "C" {
    pub fn check_param_basetype(hmm: *mut HTK_HMM_INFO, pinfo: *mut HTK_Param) -> boolean;
}
extern "C" {
    pub fn param_check_and_adjust(
        hmm: *mut HTK_HMM_INFO,
        pinfo: *mut HTK_Param,
        vflag: boolean,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn write_binhmm(fp: *mut FILE, hmm: *mut HTK_HMM_INFO, para: *mut Value) -> boolean;
}
extern "C" {
    pub fn read_binhmm(
        fp: *mut FILE,
        hmm: *mut HTK_HMM_INFO,
        gzfile_p: boolean,
        para: *mut Value,
    ) -> boolean;
}
pub type DNN_FUNC_VOID = ::std::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DNNLayer {
    pub w: *mut f32,
    pub b: *mut f32,
    pub in_: ::std::os::raw::c_int,
    pub out: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DNNLayer() {
    const UNINIT: ::std::mem::MaybeUninit<DNNLayer> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DNNLayer>(),
        24usize,
        concat!("Size of: ", stringify!(DNNLayer))
    );
    assert_eq!(
        ::std::mem::align_of::<DNNLayer>(),
        8usize,
        concat!("Alignment of ", stringify!(DNNLayer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNLayer),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNLayer),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNLayer),
            "::",
            stringify!(in_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNLayer),
            "::",
            stringify!(out)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DNNData {
    pub o: DNNLayer,
    pub h: *mut DNNLayer,
    pub hnum: ::std::os::raw::c_int,
    pub state_prior: *mut f32,
    pub state_prior_num: ::std::os::raw::c_int,
    pub prior_factor: f32,
    pub batch_size: ::std::os::raw::c_int,
    pub num_threads: ::std::os::raw::c_int,
    pub veclen: ::std::os::raw::c_int,
    pub contextlen: ::std::os::raw::c_int,
    pub inputnodenum: ::std::os::raw::c_int,
    pub hiddennodenum: ::std::os::raw::c_int,
    pub outputnodenum: ::std::os::raw::c_int,
    pub invec: *mut f32,
    pub work: *mut *mut f32,
    pub accum: *mut f32,
    pub subfunc: DNN_FUNC_VOID,
}
#[test]
fn bindgen_test_layout_DNNData() {
    const UNINIT: ::std::mem::MaybeUninit<DNNData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DNNData>(),
        120usize,
        concat!("Size of: ", stringify!(DNNData))
    );
    assert_eq!(
        ::std::mem::align_of::<DNNData>(),
        8usize,
        concat!("Alignment of ", stringify!(DNNData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).o) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(o)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hnum) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(hnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state_prior) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(state_prior)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state_prior_num) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(state_prior_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prior_factor) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(prior_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).batch_size) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(batch_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_threads) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(num_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).veclen) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(veclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contextlen) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(contextlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputnodenum) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(inputnodenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hiddennodenum) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(hiddennodenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputnodenum) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(outputnodenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invec) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(invec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).work) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(work)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accum) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(accum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subfunc) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DNNData),
            "::",
            stringify!(subfunc)
        )
    );
}
pub const GPRUNE_SEL_UNDEF: _bindgen_ty_28 = 0;
pub const GPRUNE_SEL_NONE: _bindgen_ty_28 = 1;
pub const GPRUNE_SEL_SAFE: _bindgen_ty_28 = 2;
pub const GPRUNE_SEL_HEURISTIC: _bindgen_ty_28 = 3;
pub const GPRUNE_SEL_BEAM: _bindgen_ty_28 = 4;
pub const GPRUNE_SEL_USER: _bindgen_ty_28 = 5;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MIXCACHE {
    pub score: LOGPROB,
    pub id: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_MIXCACHE() {
    const UNINIT: ::std::mem::MaybeUninit<MIXCACHE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MIXCACHE>(),
        8usize,
        concat!("Size of: ", stringify!(MIXCACHE))
    );
    assert_eq!(
        ::std::mem::align_of::<MIXCACHE>(),
        4usize,
        concat!("Alignment of ", stringify!(MIXCACHE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MIXCACHE),
            "::",
            stringify!(score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MIXCACHE),
            "::",
            stringify!(id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __hmmwork__ {
    pub calc_outprob:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut __hmmwork__) -> LOGPROB>,
    pub calc_outprob_state:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut __hmmwork__) -> LOGPROB>,
    pub compute_gaussset: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut __hmmwork__,
            g: *mut *mut HTK_HMM_Dens,
            num: ::std::os::raw::c_int,
            last_id: *mut ::std::os::raw::c_int,
            lnum: ::std::os::raw::c_int,
        ),
    >,
    pub compute_gaussset_init:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut __hmmwork__) -> boolean>,
    pub compute_gaussset_free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut __hmmwork__)>,
    pub OP_hmminfo: *mut HTK_HMM_INFO,
    pub OP_gshmm: *mut HTK_HMM_INFO,
    pub OP_dnn: *mut DNNData,
    pub OP_param: *mut HTK_Param,
    pub OP_gprune_num: ::std::os::raw::c_int,
    pub OP_time: ::std::os::raw::c_int,
    pub OP_last_time: ::std::os::raw::c_int,
    pub OP_state: *mut HTK_HMM_State,
    pub OP_state_id: ::std::os::raw::c_int,
    pub OP_nstream: ::std::os::raw::c_short,
    pub OP_vec_stream: [*mut VECT; 50usize],
    pub OP_veclen_stream: [::std::os::raw::c_short; 50usize],
    pub OP_vec: *mut VECT,
    pub OP_veclen: ::std::os::raw::c_short,
    pub OP_calced_maxnum: ::std::os::raw::c_int,
    pub OP_calced_score: *mut LOGPROB,
    pub OP_calced_id: *mut ::std::os::raw::c_int,
    pub OP_calced_num: ::std::os::raw::c_int,
    pub statenum: ::std::os::raw::c_int,
    pub outprob_cache: *mut *mut LOGPROB,
    pub outprob_allocframenum: ::std::os::raw::c_int,
    pub croot: *mut BMALLOC_BASE,
    pub last_cache: *mut LOGPROB,
    pub mixture_cache: *mut *mut *mut MIXCACHE,
    pub mixture_cache_num: *mut *mut ::std::os::raw::c_short,
    pub mroot: *mut BMALLOC_BASE,
    pub tmix_last_id: *mut ::std::os::raw::c_int,
    pub tmix_allocframenum: ::std::os::raw::c_int,
    pub mixcalced: *mut boolean,
    pub dimthres: *mut LOGPROB,
    pub dimthres_num: ::std::os::raw::c_int,
    pub backmax: *mut LOGPROB,
    pub backmax_num: ::std::os::raw::c_int,
    pub cd_nbest_maxprobs: *mut LOGPROB,
    pub cd_nbest_maxn: ::std::os::raw::c_int,
    pub my_nbest: ::std::os::raw::c_int,
    pub gms_allocframenum: ::std::os::raw::c_int,
    pub gsset: *mut GS_SET,
    pub gsset_num: ::std::os::raw::c_int,
    pub state2gs: *mut ::std::os::raw::c_int,
    pub gms_is_selected: *mut boolean,
    pub fallback_score: *mut *mut LOGPROB,
    pub gsindex: *mut ::std::os::raw::c_int,
    pub t_fs: *mut LOGPROB,
    pub gms_last_max_id_list: *mut *mut ::std::os::raw::c_int,
    pub batch_computation: boolean,
}
#[test]
fn bindgen_test_layout___hmmwork__() {
    const UNINIT: ::std::mem::MaybeUninit<__hmmwork__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__hmmwork__>(),
        856usize,
        concat!("Size of: ", stringify!(__hmmwork__))
    );
    assert_eq!(
        ::std::mem::align_of::<__hmmwork__>(),
        8usize,
        concat!("Alignment of ", stringify!(__hmmwork__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calc_outprob) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(calc_outprob)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calc_outprob_state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(calc_outprob_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compute_gaussset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(compute_gaussset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compute_gaussset_init) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(compute_gaussset_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compute_gaussset_free) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(compute_gaussset_free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_hmminfo) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_hmminfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_gshmm) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_gshmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_dnn) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_dnn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_param) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_gprune_num) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_gprune_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_time) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_last_time) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_last_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_state) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_state_id) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_state_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_nstream) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_nstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_vec_stream) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_vec_stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_veclen_stream) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_veclen_stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_vec) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_vec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_veclen) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_veclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_calced_maxnum) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_calced_maxnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_calced_score) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_calced_score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_calced_id) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_calced_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_calced_num) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(OP_calced_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).statenum) as usize - ptr as usize },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(statenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outprob_cache) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(outprob_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outprob_allocframenum) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(outprob_allocframenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).croot) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(croot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_cache) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(last_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mixture_cache) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(mixture_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mixture_cache_num) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(mixture_cache_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mroot) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(mroot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmix_last_id) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(tmix_last_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmix_allocframenum) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(tmix_allocframenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mixcalced) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(mixcalced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimthres) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(dimthres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dimthres_num) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(dimthres_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backmax) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(backmax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backmax_num) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(backmax_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cd_nbest_maxprobs) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(cd_nbest_maxprobs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cd_nbest_maxn) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(cd_nbest_maxn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).my_nbest) as usize - ptr as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(my_nbest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gms_allocframenum) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(gms_allocframenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsset) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(gsset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsset_num) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(gsset_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state2gs) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(state2gs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gms_is_selected) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(gms_is_selected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fallback_score) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(fallback_score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsindex) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(gsindex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_fs) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(t_fs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gms_last_max_id_list) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(gms_last_max_id_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).batch_computation) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(__hmmwork__),
            "::",
            stringify!(batch_computation)
        )
    );
}
pub type HMMWork = __hmmwork__;
extern "C" {
    pub fn make_log_tbl();
}
extern "C" {
    pub fn addlog(x: LOGPROB, y: LOGPROB) -> LOGPROB;
}
extern "C" {
    pub fn addlog_array(x: *mut LOGPROB, n: ::std::os::raw::c_int) -> LOGPROB;
}
extern "C" {
    pub fn outprob_init(
        wrk: *mut HMMWork,
        hmminfo: *mut HTK_HMM_INFO,
        gshmm: *mut HTK_HMM_INFO,
        gms_num: ::std::os::raw::c_int,
        gprune_method: ::std::os::raw::c_int,
        gprune_mixnum: ::std::os::raw::c_int,
        dnn: *mut DNNData,
    ) -> boolean;
}
extern "C" {
    pub fn outprob_prepare(wrk: *mut HMMWork, framenum: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn outprob_free(wrk: *mut HMMWork);
}
extern "C" {
    pub fn outprob_set_batch_computation(wrk: *mut HMMWork, flag: boolean);
}
extern "C" {
    pub fn outprob_cache_init(wrk: *mut HMMWork) -> boolean;
}
extern "C" {
    pub fn outprob_cache_prepare(wrk: *mut HMMWork) -> boolean;
}
extern "C" {
    pub fn outprob_cache_free(wrk: *mut HMMWork);
}
extern "C" {
    pub fn outprob_state(
        wrk: *mut HMMWork,
        t: ::std::os::raw::c_int,
        stateinfo: *mut HTK_HMM_State,
        param: *mut HTK_Param,
    ) -> LOGPROB;
}
extern "C" {
    pub fn outprob_cd_nbest_init(wrk: *mut HMMWork, num: ::std::os::raw::c_int);
}
extern "C" {
    pub fn outprob_cd_nbest_free(wrk: *mut HMMWork);
}
extern "C" {
    pub fn outprob_cd(
        wrk: *mut HMMWork,
        t: ::std::os::raw::c_int,
        lset: *mut CD_State_Set,
        param: *mut HTK_Param,
    ) -> LOGPROB;
}
extern "C" {
    pub fn outprob_cache_output(
        fp: *mut FILE,
        wrk: *mut HMMWork,
        framenum: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn gms_init(wrk: *mut HMMWork) -> boolean;
}
extern "C" {
    pub fn gms_prepare(wrk: *mut HMMWork, framelen: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn gms_free(wrk: *mut HMMWork);
}
extern "C" {
    pub fn gms_state(wrk: *mut HMMWork) -> LOGPROB;
}
extern "C" {
    pub fn gms_gprune_init(wrk: *mut HMMWork);
}
extern "C" {
    pub fn gms_gprune_prepare(wrk: *mut HMMWork);
}
extern "C" {
    pub fn gms_gprune_free(wrk: *mut HMMWork);
}
extern "C" {
    pub fn compute_gs_scores(wrk: *mut HMMWork);
}
extern "C" {
    pub fn calc_mix(wrk: *mut HMMWork) -> LOGPROB;
}
extern "C" {
    pub fn calc_tied_mix_init(wrk: *mut HMMWork) -> boolean;
}
extern "C" {
    pub fn calc_tied_mix_prepare(wrk: *mut HMMWork, framenum: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn calc_tied_mix_free(wrk: *mut HMMWork);
}
extern "C" {
    pub fn calc_tied_mix(wrk: *mut HMMWork) -> LOGPROB;
}
extern "C" {
    pub fn calc_compound_mix(wrk: *mut HMMWork) -> LOGPROB;
}
extern "C" {
    pub fn cache_push(
        wrk: *mut HMMWork,
        id: ::std::os::raw::c_int,
        score: LOGPROB,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn compute_g_base(wrk: *mut HMMWork, binfo: *mut HTK_HMM_Dens) -> LOGPROB;
}
extern "C" {
    pub fn gprune_none_init(wrk: *mut HMMWork) -> boolean;
}
extern "C" {
    pub fn gprune_none_free(wrk: *mut HMMWork);
}
extern "C" {
    pub fn gprune_none(
        wrk: *mut HMMWork,
        g: *mut *mut HTK_HMM_Dens,
        num: ::std::os::raw::c_int,
        last_id: *mut ::std::os::raw::c_int,
        lnum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn compute_g_safe(wrk: *mut HMMWork, binfo: *mut HTK_HMM_Dens, thres: LOGPROB) -> LOGPROB;
}
extern "C" {
    pub fn gprune_safe_init(wrk: *mut HMMWork) -> boolean;
}
extern "C" {
    pub fn gprune_safe_free(wrk: *mut HMMWork);
}
extern "C" {
    pub fn gprune_safe(
        wrk: *mut HMMWork,
        g: *mut *mut HTK_HMM_Dens,
        gnum: ::std::os::raw::c_int,
        last_id: *mut ::std::os::raw::c_int,
        lnum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gprune_heu_init(wrk: *mut HMMWork) -> boolean;
}
extern "C" {
    pub fn gprune_heu_free(wrk: *mut HMMWork);
}
extern "C" {
    pub fn gprune_heu(
        wrk: *mut HMMWork,
        g: *mut *mut HTK_HMM_Dens,
        gnum: ::std::os::raw::c_int,
        last_id: *mut ::std::os::raw::c_int,
        lnum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn gprune_beam_init(wrk: *mut HMMWork) -> boolean;
}
extern "C" {
    pub fn gprune_beam_free(wrk: *mut HMMWork);
}
extern "C" {
    pub fn gprune_beam(
        wrk: *mut HMMWork,
        g: *mut *mut HTK_HMM_Dens,
        gnum: ::std::os::raw::c_int,
        last_id: *mut ::std::os::raw::c_int,
        lnum: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn get_builtin_simd_string(buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn check_avail_simd() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dnn_new() -> *mut DNNData;
}
extern "C" {
    pub fn dnn_clear(dnn: *mut DNNData);
}
extern "C" {
    pub fn dnn_free(dnn: *mut DNNData);
}
extern "C" {
    pub fn dnn_setup(
        dnn: *mut DNNData,
        veclen: ::std::os::raw::c_int,
        contextlen: ::std::os::raw::c_int,
        inputnodes: ::std::os::raw::c_int,
        outputnodes: ::std::os::raw::c_int,
        hiddennodes: ::std::os::raw::c_int,
        hiddenlayernum: ::std::os::raw::c_int,
        wfile: *mut *mut ::std::os::raw::c_char,
        bfile: *mut *mut ::std::os::raw::c_char,
        output_wfile: *mut ::std::os::raw::c_char,
        output_bfile: *mut ::std::os::raw::c_char,
        priorfile: *mut ::std::os::raw::c_char,
        prior_factor: f32,
        state_prior_log10nize: boolean,
        batchsize: ::std::os::raw::c_int,
        num_threads: ::std::os::raw::c_int,
        cuda_mode: *mut ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn dnn_calc_outprob(wrk: *mut HMMWork);
}
extern "C" {
    pub fn calc_dnn_fma(
        dst: *mut f32,
        src: *mut f32,
        w: *mut f32,
        b: *mut f32,
        out: ::std::os::raw::c_int,
        in_: ::std::os::raw::c_int,
        fstore: *mut f32,
    );
}
extern "C" {
    pub fn calc_dnn_avx(
        dst: *mut f32,
        src: *mut f32,
        w: *mut f32,
        b: *mut f32,
        out: ::std::os::raw::c_int,
        in_: ::std::os::raw::c_int,
        fstore: *mut f32,
    );
}
extern "C" {
    pub fn calc_dnn_sse(
        dst: *mut f32,
        src: *mut f32,
        w: *mut f32,
        b: *mut f32,
        out: ::std::os::raw::c_int,
        in_: ::std::os::raw::c_int,
        fstore: *mut f32,
    );
}
extern "C" {
    pub fn calc_dnn_neonv2(
        dst: *mut f32,
        src: *mut f32,
        w: *mut f32,
        b: *mut f32,
        out: ::std::os::raw::c_int,
        in_: ::std::os::raw::c_int,
        fstore: *mut f32,
    );
}
extern "C" {
    pub fn calc_dnn_neon(
        dst: *mut f32,
        src: *mut f32,
        w: *mut f32,
        b: *mut f32,
        out: ::std::os::raw::c_int,
        in_: ::std::os::raw::c_int,
        fstore: *mut f32,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _a_cell {
    pub a: LOGPROB,
    pub arc: ::std::os::raw::c_int,
    pub next: *mut _a_cell,
}
#[test]
fn bindgen_test_layout__a_cell() {
    const UNINIT: ::std::mem::MaybeUninit<_a_cell> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_a_cell>(),
        16usize,
        concat!("Size of: ", stringify!(_a_cell))
    );
    assert_eq!(
        ::std::mem::align_of::<_a_cell>(),
        8usize,
        concat!("Alignment of ", stringify!(_a_cell))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_a_cell),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_a_cell),
            "::",
            stringify!(arc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_a_cell),
            "::",
            stringify!(next)
        )
    );
}
pub type A_CELL = _a_cell;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HMM_STATE {
    pub ac: *mut A_CELL,
    pub out: HMM_STATE__bindgen_ty_1,
    pub is_pseudo_state: boolean,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union HMM_STATE__bindgen_ty_1 {
    pub state: *mut HTK_HMM_State,
    pub cdset: *mut CD_State_Set,
}
#[test]
fn bindgen_test_layout_HMM_STATE__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<HMM_STATE__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HMM_STATE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(HMM_STATE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<HMM_STATE__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(HMM_STATE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HMM_STATE__bindgen_ty_1),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cdset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HMM_STATE__bindgen_ty_1),
            "::",
            stringify!(cdset)
        )
    );
}
#[test]
fn bindgen_test_layout_HMM_STATE() {
    const UNINIT: ::std::mem::MaybeUninit<HMM_STATE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HMM_STATE>(),
        24usize,
        concat!("Size of: ", stringify!(HMM_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<HMM_STATE>(),
        8usize,
        concat!("Alignment of ", stringify!(HMM_STATE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ac) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HMM_STATE),
            "::",
            stringify!(ac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HMM_STATE),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_pseudo_state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HMM_STATE),
            "::",
            stringify!(is_pseudo_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HMM {
    pub len: ::std::os::raw::c_int,
    pub state: *mut HMM_STATE,
    pub accept_ac_a: LOGPROB,
}
#[test]
fn bindgen_test_layout_HMM() {
    const UNINIT: ::std::mem::MaybeUninit<HMM> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HMM>(),
        24usize,
        concat!("Size of: ", stringify!(HMM))
    );
    assert_eq!(
        ::std::mem::align_of::<HMM>(),
        8usize,
        concat!("Alignment of ", stringify!(HMM))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(HMM), "::", stringify!(len))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HMM),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).accept_ac_a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HMM),
            "::",
            stringify!(accept_ac_a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _seg_token {
    pub last_id: ::std::os::raw::c_int,
    pub last_end_frame: ::std::os::raw::c_int,
    pub last_end_score: LOGPROB,
    pub next: *mut _seg_token,
    pub list: *mut _seg_token,
}
#[test]
fn bindgen_test_layout__seg_token() {
    const UNINIT: ::std::mem::MaybeUninit<_seg_token> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_seg_token>(),
        32usize,
        concat!("Size of: ", stringify!(_seg_token))
    );
    assert_eq!(
        ::std::mem::align_of::<_seg_token>(),
        8usize,
        concat!("Alignment of ", stringify!(_seg_token))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_seg_token),
            "::",
            stringify!(last_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_end_frame) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_seg_token),
            "::",
            stringify!(last_end_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_end_score) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_seg_token),
            "::",
            stringify!(last_end_score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_seg_token),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_seg_token),
            "::",
            stringify!(list)
        )
    );
}
pub type SEGTOKEN = _seg_token;
extern "C" {
    pub fn new_make_word_hmm(
        arg1: *mut HTK_HMM_INFO,
        arg2: *mut *mut HMM_Logical,
        arg3: ::std::os::raw::c_int,
        arg4: *mut boolean,
    ) -> *mut HMM;
}
extern "C" {
    pub fn new_make_word_hmm_with_lm(
        arg1: *mut HTK_HMM_INFO,
        arg2: *mut *mut HMM_Logical,
        arg3: ::std::os::raw::c_int,
        arg4: *mut boolean,
        arg5: *mut LOGPROB,
    ) -> *mut HMM;
}
extern "C" {
    pub fn free_hmm(arg1: *mut HMM);
}
extern "C" {
    pub fn viterbi_segment(
        hmm: *mut HMM,
        param: *mut HTK_Param,
        wrk: *mut HMMWork,
        multipath: boolean,
        endstates: *mut ::std::os::raw::c_int,
        ulen: ::std::os::raw::c_int,
        id_ret: *mut *mut ::std::os::raw::c_int,
        seg_ret: *mut *mut ::std::os::raw::c_int,
        uscore_ret: *mut *mut LOGPROB,
        retlen: *mut ::std::os::raw::c_int,
    ) -> LOGPROB;
}
extern "C" {
    pub fn outprob(
        wrk: *mut HMMWork,
        t: ::std::os::raw::c_int,
        hmmstate: *mut HMM_STATE,
        param: *mut HTK_Param,
    ) -> LOGPROB;
}
extern "C" {
    pub fn put_hmm_arc(fp: *mut FILE, d: *mut HMM);
}
extern "C" {
    pub fn put_hmm_outprob(fp: *mut FILE, d: *mut HMM);
}
extern "C" {
    pub fn put_hmm(fp: *mut FILE, d: *mut HMM);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WORD_INFO {
    pub maxnum: WORD_ID,
    pub num: WORD_ID,
    pub errnum: WORD_ID,
    pub linenum: WORD_ID,
    pub do_conv: boolean,
    pub ok_flag: boolean,
    pub wlen: *mut ::std::os::raw::c_uchar,
    pub wname: *mut *mut ::std::os::raw::c_char,
    pub woutput: *mut *mut ::std::os::raw::c_char,
    pub wseq: *mut *mut *mut HMM_Logical,
    pub wton: *mut WORD_ID,
    pub cprob: *mut LOGPROB,
    pub cwnum: WORD_ID,
    pub head_silwid: WORD_ID,
    pub tail_silwid: WORD_ID,
    pub maxwn: ::std::os::raw::c_short,
    pub maxwlen: ::std::os::raw::c_short,
    pub totalstatenum: ::std::os::raw::c_int,
    pub totalmodelnum: ::std::os::raw::c_int,
    pub totaltransnum: ::std::os::raw::c_int,
    pub is_transparent: *mut boolean,
    pub weight: *mut f32,
    pub errph_root: *mut APATNODE,
    pub mroot: *mut BMALLOC_BASE,
    pub work: *mut ::std::os::raw::c_void,
    pub work_num: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WORD_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<WORD_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WORD_INFO>(),
        152usize,
        concat!("Size of: ", stringify!(WORD_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<WORD_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(WORD_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(maxnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(errnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linenum) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(linenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).do_conv) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(do_conv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ok_flag) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(ok_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wlen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(wlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wname) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(wname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).woutput) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(woutput)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wseq) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wton) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(wton)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cprob) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(cprob)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cwnum) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(cwnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head_silwid) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(head_silwid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail_silwid) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(tail_silwid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxwn) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(maxwn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxwlen) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(maxwlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalstatenum) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(totalstatenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalmodelnum) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(totalmodelnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totaltransnum) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(totaltransnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_transparent) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(is_transparent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).weight) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errph_root) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(errph_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mroot) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(mroot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).work) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(work)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).work_num) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(WORD_INFO),
            "::",
            stringify!(work_num)
        )
    );
}
extern "C" {
    pub fn word_info_new() -> *mut WORD_INFO;
}
extern "C" {
    pub fn word_info_free(winfo: *mut WORD_INFO);
}
extern "C" {
    pub fn winfo_init(winfo: *mut WORD_INFO);
}
extern "C" {
    pub fn winfo_expand(winfo: *mut WORD_INFO) -> boolean;
}
extern "C" {
    pub fn init_voca(
        winfo: *mut WORD_INFO,
        filename: *mut ::std::os::raw::c_char,
        hmminfo: *mut HTK_HMM_INFO,
        arg1: boolean,
        arg2: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn init_wordlist(
        winfo: *mut WORD_INFO,
        filename: *mut ::std::os::raw::c_char,
        hmminfo: *mut HTK_HMM_INFO,
        headphone: *mut ::std::os::raw::c_char,
        tailphone: *mut ::std::os::raw::c_char,
        contextphone: *mut ::std::os::raw::c_char,
        force_dict: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn voca_set_stats(winfo: *mut WORD_INFO);
}
extern "C" {
    pub fn voca_load_start(
        winfo: *mut WORD_INFO,
        hmminfo: *mut HTK_HMM_INFO,
        ignore_tri_conv: boolean,
    );
}
extern "C" {
    pub fn voca_load_line(
        buf: *mut ::std::os::raw::c_char,
        winfo: *mut WORD_INFO,
        hmminfo: *mut HTK_HMM_INFO,
    ) -> boolean;
}
extern "C" {
    pub fn voca_load_end(winfo: *mut WORD_INFO) -> boolean;
}
extern "C" {
    pub fn voca_load_htkdict(
        arg1: *mut FILE,
        arg2: *mut WORD_INFO,
        arg3: *mut HTK_HMM_INFO,
        arg4: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn voca_load_htkdict_fp(
        arg1: *mut FILE,
        arg2: *mut WORD_INFO,
        arg3: *mut HTK_HMM_INFO,
        arg4: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn voca_append_htkdict(
        entry: *mut ::std::os::raw::c_char,
        winfo: *mut WORD_INFO,
        hmminfo: *mut HTK_HMM_INFO,
        ignore_tri_conv: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn voca_append(
        dstinfo: *mut WORD_INFO,
        srcinfo: *mut WORD_INFO,
        coffset: ::std::os::raw::c_int,
        woffset: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn voca_load_htkdict_line(
        buf: *mut ::std::os::raw::c_char,
        vnum: *mut WORD_ID,
        linenum: ::std::os::raw::c_int,
        winfo: *mut WORD_INFO,
        hmminfo: *mut HTK_HMM_INFO,
        do_conv: boolean,
        ok_flag: *mut boolean,
    ) -> boolean;
}
extern "C" {
    pub fn voca_load_word_line(
        buf: *mut ::std::os::raw::c_char,
        winfo: *mut WORD_INFO,
        hmminfo: *mut HTK_HMM_INFO,
        headphone: *mut ::std::os::raw::c_char,
        tailpohone: *mut ::std::os::raw::c_char,
        contextphone: *mut ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn voca_load_wordlist(
        fp: *mut FILE,
        winfo: *mut WORD_INFO,
        hmminfo: *mut HTK_HMM_INFO,
        headphone: *mut ::std::os::raw::c_char,
        tailphone: *mut ::std::os::raw::c_char,
        contextphone: *mut ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn voca_load_wordlist_fp(
        fp: *mut FILE,
        winfo: *mut WORD_INFO,
        hmminfo: *mut HTK_HMM_INFO,
        headphone: *mut ::std::os::raw::c_char,
        tailphone: *mut ::std::os::raw::c_char,
        contextphone: *mut ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn voca_load_wordlist_line(
        buf: *mut ::std::os::raw::c_char,
        vnum: *mut WORD_ID,
        linenum: ::std::os::raw::c_int,
        winfo: *mut WORD_INFO,
        hmminfo: *mut HTK_HMM_INFO,
        do_conv: boolean,
        ok_flag: *mut boolean,
        headphone: *mut ::std::os::raw::c_char,
        tailphone: *mut ::std::os::raw::c_char,
        contextphone: *mut ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn voca_mono2tri(winfo: *mut WORD_INFO, hmminfo: *mut HTK_HMM_INFO) -> boolean;
}
extern "C" {
    pub fn voca_lookup_wid(arg1: *mut ::std::os::raw::c_char, arg2: *mut WORD_INFO) -> WORD_ID;
}
extern "C" {
    pub fn new_str2wordseq(
        arg1: *mut WORD_INFO,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut WORD_ID;
}
extern "C" {
    pub fn cycle_triphone(p: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cycle_triphone_flush() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn print_voca_info(fp: *mut FILE, arg1: *mut WORD_INFO);
}
extern "C" {
    pub fn put_voca(fp: *mut FILE, winfo: *mut WORD_INFO, wid: WORD_ID);
}
extern "C" {
    pub fn make_base_phone(hmminfo: *mut HTK_HMM_INFO, winfo: *mut WORD_INFO) -> boolean;
}
extern "C" {
    pub fn print_phone_info(fp: *mut FILE, hmminfo: *mut HTK_HMM_INFO);
}
extern "C" {
    pub fn print_all_basephone_detail(base: *mut HMM_basephone);
}
extern "C" {
    pub fn print_all_basephone_name(base: *mut HMM_basephone);
}
extern "C" {
    pub fn test_interword_triphone(hmminfo: *mut HTK_HMM_INFO, winfo: *mut WORD_INFO);
}
pub type NNID = ::std::os::raw::c_uint;
pub type NNID_UPPER = ::std::os::raw::c_uchar;
pub type NNID_LOWER = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NGRAM_TUPLE_INFO {
    pub totalnum: NNID,
    pub is24bit: boolean,
    pub bgnlistlen: NNID,
    pub bgn_upper: *mut NNID_UPPER,
    pub bgn_lower: *mut NNID_LOWER,
    pub bgn: *mut NNID,
    pub num: *mut WORD_ID,
    pub nnid2wid: *mut WORD_ID,
    pub prob: *mut LOGPROB,
    pub context_num: NNID,
    pub bo_wt: *mut LOGPROB,
    pub ct_compaction: boolean,
    pub nnid2ctid_upper: *mut NNID_UPPER,
    pub nnid2ctid_lower: *mut NNID_LOWER,
}
#[test]
fn bindgen_test_layout_NGRAM_TUPLE_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<NGRAM_TUPLE_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<NGRAM_TUPLE_INFO>(),
        104usize,
        concat!("Size of: ", stringify!(NGRAM_TUPLE_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<NGRAM_TUPLE_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(NGRAM_TUPLE_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(totalnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is24bit) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(is24bit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bgnlistlen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(bgnlistlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bgn_upper) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(bgn_upper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bgn_lower) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(bgn_lower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bgn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(bgn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nnid2wid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(nnid2wid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prob) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(prob)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context_num) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(context_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bo_wt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(bo_wt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ct_compaction) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(ct_compaction)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nnid2ctid_upper) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(nnid2ctid_upper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nnid2ctid_lower) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(NGRAM_TUPLE_INFO),
            "::",
            stringify!(nnid2ctid_lower)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ngram_info__ {
    pub n: ::std::os::raw::c_int,
    pub dir: ::std::os::raw::c_int,
    pub from_bin: boolean,
    pub bigram_index_reversed: boolean,
    pub bos_eos_swap: boolean,
    pub max_word_num: WORD_ID,
    pub wname: *mut *mut ::std::os::raw::c_char,
    pub root: *mut PATNODE,
    pub unk_id: WORD_ID,
    pub unk_num: ::std::os::raw::c_int,
    pub unk_num_log: LOGPROB,
    pub isopen: boolean,
    pub d: *mut NGRAM_TUPLE_INFO,
    pub bo_wt_1: *mut LOGPROB,
    pub p_2: *mut LOGPROB,
    pub bigram_prob: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut __ngram_info__, arg2: WORD_ID, arg3: WORD_ID) -> LOGPROB,
    >,
    pub mroot: *mut BMALLOC_BASE,
}
#[test]
fn bindgen_test_layout___ngram_info__() {
    const UNINIT: ::std::mem::MaybeUninit<__ngram_info__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__ngram_info__>(),
        88usize,
        concat!("Size of: ", stringify!(__ngram_info__))
    );
    assert_eq!(
        ::std::mem::align_of::<__ngram_info__>(),
        8usize,
        concat!("Alignment of ", stringify!(__ngram_info__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_bin) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(from_bin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bigram_index_reversed) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(bigram_index_reversed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bos_eos_swap) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(bos_eos_swap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_word_num) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(max_word_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wname) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(wname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unk_id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(unk_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unk_num) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(unk_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unk_num_log) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(unk_num_log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isopen) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(isopen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bo_wt_1) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(bo_wt_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p_2) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(p_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bigram_prob) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(bigram_prob)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mroot) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__ngram_info__),
            "::",
            stringify!(mroot)
        )
    );
}
pub type NGRAM_INFO = __ngram_info__;
extern "C" {
    pub fn search_ngram(ndata: *mut NGRAM_INFO, n: ::std::os::raw::c_int, w: *mut WORD_ID) -> NNID;
}
extern "C" {
    pub fn ngram_prob(ndata: *mut NGRAM_INFO, n: ::std::os::raw::c_int, w: *mut WORD_ID)
        -> LOGPROB;
}
extern "C" {
    pub fn uni_prob(ndata: *mut NGRAM_INFO, w: WORD_ID) -> LOGPROB;
}
extern "C" {
    pub fn bi_prob(ndata: *mut NGRAM_INFO, w1: WORD_ID, w2: WORD_ID) -> LOGPROB;
}
extern "C" {
    pub fn bi_prob_func_set(ndata: *mut NGRAM_INFO);
}
extern "C" {
    pub fn ngram_read_arpa(fp: *mut FILE, ndata: *mut NGRAM_INFO, addition: boolean) -> boolean;
}
extern "C" {
    pub fn ngram_read_bin(fp: *mut FILE, ndata: *mut NGRAM_INFO) -> boolean;
}
extern "C" {
    pub fn ngram_write_arpa(ndata: *mut NGRAM_INFO, fp: *mut FILE, fp_rev: *mut FILE) -> boolean;
}
extern "C" {
    pub fn ngram_write_bin(
        fp: *mut FILE,
        ndata: *mut NGRAM_INFO,
        header_str: *mut ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn ngram_compact_context(ndata: *mut NGRAM_INFO, n: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn ngram_make_lookup_tree(ndata: *mut NGRAM_INFO);
}
extern "C" {
    pub fn ngram_lookup_word(
        ndata: *mut NGRAM_INFO,
        wordstr: *mut ::std::os::raw::c_char,
    ) -> WORD_ID;
}
extern "C" {
    pub fn make_ngram_ref(arg1: *mut NGRAM_INFO, arg2: *mut ::std::os::raw::c_char) -> WORD_ID;
}
extern "C" {
    pub fn ngram_info_new() -> *mut NGRAM_INFO;
}
extern "C" {
    pub fn ngram_info_free(ngram: *mut NGRAM_INFO);
}
extern "C" {
    pub fn init_ngram_bin(
        ndata: *mut NGRAM_INFO,
        ngram_file: *mut ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn init_ngram_arpa(
        ndata: *mut NGRAM_INFO,
        ngram_file: *mut ::std::os::raw::c_char,
        dir: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn init_ngram_arpa_additional(
        ndata: *mut NGRAM_INFO,
        bigram_file: *mut ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn set_default_unknown_id(ndata: *mut NGRAM_INFO);
}
extern "C" {
    pub fn set_unknown_id(ndata: *mut NGRAM_INFO, str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn print_ngram_info(fp: *mut FILE, ndata: *mut NGRAM_INFO);
}
extern "C" {
    pub fn make_voca_ref(ndata: *mut NGRAM_INFO, winfo: *mut WORD_INFO) -> boolean;
}
extern "C" {
    pub fn fix_uniprob_srilm(ndata: *mut NGRAM_INFO, winfo: *mut WORD_INFO);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dfa_arc {
    pub label: ::std::os::raw::c_short,
    pub to_state: ::std::os::raw::c_int,
    pub next: *mut _dfa_arc,
}
#[test]
fn bindgen_test_layout__dfa_arc() {
    const UNINIT: ::std::mem::MaybeUninit<_dfa_arc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_dfa_arc>(),
        16usize,
        concat!("Size of: ", stringify!(_dfa_arc))
    );
    assert_eq!(
        ::std::mem::align_of::<_dfa_arc>(),
        8usize,
        concat!("Alignment of ", stringify!(_dfa_arc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_dfa_arc),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to_state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_dfa_arc),
            "::",
            stringify!(to_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_dfa_arc),
            "::",
            stringify!(next)
        )
    );
}
pub type DFA_ARC = _dfa_arc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DFA_STATE {
    pub number: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_uint,
    pub arc: *mut DFA_ARC,
}
#[test]
fn bindgen_test_layout_DFA_STATE() {
    const UNINIT: ::std::mem::MaybeUninit<DFA_STATE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DFA_STATE>(),
        16usize,
        concat!("Size of: ", stringify!(DFA_STATE))
    );
    assert_eq!(
        ::std::mem::align_of::<DFA_STATE>(),
        8usize,
        concat!("Alignment of ", stringify!(DFA_STATE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_STATE),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_STATE),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_STATE),
            "::",
            stringify!(arc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TERM_INFO {
    pub term_num: ::std::os::raw::c_int,
    pub tw: *mut *mut WORD_ID,
    pub wnum: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TERM_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<TERM_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TERM_INFO>(),
        24usize,
        concat!("Size of: ", stringify!(TERM_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<TERM_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(TERM_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).term_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TERM_INFO),
            "::",
            stringify!(term_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tw) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TERM_INFO),
            "::",
            stringify!(tw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TERM_INFO),
            "::",
            stringify!(wnum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DFA_INFO {
    pub st: *mut DFA_STATE,
    pub maxstatenum: ::std::os::raw::c_int,
    pub state_num: ::std::os::raw::c_int,
    pub arc_num: ::std::os::raw::c_int,
    pub term_num: ::std::os::raw::c_int,
    pub cp: *mut *mut ::std::os::raw::c_int,
    pub cplen: *mut ::std::os::raw::c_int,
    pub cpalloclen: *mut ::std::os::raw::c_int,
    pub cp_begin: *mut ::std::os::raw::c_int,
    pub cp_begin_len: ::std::os::raw::c_int,
    pub cp_begin_alloclen: ::std::os::raw::c_int,
    pub cp_end: *mut ::std::os::raw::c_int,
    pub cp_end_len: ::std::os::raw::c_int,
    pub cp_end_alloclen: ::std::os::raw::c_int,
    pub term: TERM_INFO,
    pub is_sp: *mut boolean,
    pub sp_id: WORD_ID,
}
#[test]
fn bindgen_test_layout_DFA_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<DFA_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DFA_INFO>(),
        120usize,
        concat!("Size of: ", stringify!(DFA_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<DFA_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(DFA_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(st)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxstatenum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(maxstatenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state_num) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(state_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arc_num) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(arc_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).term_num) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(term_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(cp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cplen) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(cplen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cpalloclen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(cpalloclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cp_begin) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(cp_begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cp_begin_len) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(cp_begin_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cp_begin_alloclen) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(cp_begin_alloclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cp_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(cp_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cp_end_len) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(cp_end_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cp_end_alloclen) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(cp_end_alloclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).term) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_sp) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(is_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_id) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(DFA_INFO),
            "::",
            stringify!(sp_id)
        )
    );
}
extern "C" {
    pub fn dfa_info_new() -> *mut DFA_INFO;
}
extern "C" {
    pub fn dfa_info_free(dfa: *mut DFA_INFO);
}
extern "C" {
    pub fn dfa_state_init(dinfo: *mut DFA_INFO);
}
extern "C" {
    pub fn dfa_state_expand(dinfo: *mut DFA_INFO, needed: ::std::os::raw::c_int);
}
extern "C" {
    pub fn rddfa(fp: *mut FILE, dinfo: *mut DFA_INFO) -> boolean;
}
extern "C" {
    pub fn rddfa_fp(fp: *mut FILE, dinfo: *mut DFA_INFO) -> boolean;
}
extern "C" {
    pub fn rddfa_line(
        line: *mut ::std::os::raw::c_char,
        dinfo: *mut DFA_INFO,
        state_max: *mut ::std::os::raw::c_int,
        arc_num: *mut ::std::os::raw::c_int,
        terminal_max: *mut ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn dfa_append(
        dst: *mut DFA_INFO,
        src: *mut DFA_INFO,
        soffset: ::std::os::raw::c_int,
        coffset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn init_dfa(dinfo: *mut DFA_INFO, filename: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn dfa_symbol_lookup(
        dinfo: *mut DFA_INFO,
        terminalname: *mut ::std::os::raw::c_char,
    ) -> WORD_ID;
}
extern "C" {
    pub fn extract_cpair(dinfo: *mut DFA_INFO) -> boolean;
}
extern "C" {
    pub fn cpair_append(
        dst: *mut DFA_INFO,
        src: *mut DFA_INFO,
        coffset: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn print_dfa_info(fp: *mut FILE, dinfo: *mut DFA_INFO);
}
extern "C" {
    pub fn print_dfa_cp(fp: *mut FILE, dinfo: *mut DFA_INFO);
}
extern "C" {
    pub fn dfa_cp(
        dfa: *mut DFA_INFO,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn dfa_cp_begin(dfa: *mut DFA_INFO, i: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn dfa_cp_end(dfa: *mut DFA_INFO, i: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn set_dfa_cp(
        dfa: *mut DFA_INFO,
        i: ::std::os::raw::c_int,
        j: ::std::os::raw::c_int,
        value: boolean,
    );
}
extern "C" {
    pub fn set_dfa_cp_begin(dfa: *mut DFA_INFO, i: ::std::os::raw::c_int, value: boolean);
}
extern "C" {
    pub fn set_dfa_cp_end(dfa: *mut DFA_INFO, i: ::std::os::raw::c_int, value: boolean);
}
extern "C" {
    pub fn init_dfa_cp(dfa: *mut DFA_INFO);
}
extern "C" {
    pub fn malloc_dfa_cp(
        dfa: *mut DFA_INFO,
        term_num: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn realloc_dfa_cp(
        dfa: *mut DFA_INFO,
        old_term_num: ::std::os::raw::c_int,
        new_term_num: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn free_dfa_cp(dfa: *mut DFA_INFO);
}
extern "C" {
    pub fn dfa_cp_output_rawdata(fp: *mut FILE, dfa: *mut DFA_INFO);
}
extern "C" {
    pub fn dfa_cp_count_size(
        dfa: *mut DFA_INFO,
        size_ret: *mut ::std::os::raw::c_ulong,
        allocsize_ret: *mut ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn dfa_cp_append(
        dfa: *mut DFA_INFO,
        src: *mut DFA_INFO,
        offset: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn make_dfa_voca_ref(dinfo: *mut DFA_INFO, winfo: *mut WORD_INFO) -> boolean;
}
extern "C" {
    pub fn make_terminfo(tinfo: *mut TERM_INFO, dinfo: *mut DFA_INFO, winfo: *mut WORD_INFO);
}
extern "C" {
    pub fn free_terminfo(tinfo: *mut TERM_INFO);
}
extern "C" {
    pub fn terminfo_append(
        dst: *mut TERM_INFO,
        src: *mut TERM_INFO,
        coffset: ::std::os::raw::c_int,
        woffset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn dfa_find_pause_word(
        dfa: *mut DFA_INFO,
        winfo: *mut WORD_INFO,
        hmminfo: *mut HTK_HMM_INFO,
    );
}
extern "C" {
    pub fn dfa_pause_word_append(
        dst: *mut DFA_INFO,
        src: *mut DFA_INFO,
        coffset: ::std::os::raw::c_int,
    ) -> boolean;
}
pub type PLUGIN_MODULE = *mut ::std::os::raw::c_void;
pub type FUNC_VOID = ::std::option::Option<unsafe extern "C" fn()>;
pub type FUNC_STR = ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char>;
pub type FUNC_INT = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __j_plugin_entry__ {
    pub id: ::std::os::raw::c_int,
    pub source_id: ::std::os::raw::c_int,
    pub func: FUNC_VOID,
    pub next: *mut __j_plugin_entry__,
}
#[test]
fn bindgen_test_layout___j_plugin_entry__() {
    const UNINIT: ::std::mem::MaybeUninit<__j_plugin_entry__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__j_plugin_entry__>(),
        24usize,
        concat!("Size of: ", stringify!(__j_plugin_entry__))
    );
    assert_eq!(
        ::std::mem::align_of::<__j_plugin_entry__>(),
        8usize,
        concat!("Alignment of ", stringify!(__j_plugin_entry__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__j_plugin_entry__),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__j_plugin_entry__),
            "::",
            stringify!(source_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__j_plugin_entry__),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__j_plugin_entry__),
            "::",
            stringify!(next)
        )
    );
}
pub type PLUGIN_ENTRY = __j_plugin_entry__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __multi_gram__ {
    pub name: [::std::os::raw::c_char; 512usize],
    pub id: ::std::os::raw::c_ushort,
    pub dfa: *mut DFA_INFO,
    pub dfa_forward: *mut DFA_INFO,
    pub winfo: *mut WORD_INFO,
    pub hook: ::std::os::raw::c_int,
    pub newbie: boolean,
    pub active: boolean,
    pub state_begin: ::std::os::raw::c_int,
    pub cate_begin: ::std::os::raw::c_int,
    pub word_begin: ::std::os::raw::c_int,
    pub state_begin_forward: ::std::os::raw::c_int,
    pub next: *mut __multi_gram__,
}
#[test]
fn bindgen_test_layout___multi_gram__() {
    const UNINIT: ::std::mem::MaybeUninit<__multi_gram__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__multi_gram__>(),
        576usize,
        concat!("Size of: ", stringify!(__multi_gram__))
    );
    assert_eq!(
        ::std::mem::align_of::<__multi_gram__>(),
        8usize,
        concat!("Alignment of ", stringify!(__multi_gram__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__multi_gram__),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(__multi_gram__),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfa) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__multi_gram__),
            "::",
            stringify!(dfa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfa_forward) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(__multi_gram__),
            "::",
            stringify!(dfa_forward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).winfo) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(__multi_gram__),
            "::",
            stringify!(winfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hook) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(__multi_gram__),
            "::",
            stringify!(hook)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newbie) as usize - ptr as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(__multi_gram__),
            "::",
            stringify!(newbie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize },
        549usize,
        concat!(
            "Offset of field: ",
            stringify!(__multi_gram__),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state_begin) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(__multi_gram__),
            "::",
            stringify!(state_begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cate_begin) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(__multi_gram__),
            "::",
            stringify!(cate_begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).word_begin) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(__multi_gram__),
            "::",
            stringify!(word_begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state_begin_forward) as usize - ptr as usize },
        564usize,
        concat!(
            "Offset of field: ",
            stringify!(__multi_gram__),
            "::",
            stringify!(state_begin_forward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(__multi_gram__),
            "::",
            stringify!(next)
        )
    );
}
pub type MULTIGRAM = __multi_gram__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gram_list__ {
    pub dfafile: *mut ::std::os::raw::c_char,
    pub dictfile: *mut ::std::os::raw::c_char,
    pub next: *mut __gram_list__,
}
#[test]
fn bindgen_test_layout___gram_list__() {
    const UNINIT: ::std::mem::MaybeUninit<__gram_list__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__gram_list__>(),
        24usize,
        concat!("Size of: ", stringify!(__gram_list__))
    );
    assert_eq!(
        ::std::mem::align_of::<__gram_list__>(),
        8usize,
        concat!("Alignment of ", stringify!(__gram_list__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfafile) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gram_list__),
            "::",
            stringify!(dfafile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictfile) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__gram_list__),
            "::",
            stringify!(dictfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__gram_list__),
            "::",
            stringify!(next)
        )
    );
}
pub type GRAMLIST = __gram_list__;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RC_INFO {
    pub hmm: *mut HMM_Logical,
    pub state_loc: ::std::os::raw::c_short,
    pub last_is_lset: boolean,
    pub cache: RC_INFO__bindgen_ty_1,
    pub lastwid_cache: WORD_ID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RC_INFO__bindgen_ty_1 {
    pub state: *mut HTK_HMM_State,
    pub lset: *mut CD_State_Set,
}
#[test]
fn bindgen_test_layout_RC_INFO__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<RC_INFO__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RC_INFO__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(RC_INFO__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RC_INFO__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RC_INFO__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RC_INFO__bindgen_ty_1),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RC_INFO__bindgen_ty_1),
            "::",
            stringify!(lset)
        )
    );
}
#[test]
fn bindgen_test_layout_RC_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<RC_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RC_INFO>(),
        32usize,
        concat!("Size of: ", stringify!(RC_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<RC_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(RC_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(RC_INFO),
            "::",
            stringify!(hmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state_loc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(RC_INFO),
            "::",
            stringify!(state_loc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_is_lset) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(RC_INFO),
            "::",
            stringify!(last_is_lset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(RC_INFO),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastwid_cache) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(RC_INFO),
            "::",
            stringify!(lastwid_cache)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LRC_INFO {
    pub hmm: *mut HMM_Logical,
    pub state_loc: ::std::os::raw::c_short,
    pub last_is_lset: boolean,
    pub category: WORD_ID,
    pub cache: LRC_INFO__bindgen_ty_1,
    pub lastwid_cache: WORD_ID,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LRC_INFO__bindgen_ty_1 {
    pub state: *mut HTK_HMM_State,
    pub lset: *mut CD_State_Set,
}
#[test]
fn bindgen_test_layout_LRC_INFO__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<LRC_INFO__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LRC_INFO__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(LRC_INFO__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<LRC_INFO__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(LRC_INFO__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LRC_INFO__bindgen_ty_1),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LRC_INFO__bindgen_ty_1),
            "::",
            stringify!(lset)
        )
    );
}
#[test]
fn bindgen_test_layout_LRC_INFO() {
    const UNINIT: ::std::mem::MaybeUninit<LRC_INFO> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LRC_INFO>(),
        32usize,
        concat!("Size of: ", stringify!(LRC_INFO))
    );
    assert_eq!(
        ::std::mem::align_of::<LRC_INFO>(),
        8usize,
        concat!("Alignment of ", stringify!(LRC_INFO))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmm) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LRC_INFO),
            "::",
            stringify!(hmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state_loc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LRC_INFO),
            "::",
            stringify!(state_loc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_is_lset) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(LRC_INFO),
            "::",
            stringify!(last_is_lset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).category) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(LRC_INFO),
            "::",
            stringify!(category)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LRC_INFO),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastwid_cache) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LRC_INFO),
            "::",
            stringify!(lastwid_cache)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ACOUSTIC_SPEC {
    pub state: *mut HTK_HMM_State,
    pub lset: *mut CD_State_Set,
    pub rset: *mut RC_INFO,
    pub lrset: *mut LRC_INFO,
}
#[test]
fn bindgen_test_layout_ACOUSTIC_SPEC() {
    const UNINIT: ::std::mem::MaybeUninit<ACOUSTIC_SPEC> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ACOUSTIC_SPEC>(),
        8usize,
        concat!("Size of: ", stringify!(ACOUSTIC_SPEC))
    );
    assert_eq!(
        ::std::mem::align_of::<ACOUSTIC_SPEC>(),
        8usize,
        concat!("Alignment of ", stringify!(ACOUSTIC_SPEC))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ACOUSTIC_SPEC),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ACOUSTIC_SPEC),
            "::",
            stringify!(lset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ACOUSTIC_SPEC),
            "::",
            stringify!(rset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lrset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ACOUSTIC_SPEC),
            "::",
            stringify!(lrset)
        )
    );
}
pub const AS_Style_AS_STATE: AS_Style = 0;
pub const AS_Style_AS_LSET: AS_Style = 1;
pub const AS_Style_AS_RSET: AS_Style = 2;
pub const AS_Style_AS_LRSET: AS_Style = 3;
pub type AS_Style = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LM_PROB_CACHE {
    pub probcache: *mut LOGPROB,
    pub lastwcache: *mut WORD_ID,
    pub iw_sc_cache: *mut *mut LOGPROB,
    pub iw_cache_num: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_LM_PROB_CACHE() {
    const UNINIT: ::std::mem::MaybeUninit<LM_PROB_CACHE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LM_PROB_CACHE>(),
        32usize,
        concat!("Size of: ", stringify!(LM_PROB_CACHE))
    );
    assert_eq!(
        ::std::mem::align_of::<LM_PROB_CACHE>(),
        8usize,
        concat!("Alignment of ", stringify!(LM_PROB_CACHE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).probcache) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LM_PROB_CACHE),
            "::",
            stringify!(probcache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastwcache) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LM_PROB_CACHE),
            "::",
            stringify!(lastwcache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iw_sc_cache) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LM_PROB_CACHE),
            "::",
            stringify!(iw_sc_cache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iw_cache_num) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(LM_PROB_CACHE),
            "::",
            stringify!(iw_cache_num)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __A_CELL2__ {
    pub n: ::std::os::raw::c_ushort,
    pub arc: [::std::os::raw::c_int; 4usize],
    pub a: [LOGPROB; 4usize],
    pub next: *mut __A_CELL2__,
}
#[test]
fn bindgen_test_layout___A_CELL2__() {
    const UNINIT: ::std::mem::MaybeUninit<__A_CELL2__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__A_CELL2__>(),
        48usize,
        concat!("Size of: ", stringify!(__A_CELL2__))
    );
    assert_eq!(
        ::std::mem::align_of::<__A_CELL2__>(),
        8usize,
        concat!("Alignment of ", stringify!(__A_CELL2__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__A_CELL2__),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__A_CELL2__),
            "::",
            stringify!(arc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__A_CELL2__),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__A_CELL2__),
            "::",
            stringify!(next)
        )
    );
}
pub type A_CELL2 = __A_CELL2__;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wchmm_state {
    pub out: ACOUSTIC_SPEC,
    pub scid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_wchmm_state() {
    const UNINIT: ::std::mem::MaybeUninit<wchmm_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wchmm_state>(),
        16usize,
        concat!("Size of: ", stringify!(wchmm_state))
    );
    assert_eq!(
        ::std::mem::align_of::<wchmm_state>(),
        8usize,
        concat!("Alignment of ", stringify!(wchmm_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_state),
            "::",
            stringify!(out)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_state),
            "::",
            stringify!(scid)
        )
    );
}
pub type WCHMM_STATE = wchmm_state;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WCHMM_WORK {
    pub out_from: *mut ::std::os::raw::c_int,
    pub out_from_next: *mut ::std::os::raw::c_int,
    pub out_a: *mut LOGPROB,
    pub out_a_next: *mut LOGPROB,
    pub out_from_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WCHMM_WORK() {
    const UNINIT: ::std::mem::MaybeUninit<WCHMM_WORK> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WCHMM_WORK>(),
        40usize,
        concat!("Size of: ", stringify!(WCHMM_WORK))
    );
    assert_eq!(
        ::std::mem::align_of::<WCHMM_WORK>(),
        8usize,
        concat!("Alignment of ", stringify!(WCHMM_WORK))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_from) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WCHMM_WORK),
            "::",
            stringify!(out_from)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_from_next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WCHMM_WORK),
            "::",
            stringify!(out_from_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WCHMM_WORK),
            "::",
            stringify!(out_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_a_next) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WCHMM_WORK),
            "::",
            stringify!(out_a_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_from_len) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WCHMM_WORK),
            "::",
            stringify!(out_from_len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wchmm_info {
    pub lmtype: ::std::os::raw::c_int,
    pub lmvar: ::std::os::raw::c_int,
    pub category_tree: boolean,
    pub hmminfo: *mut HTK_HMM_INFO,
    pub ngram: *mut NGRAM_INFO,
    pub dfa: *mut DFA_INFO,
    pub dfa_forward: *mut DFA_INFO,
    pub winfo: *mut WORD_INFO,
    pub ccd_flag: boolean,
    pub maxwcn: ::std::os::raw::c_int,
    pub n: ::std::os::raw::c_int,
    pub state: *mut WCHMM_STATE,
    pub self_a: *mut LOGPROB,
    pub next_a: *mut LOGPROB,
    pub ac: *mut *mut A_CELL2,
    pub stend: *mut WORD_ID,
    pub offset: *mut *mut ::std::os::raw::c_int,
    pub wordend: *mut ::std::os::raw::c_int,
    pub startnum: ::std::os::raw::c_int,
    pub startnode: *mut ::std::os::raw::c_int,
    pub wordbegin: *mut ::std::os::raw::c_int,
    pub maxstartnum: ::std::os::raw::c_int,
    pub start2wid: *mut WORD_ID,
    pub start2isolate: *mut ::std::os::raw::c_int,
    pub isolatenum: ::std::os::raw::c_int,
    pub wordend_a: *mut LOGPROB,
    pub outstyle: *mut ::std::os::raw::c_uchar,
    pub scword: *mut WORD_ID,
    pub fscore: *mut LOGPROB,
    pub fsnum: ::std::os::raw::c_int,
    pub sclist: *mut *mut WORD_ID,
    pub sclen: *mut WORD_ID,
    pub scnum: ::std::os::raw::c_int,
    pub malloc_root: *mut BMALLOC_BASE,
    pub lcdset_category_root: *mut APATNODE,
    pub lcdset_mroot: *mut BMALLOC_BASE,
    pub hmmwrk: *mut HMMWork,
    pub lmcache: LM_PROB_CACHE,
    pub wrk: WCHMM_WORK,
    pub separated_word_count: ::std::os::raw::c_int,
    pub lccbuf: [::std::os::raw::c_char; 263usize],
    pub lccbuf2: [::std::os::raw::c_char; 263usize],
    pub uni_prob_user: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut WORD_INFO, arg2: WORD_ID, arg3: LOGPROB) -> LOGPROB,
    >,
    pub bi_prob_user: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut WORD_INFO,
            arg2: WORD_ID,
            arg3: WORD_ID,
            arg4: LOGPROB,
        ) -> LOGPROB,
    >,
}
#[test]
fn bindgen_test_layout_wchmm_info() {
    const UNINIT: ::std::mem::MaybeUninit<wchmm_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wchmm_info>(),
        904usize,
        concat!("Size of: ", stringify!(wchmm_info))
    );
    assert_eq!(
        ::std::mem::align_of::<wchmm_info>(),
        8usize,
        concat!("Alignment of ", stringify!(wchmm_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmtype) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(lmtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmvar) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(lmvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).category_tree) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(category_tree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmminfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(hmminfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ngram) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(ngram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfa) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(dfa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfa_forward) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(dfa_forward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).winfo) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(winfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ccd_flag) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(ccd_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxwcn) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(maxwcn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).self_a) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(self_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_a) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(next_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ac) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(ac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stend) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(stend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordend) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(wordend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startnum) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(startnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).startnode) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(startnode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordbegin) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(wordbegin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxstartnum) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(maxstartnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start2wid) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(start2wid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start2isolate) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(start2isolate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isolatenum) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(isolatenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordend_a) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(wordend_a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outstyle) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(outstyle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scword) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(scword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fscore) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(fscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsnum) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(fsnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sclist) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(sclist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sclen) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(sclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scnum) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(scnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).malloc_root) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(malloc_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lcdset_category_root) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(lcdset_category_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lcdset_mroot) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(lcdset_mroot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmmwrk) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(hmmwrk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmcache) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(lmcache)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrk) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(wrk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separated_word_count) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(separated_word_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lccbuf) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(lccbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lccbuf2) as usize - ptr as usize },
        619usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(lccbuf2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uni_prob_user) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(uni_prob_user)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bi_prob_user) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(wchmm_info),
            "::",
            stringify!(bi_prob_user)
        )
    );
}
pub type WCHMM_INFO = wchmm_info;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __trellis_atom__ {
    pub backscore: LOGPROB,
    pub lscore: LOGPROB,
    pub wid: WORD_ID,
    pub begintime: ::std::os::raw::c_short,
    pub endtime: ::std::os::raw::c_short,
    pub dfa_state: ::std::os::raw::c_int,
    pub last_tre: *mut __trellis_atom__,
    pub next: *mut __trellis_atom__,
}
#[test]
fn bindgen_test_layout___trellis_atom__() {
    const UNINIT: ::std::mem::MaybeUninit<__trellis_atom__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__trellis_atom__>(),
        40usize,
        concat!("Size of: ", stringify!(__trellis_atom__))
    );
    assert_eq!(
        ::std::mem::align_of::<__trellis_atom__>(),
        8usize,
        concat!("Alignment of ", stringify!(__trellis_atom__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backscore) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__trellis_atom__),
            "::",
            stringify!(backscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lscore) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__trellis_atom__),
            "::",
            stringify!(lscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__trellis_atom__),
            "::",
            stringify!(wid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begintime) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__trellis_atom__),
            "::",
            stringify!(begintime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endtime) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__trellis_atom__),
            "::",
            stringify!(endtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfa_state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__trellis_atom__),
            "::",
            stringify!(dfa_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_tre) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__trellis_atom__),
            "::",
            stringify!(last_tre)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__trellis_atom__),
            "::",
            stringify!(next)
        )
    );
}
pub type TRELLIS_ATOM = __trellis_atom__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __backtrellis__ {
    pub framelen: ::std::os::raw::c_int,
    pub num: *mut ::std::os::raw::c_int,
    pub rw: *mut *mut *mut TRELLIS_ATOM,
    pub list: *mut TRELLIS_ATOM,
    pub root: *mut BMALLOC_BASE,
}
#[test]
fn bindgen_test_layout___backtrellis__() {
    const UNINIT: ::std::mem::MaybeUninit<__backtrellis__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__backtrellis__>(),
        40usize,
        concat!("Size of: ", stringify!(__backtrellis__))
    );
    assert_eq!(
        ::std::mem::align_of::<__backtrellis__>(),
        8usize,
        concat!("Alignment of ", stringify!(__backtrellis__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framelen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__backtrellis__),
            "::",
            stringify!(framelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__backtrellis__),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rw) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__backtrellis__),
            "::",
            stringify!(rw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__backtrellis__),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__backtrellis__),
            "::",
            stringify!(root)
        )
    );
}
pub type BACKTRELLIS = __backtrellis__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __word_graph__ {
    pub wid: WORD_ID,
    pub lefttime: ::std::os::raw::c_int,
    pub righttime: ::std::os::raw::c_int,
    pub fscore_head: LOGPROB,
    pub fscore_tail: LOGPROB,
    pub gscore_head: LOGPROB,
    pub gscore_tail: LOGPROB,
    pub lscore_tmp: LOGPROB,
    pub forward_score: LOGPROB,
    pub backward_score: LOGPROB,
    pub cmscore: LOGPROB,
    pub amavg: LOGPROB,
    pub headphone: *mut HMM_Logical,
    pub tailphone: *mut HMM_Logical,
    pub leftword: *mut *mut __word_graph__,
    pub left_lscore: *mut LOGPROB,
    pub leftwordnum: ::std::os::raw::c_int,
    pub leftwordmaxnum: ::std::os::raw::c_int,
    pub rightword: *mut *mut __word_graph__,
    pub right_lscore: *mut LOGPROB,
    pub rightwordnum: ::std::os::raw::c_int,
    pub rightwordmaxnum: ::std::os::raw::c_int,
    pub next: *mut __word_graph__,
    pub mark: boolean,
    pub id: ::std::os::raw::c_int,
    pub saved: boolean,
    pub purged: boolean,
    pub graph_cm: LOGPROB,
}
#[test]
fn bindgen_test_layout___word_graph__() {
    const UNINIT: ::std::mem::MaybeUninit<__word_graph__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__word_graph__>(),
        136usize,
        concat!("Size of: ", stringify!(__word_graph__))
    );
    assert_eq!(
        ::std::mem::align_of::<__word_graph__>(),
        8usize,
        concat!("Alignment of ", stringify!(__word_graph__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(wid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lefttime) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(lefttime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).righttime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(righttime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fscore_head) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(fscore_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fscore_tail) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(fscore_tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gscore_head) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(gscore_head)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gscore_tail) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(gscore_tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lscore_tmp) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(lscore_tmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forward_score) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(forward_score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backward_score) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(backward_score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmscore) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(cmscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amavg) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(amavg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).headphone) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(headphone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tailphone) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(tailphone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leftword) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(leftword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left_lscore) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(left_lscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leftwordnum) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(leftwordnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leftwordmaxnum) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(leftwordmaxnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rightword) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(rightword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right_lscore) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(right_lscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rightwordnum) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(rightwordnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rightwordmaxnum) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(rightwordmaxnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mark) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).saved) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(saved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).purged) as usize - ptr as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(purged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_cm) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(__word_graph__),
            "::",
            stringify!(graph_cm)
        )
    );
}
pub type WordGraph = __word_graph__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __confnet_cluster__ {
    pub wg: *mut *mut WordGraph,
    pub wgnum: ::std::os::raw::c_int,
    pub wgnum_alloc: ::std::os::raw::c_int,
    pub words: *mut WORD_ID,
    pub pp: *mut LOGPROB,
    pub wordsnum: ::std::os::raw::c_int,
    pub next: *mut __confnet_cluster__,
}
#[test]
fn bindgen_test_layout___confnet_cluster__() {
    const UNINIT: ::std::mem::MaybeUninit<__confnet_cluster__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__confnet_cluster__>(),
        48usize,
        concat!("Size of: ", stringify!(__confnet_cluster__))
    );
    assert_eq!(
        ::std::mem::align_of::<__confnet_cluster__>(),
        8usize,
        concat!("Alignment of ", stringify!(__confnet_cluster__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__confnet_cluster__),
            "::",
            stringify!(wg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wgnum) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__confnet_cluster__),
            "::",
            stringify!(wgnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wgnum_alloc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__confnet_cluster__),
            "::",
            stringify!(wgnum_alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).words) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__confnet_cluster__),
            "::",
            stringify!(words)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__confnet_cluster__),
            "::",
            stringify!(pp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordsnum) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__confnet_cluster__),
            "::",
            stringify!(wordsnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__confnet_cluster__),
            "::",
            stringify!(next)
        )
    );
}
pub type CN_CLUSTER = __confnet_cluster__;
pub type TOKENID = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TOKEN2 {
    pub last_tre: *mut TRELLIS_ATOM,
    pub last_cword: WORD_ID,
    pub last_lscore: LOGPROB,
    pub score: LOGPROB,
    pub node: ::std::os::raw::c_int,
    pub to_state: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TOKEN2() {
    const UNINIT: ::std::mem::MaybeUninit<TOKEN2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<TOKEN2>(),
        32usize,
        concat!("Size of: ", stringify!(TOKEN2))
    );
    assert_eq!(
        ::std::mem::align_of::<TOKEN2>(),
        8usize,
        concat!("Alignment of ", stringify!(TOKEN2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_tre) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(TOKEN2),
            "::",
            stringify!(last_tre)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_cword) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TOKEN2),
            "::",
            stringify!(last_cword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_lscore) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(TOKEN2),
            "::",
            stringify!(last_lscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(TOKEN2),
            "::",
            stringify!(score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(TOKEN2),
            "::",
            stringify!(node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to_state) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(TOKEN2),
            "::",
            stringify!(to_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __nextword__ {
    pub id: WORD_ID,
    pub lscore: LOGPROB,
    pub next_state: ::std::os::raw::c_int,
    pub can_insert_sp: boolean,
    pub tre: *mut TRELLIS_ATOM,
}
#[test]
fn bindgen_test_layout___nextword__() {
    const UNINIT: ::std::mem::MaybeUninit<__nextword__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__nextword__>(),
        24usize,
        concat!("Size of: ", stringify!(__nextword__))
    );
    assert_eq!(
        ::std::mem::align_of::<__nextword__>(),
        8usize,
        concat!("Alignment of ", stringify!(__nextword__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__nextword__),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lscore) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__nextword__),
            "::",
            stringify!(lscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__nextword__),
            "::",
            stringify!(next_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).can_insert_sp) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__nextword__),
            "::",
            stringify!(can_insert_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tre) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__nextword__),
            "::",
            stringify!(tre)
        )
    );
}
pub type NEXTWORD = __nextword__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __node__ {
    pub next: *mut __node__,
    pub prev: *mut __node__,
    pub endflag: boolean,
    pub seq: [WORD_ID; 150usize],
    pub seqnum: ::std::os::raw::c_short,
    pub score: LOGPROB,
    pub bestt: ::std::os::raw::c_short,
    pub estimated_next_t: ::std::os::raw::c_short,
    pub g: *mut LOGPROB,
    pub final_g: LOGPROB,
    pub state: ::std::os::raw::c_int,
    pub tre: *mut TRELLIS_ATOM,
    pub g_prev: *mut LOGPROB,
    pub last_ph: *mut HMM_Logical,
    pub last_ph_sp_attached: boolean,
    pub lscore: LOGPROB,
    pub totallscore: LOGPROB,
    pub cmscore: [LOGPROB; 150usize],
    pub wordend_frame: *mut ::std::os::raw::c_short,
    pub wordend_gscore: *mut LOGPROB,
    pub prevgraph: *mut WordGraph,
    pub lastcontext: *mut WordGraph,
    pub region: *mut __recogprocess__,
    pub score_mbr: f32,
}
#[test]
fn bindgen_test_layout___node__() {
    const UNINIT: ::std::mem::MaybeUninit<__node__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__node__>(),
        1336usize,
        concat!("Size of: ", stringify!(__node__))
    );
    assert_eq!(
        ::std::mem::align_of::<__node__>(),
        8usize,
        concat!("Alignment of ", stringify!(__node__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).endflag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(endflag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seqnum) as usize - ptr as usize },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(seqnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bestt) as usize - ptr as usize },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(bestt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).estimated_next_t) as usize - ptr as usize },
        630usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(estimated_next_t)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).final_g) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(final_g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        644usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tre) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(tre)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g_prev) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(g_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_ph) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(last_ph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_ph_sp_attached) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(last_ph_sp_attached)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lscore) as usize - ptr as usize },
        676usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(lscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totallscore) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(totallscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmscore) as usize - ptr as usize },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(cmscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordend_frame) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(wordend_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordend_gscore) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(wordend_gscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prevgraph) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(prevgraph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lastcontext) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(lastcontext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).region) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(region)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score_mbr) as usize - ptr as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(__node__),
            "::",
            stringify!(score_mbr)
        )
    );
}
pub type NODE = __node__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DP {
    pub d: ::std::os::raw::c_int,
    pub r: ::std::os::raw::c_int,
    pub c: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_DP() {
    const UNINIT: ::std::mem::MaybeUninit<DP> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DP>(),
        12usize,
        concat!("Size of: ", stringify!(DP))
    );
    assert_eq!(
        ::std::mem::align_of::<DP>(),
        4usize,
        concat!("Alignment of ", stringify!(DP))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(DP), "::", stringify!(d))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(DP), "::", stringify!(r))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(DP), "::", stringify!(c))
    );
}
pub const SP_RESULT_TTY: _bindgen_ty_29 = 0;
pub const SP_RESULT_MSOCK: _bindgen_ty_29 = 1;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
pub const SM_TERMINATE: _bindgen_ty_30 = 0;
pub const SM_PAUSE: _bindgen_ty_30 = 1;
pub const SM_WAIT: _bindgen_ty_30 = 2;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
pub const PER_WORD: _bindgen_ty_31 = 0;
pub const PER_PHONEME: _bindgen_ty_31 = 1;
pub const PER_STATE: _bindgen_ty_31 = 2;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
pub const CALLBACK_POLL: _bindgen_ty_32 = 0;
pub const CALLBACK_EVENT_PROCESS_ONLINE: _bindgen_ty_32 = 1;
pub const CALLBACK_EVENT_PROCESS_OFFLINE: _bindgen_ty_32 = 2;
pub const CALLBACK_EVENT_STREAM_BEGIN: _bindgen_ty_32 = 3;
pub const CALLBACK_EVENT_STREAM_END: _bindgen_ty_32 = 4;
pub const CALLBACK_EVENT_SPEECH_READY: _bindgen_ty_32 = 5;
pub const CALLBACK_EVENT_SPEECH_START: _bindgen_ty_32 = 6;
pub const CALLBACK_EVENT_SPEECH_STOP: _bindgen_ty_32 = 7;
pub const CALLBACK_EVENT_RECOGNITION_BEGIN: _bindgen_ty_32 = 8;
pub const CALLBACK_EVENT_RECOGNITION_END: _bindgen_ty_32 = 9;
pub const CALLBACK_EVENT_SEGMENT_BEGIN: _bindgen_ty_32 = 10;
pub const CALLBACK_EVENT_SEGMENT_END: _bindgen_ty_32 = 11;
pub const CALLBACK_EVENT_PASS1_BEGIN: _bindgen_ty_32 = 12;
pub const CALLBACK_EVENT_PASS1_FRAME: _bindgen_ty_32 = 13;
pub const CALLBACK_EVENT_PASS1_END: _bindgen_ty_32 = 14;
pub const CALLBACK_RESULT_PASS1_INTERIM: _bindgen_ty_32 = 15;
pub const CALLBACK_RESULT_PASS1: _bindgen_ty_32 = 16;
pub const CALLBACK_RESULT_PASS1_GRAPH: _bindgen_ty_32 = 17;
pub const CALLBACK_STATUS_PARAM: _bindgen_ty_32 = 18;
pub const CALLBACK_EVENT_PASS2_BEGIN: _bindgen_ty_32 = 19;
pub const CALLBACK_EVENT_PASS2_END: _bindgen_ty_32 = 20;
pub const CALLBACK_RESULT: _bindgen_ty_32 = 21;
pub const CALLBACK_RESULT_GMM: _bindgen_ty_32 = 22;
pub const CALLBACK_RESULT_GRAPH: _bindgen_ty_32 = 23;
pub const CALLBACK_RESULT_CONFNET: _bindgen_ty_32 = 24;
pub const CALLBACK_ADIN_CAPTURED: _bindgen_ty_32 = 25;
pub const CALLBACK_ADIN_TRIGGERED: _bindgen_ty_32 = 26;
pub const CALLBACK_EVENT_PAUSE: _bindgen_ty_32 = 27;
pub const CALLBACK_EVENT_RESUME: _bindgen_ty_32 = 28;
pub const CALLBACK_PAUSE_FUNCTION: _bindgen_ty_32 = 29;
pub const CALLBACK_DEBUG_PASS2_POP: _bindgen_ty_32 = 30;
pub const CALLBACK_DEBUG_PASS2_PUSH: _bindgen_ty_32 = 31;
pub const CALLBACK_RESULT_PASS1_DETERMINED: _bindgen_ty_32 = 32;
pub const SIZEOF_CALLBACK_ID: _bindgen_ty_32 = 33;
pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_am__ {
    pub id: ::std::os::raw::c_short,
    pub name: [::std::os::raw::c_char; 64usize],
    pub hmmfilename: *mut ::std::os::raw::c_char,
    pub mapfilename: *mut ::std::os::raw::c_char,
    pub gprune_method: ::std::os::raw::c_int,
    pub mixnum_thres: ::std::os::raw::c_int,
    pub spmodel_name: *mut ::std::os::raw::c_char,
    pub hmm_gs_filename: *mut ::std::os::raw::c_char,
    pub gs_statenum: ::std::os::raw::c_int,
    pub iwcdmethod: ::std::os::raw::c_short,
    pub iwcdmaxn: ::std::os::raw::c_short,
    pub iwsp_penalty: LOGPROB,
    pub force_multipath: boolean,
    pub analysis: __jconf_am____bindgen_ty_1,
    pub frontend: __jconf_am____bindgen_ty_2,
    pub gprune_plugin_source: ::std::os::raw::c_int,
    pub dnn: __jconf_am____bindgen_ty_3,
    pub next: *mut __jconf_am__,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_am____bindgen_ty_1 {
    pub para: Value,
    pub para_default: Value,
    pub para_hmm: Value,
    pub para_htk: Value,
    pub cmnload_filename: *mut ::std::os::raw::c_char,
    pub map_cmn: boolean,
    pub cmn_update: boolean,
    pub cmnsave_filename: *mut ::std::os::raw::c_char,
    pub cmn_map_weight: f32,
    pub cmn_static_cvn_only: boolean,
}
#[test]
fn bindgen_test_layout___jconf_am____bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_am____bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_am____bindgen_ty_1>(),
        560usize,
        concat!("Size of: ", stringify!(__jconf_am____bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_am____bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__jconf_am____bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).para) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_1),
            "::",
            stringify!(para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).para_default) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_1),
            "::",
            stringify!(para_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).para_hmm) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_1),
            "::",
            stringify!(para_hmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).para_htk) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_1),
            "::",
            stringify!(para_htk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmnload_filename) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_1),
            "::",
            stringify!(cmnload_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_cmn) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_1),
            "::",
            stringify!(map_cmn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmn_update) as usize - ptr as usize },
        537usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_1),
            "::",
            stringify!(cmn_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmnsave_filename) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_1),
            "::",
            stringify!(cmnsave_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmn_map_weight) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_1),
            "::",
            stringify!(cmn_map_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmn_static_cvn_only) as usize - ptr as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_1),
            "::",
            stringify!(cmn_static_cvn_only)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_am____bindgen_ty_2 {
    pub ss_alpha: f32,
    pub ss_floor: f32,
    pub sscalc: boolean,
    pub sscalc_len: ::std::os::raw::c_int,
    pub ssload_filename: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout___jconf_am____bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_am____bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_am____bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(__jconf_am____bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_am____bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__jconf_am____bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_alpha) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_2),
            "::",
            stringify!(ss_alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_floor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_2),
            "::",
            stringify!(ss_floor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sscalc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_2),
            "::",
            stringify!(sscalc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sscalc_len) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_2),
            "::",
            stringify!(sscalc_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssload_filename) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_2),
            "::",
            stringify!(ssload_filename)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_am____bindgen_ty_3 {
    pub enabled: boolean,
    pub paramtype: ::std::os::raw::c_short,
    pub optionstring: *mut ::std::os::raw::c_char,
    pub veclen: ::std::os::raw::c_int,
    pub contextlen: ::std::os::raw::c_int,
    pub inputnodes: ::std::os::raw::c_int,
    pub outputnodes: ::std::os::raw::c_int,
    pub hiddennodes: ::std::os::raw::c_int,
    pub hiddenlayernum: ::std::os::raw::c_int,
    pub wfile: *mut *mut ::std::os::raw::c_char,
    pub bfile: *mut *mut ::std::os::raw::c_char,
    pub output_wfile: *mut ::std::os::raw::c_char,
    pub output_bfile: *mut ::std::os::raw::c_char,
    pub priorfile: *mut ::std::os::raw::c_char,
    pub prior_factor: f32,
    pub prior_factor_log10nize: boolean,
    pub batchsize: ::std::os::raw::c_int,
    pub num_threads: ::std::os::raw::c_int,
    pub cuda_mode: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout___jconf_am____bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_am____bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_am____bindgen_ty_3>(),
        104usize,
        concat!("Size of: ", stringify!(__jconf_am____bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_am____bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(__jconf_am____bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramtype) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(paramtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optionstring) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(optionstring)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).veclen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(veclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contextlen) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(contextlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputnodes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(inputnodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputnodes) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(outputnodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hiddennodes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(hiddennodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hiddenlayernum) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(hiddenlayernum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wfile) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(wfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bfile) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(bfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_wfile) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(output_wfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_bfile) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(output_bfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priorfile) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(priorfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prior_factor) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(prior_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).prior_factor_log10nize) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(prior_factor_log10nize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).batchsize) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(batchsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_threads) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(num_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cuda_mode) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am____bindgen_ty_3),
            "::",
            stringify!(cuda_mode)
        )
    );
}
#[test]
fn bindgen_test_layout___jconf_am__() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_am__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_am__>(),
        832usize,
        concat!("Size of: ", stringify!(__jconf_am__))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_am__>(),
        8usize,
        concat!("Alignment of ", stringify!(__jconf_am__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmmfilename) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(hmmfilename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mapfilename) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(mapfilename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gprune_method) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(gprune_method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mixnum_thres) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(mixnum_thres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spmodel_name) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(spmodel_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmm_gs_filename) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(hmm_gs_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gs_statenum) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(gs_statenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iwcdmethod) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(iwcdmethod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iwcdmaxn) as usize - ptr as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(iwcdmaxn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iwsp_penalty) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(iwsp_penalty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_multipath) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(force_multipath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).analysis) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(analysis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frontend) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(frontend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gprune_plugin_source) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(gprune_plugin_source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dnn) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(dnn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_am__),
            "::",
            stringify!(next)
        )
    );
}
pub type JCONF_AM = __jconf_am__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_lm_namelist__ {
    pub name: *mut ::std::os::raw::c_char,
    pub next: *mut __jconf_lm_namelist__,
}
#[test]
fn bindgen_test_layout___jconf_lm_namelist__() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_lm_namelist__> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_lm_namelist__>(),
        16usize,
        concat!("Size of: ", stringify!(__jconf_lm_namelist__))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_lm_namelist__>(),
        8usize,
        concat!("Alignment of ", stringify!(__jconf_lm_namelist__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm_namelist__),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm_namelist__),
            "::",
            stringify!(next)
        )
    );
}
pub type JCONF_LM_NAMELIST = __jconf_lm_namelist__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_lm__ {
    pub id: ::std::os::raw::c_short,
    pub name: [::std::os::raw::c_char; 64usize],
    pub lmtype: ::std::os::raw::c_int,
    pub lmvar: ::std::os::raw::c_int,
    pub dictfilename: *mut ::std::os::raw::c_char,
    pub head_silname: *mut ::std::os::raw::c_char,
    pub tail_silname: *mut ::std::os::raw::c_char,
    pub forcedict_flag: boolean,
    pub ngram_filename: *mut ::std::os::raw::c_char,
    pub ngram_filename_lr_arpa: *mut ::std::os::raw::c_char,
    pub ngram_filename_rl_arpa: *mut ::std::os::raw::c_char,
    pub dfa_filename: *mut ::std::os::raw::c_char,
    pub gramlist_root: *mut GRAMLIST,
    pub wordlist_root: *mut GRAMLIST,
    pub enable_iwsp: boolean,
    pub enable_iwspword: boolean,
    pub iwspentry: *mut ::std::os::raw::c_char,
    pub separate_wnum: ::std::os::raw::c_int,
    pub wordrecog_head_silence_model_name: [::std::os::raw::c_char; 256usize],
    pub wordrecog_tail_silence_model_name: [::std::os::raw::c_char; 256usize],
    pub wordrecog_silence_context_name: [::std::os::raw::c_char; 256usize],
    pub unknown_name: [::std::os::raw::c_char; 30usize],
    pub additional_dict_files: *mut JCONF_LM_NAMELIST,
    pub additional_dict_entries: *mut JCONF_LM_NAMELIST,
    pub next: *mut __jconf_lm__,
}
#[test]
fn bindgen_test_layout___jconf_lm__() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_lm__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_lm__>(),
        1008usize,
        concat!("Size of: ", stringify!(__jconf_lm__))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_lm__>(),
        8usize,
        concat!("Alignment of ", stringify!(__jconf_lm__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmtype) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(lmtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmvar) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(lmvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dictfilename) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(dictfilename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head_silname) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(head_silname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail_silname) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(tail_silname)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forcedict_flag) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(forcedict_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ngram_filename) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(ngram_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ngram_filename_lr_arpa) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(ngram_filename_lr_arpa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ngram_filename_rl_arpa) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(ngram_filename_rl_arpa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfa_filename) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(dfa_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gramlist_root) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(gramlist_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordlist_root) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(wordlist_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_iwsp) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(enable_iwsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_iwspword) as usize - ptr as usize },
        161usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(enable_iwspword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iwspentry) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(iwspentry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).separate_wnum) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(separate_wnum)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wordrecog_head_silence_model_name) as usize - ptr as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(wordrecog_head_silence_model_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wordrecog_tail_silence_model_name) as usize - ptr as usize
        },
        436usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(wordrecog_tail_silence_model_name)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).wordrecog_silence_context_name) as usize - ptr as usize
        },
        692usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(wordrecog_silence_context_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unknown_name) as usize - ptr as usize },
        948usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(unknown_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).additional_dict_files) as usize - ptr as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(additional_dict_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).additional_dict_entries) as usize - ptr as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(additional_dict_entries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_lm__),
            "::",
            stringify!(next)
        )
    );
}
pub type JCONF_LM = __jconf_lm__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_search__ {
    pub id: ::std::os::raw::c_short,
    pub name: [::std::os::raw::c_char; 64usize],
    pub amconf: *mut JCONF_AM,
    pub lmconf: *mut JCONF_LM,
    pub compute_only_1pass: boolean,
    pub ccd_handling: boolean,
    pub force_ccd_handling: boolean,
    pub lmp: __jconf_search____bindgen_ty_1,
    pub pass1: __jconf_search____bindgen_ty_2,
    pub pass2: __jconf_search____bindgen_ty_3,
    pub graph: __jconf_search____bindgen_ty_4,
    pub successive: __jconf_search____bindgen_ty_5,
    pub annotate: __jconf_search____bindgen_ty_6,
    pub output: __jconf_search____bindgen_ty_7,
    pub sw: __jconf_search____bindgen_ty_8,
    pub mbr: __jconf_search____bindgen_ty_9,
    pub next: *mut __jconf_search__,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_search____bindgen_ty_1 {
    pub lm_weight: LOGPROB,
    pub lm_penalty: LOGPROB,
    pub lm_weight2: LOGPROB,
    pub lm_penalty2: LOGPROB,
    pub lm_penalty_trans: LOGPROB,
    pub penalty1: LOGPROB,
    pub penalty2: LOGPROB,
    pub lmp2_specified: boolean,
    pub lmp_specified: boolean,
}
#[test]
fn bindgen_test_layout___jconf_search____bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_search____bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_search____bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(__jconf_search____bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_search____bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__jconf_search____bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lm_weight) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_1),
            "::",
            stringify!(lm_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lm_penalty) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_1),
            "::",
            stringify!(lm_penalty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lm_weight2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_1),
            "::",
            stringify!(lm_weight2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lm_penalty2) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_1),
            "::",
            stringify!(lm_penalty2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lm_penalty_trans) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_1),
            "::",
            stringify!(lm_penalty_trans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penalty1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_1),
            "::",
            stringify!(penalty1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penalty2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_1),
            "::",
            stringify!(penalty2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmp2_specified) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_1),
            "::",
            stringify!(lmp2_specified)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmp_specified) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_1),
            "::",
            stringify!(lmp_specified)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_search____bindgen_ty_2 {
    pub specified_trellis_beam_width: ::std::os::raw::c_int,
    pub score_pruning_width: LOGPROB,
    pub old_tree_function_flag: boolean,
}
#[test]
fn bindgen_test_layout___jconf_search____bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_search____bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_search____bindgen_ty_2>(),
        12usize,
        concat!("Size of: ", stringify!(__jconf_search____bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_search____bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(__jconf_search____bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).specified_trellis_beam_width) as usize - ptr as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_2),
            "::",
            stringify!(specified_trellis_beam_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score_pruning_width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_2),
            "::",
            stringify!(score_pruning_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).old_tree_function_flag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_2),
            "::",
            stringify!(old_tree_function_flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_search____bindgen_ty_3 {
    pub nbest: ::std::os::raw::c_int,
    pub enveloped_bestfirst_width: ::std::os::raw::c_int,
    pub scan_beam_thres: LOGPROB,
    pub hypo_overflow: ::std::os::raw::c_int,
    pub stack_size: ::std::os::raw::c_int,
    pub lookup_range: ::std::os::raw::c_int,
    pub looktrellis_flag: boolean,
}
#[test]
fn bindgen_test_layout___jconf_search____bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_search____bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_search____bindgen_ty_3>(),
        28usize,
        concat!("Size of: ", stringify!(__jconf_search____bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_search____bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(__jconf_search____bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nbest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_3),
            "::",
            stringify!(nbest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enveloped_bestfirst_width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_3),
            "::",
            stringify!(enveloped_bestfirst_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scan_beam_thres) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_3),
            "::",
            stringify!(scan_beam_thres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hypo_overflow) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_3),
            "::",
            stringify!(hypo_overflow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stack_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_3),
            "::",
            stringify!(stack_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lookup_range) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_3),
            "::",
            stringify!(lookup_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).looktrellis_flag) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_3),
            "::",
            stringify!(looktrellis_flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_search____bindgen_ty_4 {
    pub enabled: boolean,
    pub lattice: boolean,
    pub confnet: boolean,
    pub graph_merge_neighbor_range: ::std::os::raw::c_int,
    pub graphout_cut_depth: ::std::os::raw::c_int,
    pub graphout_limit_boundary_loop_num: ::std::os::raw::c_int,
    pub graphout_search_delay: boolean,
}
#[test]
fn bindgen_test_layout___jconf_search____bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_search____bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_search____bindgen_ty_4>(),
        20usize,
        concat!("Size of: ", stringify!(__jconf_search____bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_search____bindgen_ty_4>(),
        4usize,
        concat!("Alignment of ", stringify!(__jconf_search____bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_4),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lattice) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_4),
            "::",
            stringify!(lattice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confnet) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_4),
            "::",
            stringify!(confnet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_merge_neighbor_range) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_4),
            "::",
            stringify!(graph_merge_neighbor_range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graphout_cut_depth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_4),
            "::",
            stringify!(graphout_cut_depth)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).graphout_limit_boundary_loop_num) as usize - ptr as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_4),
            "::",
            stringify!(graphout_limit_boundary_loop_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graphout_search_delay) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_4),
            "::",
            stringify!(graphout_search_delay)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_search____bindgen_ty_5 {
    pub enabled: boolean,
    pub sp_frame_duration: ::std::os::raw::c_int,
    pub pausemodelname: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout___jconf_search____bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_search____bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_search____bindgen_ty_5>(),
        16usize,
        concat!("Size of: ", stringify!(__jconf_search____bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_search____bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(__jconf_search____bindgen_ty_5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enabled) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_5),
            "::",
            stringify!(enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_frame_duration) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_5),
            "::",
            stringify!(sp_frame_duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pausemodelname) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_5),
            "::",
            stringify!(pausemodelname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_search____bindgen_ty_6 {
    pub cm_alpha: LOGPROB,
    pub align_result_word_flag: boolean,
    pub align_result_phoneme_flag: boolean,
    pub align_result_state_flag: boolean,
}
#[test]
fn bindgen_test_layout___jconf_search____bindgen_ty_6() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_search____bindgen_ty_6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_search____bindgen_ty_6>(),
        8usize,
        concat!("Size of: ", stringify!(__jconf_search____bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_search____bindgen_ty_6>(),
        4usize,
        concat!("Alignment of ", stringify!(__jconf_search____bindgen_ty_6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cm_alpha) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_6),
            "::",
            stringify!(cm_alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_result_word_flag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_6),
            "::",
            stringify!(align_result_word_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_result_phoneme_flag) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_6),
            "::",
            stringify!(align_result_phoneme_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align_result_state_flag) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_6),
            "::",
            stringify!(align_result_state_flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_search____bindgen_ty_7 {
    pub output_hypo_maxnum: ::std::os::raw::c_int,
    pub progout_flag: boolean,
    pub progout_interval: ::std::os::raw::c_int,
    pub progout_interval_frame: ::std::os::raw::c_int,
    pub multigramout_flag: boolean,
}
#[test]
fn bindgen_test_layout___jconf_search____bindgen_ty_7() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_search____bindgen_ty_7> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_search____bindgen_ty_7>(),
        20usize,
        concat!("Size of: ", stringify!(__jconf_search____bindgen_ty_7))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_search____bindgen_ty_7>(),
        4usize,
        concat!("Alignment of ", stringify!(__jconf_search____bindgen_ty_7))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_hypo_maxnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_7),
            "::",
            stringify!(output_hypo_maxnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progout_flag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_7),
            "::",
            stringify!(progout_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progout_interval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_7),
            "::",
            stringify!(progout_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progout_interval_frame) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_7),
            "::",
            stringify!(progout_interval_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multigramout_flag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_7),
            "::",
            stringify!(multigramout_flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_search____bindgen_ty_8 {
    pub trellis_check_flag: boolean,
    pub triphone_check_flag: boolean,
    pub wchmm_check_flag: boolean,
    pub start_inactive: boolean,
    pub fallback_pass1_flag: boolean,
}
#[test]
fn bindgen_test_layout___jconf_search____bindgen_ty_8() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_search____bindgen_ty_8> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_search____bindgen_ty_8>(),
        5usize,
        concat!("Size of: ", stringify!(__jconf_search____bindgen_ty_8))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_search____bindgen_ty_8>(),
        1usize,
        concat!("Alignment of ", stringify!(__jconf_search____bindgen_ty_8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trellis_check_flag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_8),
            "::",
            stringify!(trellis_check_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).triphone_check_flag) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_8),
            "::",
            stringify!(triphone_check_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wchmm_check_flag) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_8),
            "::",
            stringify!(wchmm_check_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_inactive) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_8),
            "::",
            stringify!(start_inactive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fallback_pass1_flag) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_8),
            "::",
            stringify!(fallback_pass1_flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jconf_search____bindgen_ty_9 {
    pub use_mbr: boolean,
    pub use_word_weight: boolean,
    pub score_weight: f32,
    pub loss_weight: f32,
}
#[test]
fn bindgen_test_layout___jconf_search____bindgen_ty_9() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_search____bindgen_ty_9> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_search____bindgen_ty_9>(),
        12usize,
        concat!("Size of: ", stringify!(__jconf_search____bindgen_ty_9))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_search____bindgen_ty_9>(),
        4usize,
        concat!("Alignment of ", stringify!(__jconf_search____bindgen_ty_9))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_mbr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_9),
            "::",
            stringify!(use_mbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_word_weight) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_9),
            "::",
            stringify!(use_word_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score_weight) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_9),
            "::",
            stringify!(score_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loss_weight) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search____bindgen_ty_9),
            "::",
            stringify!(loss_weight)
        )
    );
}
#[test]
fn bindgen_test_layout___jconf_search__() {
    const UNINIT: ::std::mem::MaybeUninit<__jconf_search__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jconf_search__>(),
        256usize,
        concat!("Size of: ", stringify!(__jconf_search__))
    );
    assert_eq!(
        ::std::mem::align_of::<__jconf_search__>(),
        8usize,
        concat!("Alignment of ", stringify!(__jconf_search__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amconf) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(amconf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmconf) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(lmconf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compute_only_1pass) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(compute_only_1pass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ccd_handling) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(ccd_handling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_ccd_handling) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(force_ccd_handling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmp) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(lmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass1) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(pass1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass2) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(pass2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).successive) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(successive)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).annotate) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(annotate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sw) as usize - ptr as usize },
        228usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(sw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mbr) as usize - ptr as usize },
        236usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(mbr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__jconf_search__),
            "::",
            stringify!(next)
        )
    );
}
pub type JCONF_SEARCH = __jconf_search__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Jconf__ {
    pub input: __Jconf____bindgen_ty_1,
    pub detect: __Jconf____bindgen_ty_2,
    pub preprocess: __Jconf____bindgen_ty_3,
    pub reject: __Jconf____bindgen_ty_4,
    pub decodeopt: __Jconf____bindgen_ty_5,
    pub am_root: *mut JCONF_AM,
    pub lm_root: *mut JCONF_LM,
    pub search_root: *mut JCONF_SEARCH,
    pub lmnow: *mut JCONF_LM,
    pub amnow: *mut JCONF_AM,
    pub searchnow: *mut JCONF_SEARCH,
    pub gmm: *mut JCONF_AM,
    pub optsection: ::std::os::raw::c_short,
    pub optsectioning: boolean,
    pub outprob_outfile: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Jconf____bindgen_ty_1 {
    pub type_: ::std::os::raw::c_int,
    pub speech_input: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub plugin_source: ::std::os::raw::c_int,
    pub sfreq: ::std::os::raw::c_int,
    pub period: ::std::os::raw::c_int,
    pub framesize: ::std::os::raw::c_int,
    pub frameshift: ::std::os::raw::c_int,
    pub use_ds48to16: boolean,
    pub inputlist_filename: *mut ::std::os::raw::c_char,
    pub adinnet_port: ::std::os::raw::c_int,
    pub paramtype_check_flag: boolean,
}
#[test]
fn bindgen_test_layout___Jconf____bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__Jconf____bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Jconf____bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(__Jconf____bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__Jconf____bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__Jconf____bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speech_input) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_1),
            "::",
            stringify!(speech_input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_1),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugin_source) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_1),
            "::",
            stringify!(plugin_source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sfreq) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_1),
            "::",
            stringify!(sfreq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).period) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_1),
            "::",
            stringify!(period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framesize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_1),
            "::",
            stringify!(framesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frameshift) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_1),
            "::",
            stringify!(frameshift)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_ds48to16) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_1),
            "::",
            stringify!(use_ds48to16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputlist_filename) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_1),
            "::",
            stringify!(inputlist_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adinnet_port) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_1),
            "::",
            stringify!(adinnet_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramtype_check_flag) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_1),
            "::",
            stringify!(paramtype_check_flag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Jconf____bindgen_ty_2 {
    pub level_thres: ::std::os::raw::c_int,
    pub head_margin_msec: ::std::os::raw::c_int,
    pub tail_margin_msec: ::std::os::raw::c_int,
    pub zero_cross_num: ::std::os::raw::c_int,
    pub silence_cut: ::std::os::raw::c_int,
    pub chunk_size: ::std::os::raw::c_int,
    pub fvad_mode: ::std::os::raw::c_int,
    pub fvad_smoothnum: ::std::os::raw::c_int,
    pub fvad_thres: f32,
}
#[test]
fn bindgen_test_layout___Jconf____bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<__Jconf____bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Jconf____bindgen_ty_2>(),
        36usize,
        concat!("Size of: ", stringify!(__Jconf____bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__Jconf____bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(__Jconf____bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level_thres) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_2),
            "::",
            stringify!(level_thres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).head_margin_msec) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_2),
            "::",
            stringify!(head_margin_msec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tail_margin_msec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_2),
            "::",
            stringify!(tail_margin_msec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zero_cross_num) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_2),
            "::",
            stringify!(zero_cross_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silence_cut) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_2),
            "::",
            stringify!(silence_cut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_2),
            "::",
            stringify!(chunk_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fvad_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_2),
            "::",
            stringify!(fvad_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fvad_smoothnum) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_2),
            "::",
            stringify!(fvad_smoothnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fvad_thres) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_2),
            "::",
            stringify!(fvad_thres)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Jconf____bindgen_ty_3 {
    pub strip_zero_sample: boolean,
    pub use_zmean: boolean,
    pub level_coef: f32,
}
#[test]
fn bindgen_test_layout___Jconf____bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<__Jconf____bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Jconf____bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(__Jconf____bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<__Jconf____bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(__Jconf____bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strip_zero_sample) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_3),
            "::",
            stringify!(strip_zero_sample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_zmean) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_3),
            "::",
            stringify!(use_zmean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level_coef) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_3),
            "::",
            stringify!(level_coef)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Jconf____bindgen_ty_4 {
    pub gmm_filename: *mut ::std::os::raw::c_char,
    pub gmm_gprune_num: ::std::os::raw::c_int,
    pub gmm_reject_cmn_string: *mut ::std::os::raw::c_char,
    pub rejectshortlen: ::std::os::raw::c_int,
    pub rejectlonglen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___Jconf____bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<__Jconf____bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Jconf____bindgen_ty_4>(),
        32usize,
        concat!("Size of: ", stringify!(__Jconf____bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<__Jconf____bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(__Jconf____bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gmm_filename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_4),
            "::",
            stringify!(gmm_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gmm_gprune_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_4),
            "::",
            stringify!(gmm_gprune_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gmm_reject_cmn_string) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_4),
            "::",
            stringify!(gmm_reject_cmn_string)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rejectshortlen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_4),
            "::",
            stringify!(rejectshortlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rejectlonglen) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_4),
            "::",
            stringify!(rejectlonglen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Jconf____bindgen_ty_5 {
    pub realtime_flag: boolean,
    pub force_realtime_flag: boolean,
    pub forced_realtime: boolean,
    pub segment: boolean,
}
#[test]
fn bindgen_test_layout___Jconf____bindgen_ty_5() {
    const UNINIT: ::std::mem::MaybeUninit<__Jconf____bindgen_ty_5> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Jconf____bindgen_ty_5>(),
        4usize,
        concat!("Size of: ", stringify!(__Jconf____bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<__Jconf____bindgen_ty_5>(),
        1usize,
        concat!("Alignment of ", stringify!(__Jconf____bindgen_ty_5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realtime_flag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_5),
            "::",
            stringify!(realtime_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).force_realtime_flag) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_5),
            "::",
            stringify!(force_realtime_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).forced_realtime) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_5),
            "::",
            stringify!(forced_realtime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segment) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf____bindgen_ty_5),
            "::",
            stringify!(segment)
        )
    );
}
#[test]
fn bindgen_test_layout___Jconf__() {
    const UNINIT: ::std::mem::MaybeUninit<__Jconf__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Jconf__>(),
        216usize,
        concat!("Size of: ", stringify!(__Jconf__))
    );
    assert_eq!(
        ::std::mem::align_of::<__Jconf__>(),
        8usize,
        concat!("Alignment of ", stringify!(__Jconf__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).detect) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(detect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preprocess) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(preprocess)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reject) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(reject)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decodeopt) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(decodeopt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).am_root) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(am_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lm_root) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(lm_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).search_root) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(search_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmnow) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(lmnow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amnow) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(amnow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).searchnow) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(searchnow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gmm) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(gmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optsection) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(optsection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optsectioning) as usize - ptr as usize },
        202usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(optsectioning)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outprob_outfile) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(__Jconf__),
            "::",
            stringify!(outprob_outfile)
        )
    );
}
pub type Jconf = __Jconf__;
pub const JCONF_OPT_DEFAULT: _bindgen_ty_33 = 0;
pub const JCONF_OPT_GLOBAL: _bindgen_ty_33 = 1;
pub const JCONF_OPT_AM: _bindgen_ty_33 = 2;
pub const JCONF_OPT_LM: _bindgen_ty_33 = 3;
pub const JCONF_OPT_SR: _bindgen_ty_33 = 4;
pub const SIZEOF_JCONF_OPT: _bindgen_ty_33 = 5;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __FSBeam__ {
    pub tlist: [*mut TOKEN2; 2usize],
    pub tindex: [*mut TOKENID; 2usize],
    pub maxtnum: ::std::os::raw::c_int,
    pub expand_step: ::std::os::raw::c_int,
    pub expanded: boolean,
    pub tnum: [::std::os::raw::c_int; 2usize],
    pub n_start: ::std::os::raw::c_int,
    pub n_end: ::std::os::raw::c_int,
    pub tl: ::std::os::raw::c_int,
    pub tn: ::std::os::raw::c_int,
    pub score_pruning_max: LOGPROB,
    pub score_pruning_threshold: LOGPROB,
    pub score_pruning_count: ::std::os::raw::c_int,
    pub token: *mut TOKENID,
    pub wordend_best_score: LOGPROB,
    pub wordend_best_node: ::std::os::raw::c_int,
    pub wordend_best_tre: *mut TRELLIS_ATOM,
    pub wordend_best_last_cword: WORD_ID,
    pub totalnodenum: ::std::os::raw::c_int,
    pub bos: TRELLIS_ATOM,
    pub boslist: *mut TRELLIS_ATOM,
    pub nodes_malloced: boolean,
    pub lm_weight: LOGPROB,
    pub lm_penalty: LOGPROB,
    pub lm_penalty_trans: LOGPROB,
    pub penalty1: LOGPROB,
    pub in_sparea: boolean,
    pub tmp_sparea_start: ::std::os::raw::c_int,
    pub last_tre_word: WORD_ID,
    pub first_sparea: boolean,
    pub sp_duration: ::std::os::raw::c_int,
    pub pausemodelnames: *mut ::std::os::raw::c_char,
    pub pausemodel: *mut *mut ::std::os::raw::c_char,
    pub pausemodelnum: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___FSBeam__() {
    const UNINIT: ::std::mem::MaybeUninit<__FSBeam__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__FSBeam__>(),
        224usize,
        concat!("Size of: ", stringify!(__FSBeam__))
    );
    assert_eq!(
        ::std::mem::align_of::<__FSBeam__>(),
        8usize,
        concat!("Alignment of ", stringify!(__FSBeam__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tlist) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(tlist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tindex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(tindex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxtnum) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(maxtnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expand_step) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(expand_step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expanded) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(expanded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tnum) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(tnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_start) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(n_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_end) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(n_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tl) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(tl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tn) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(tn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score_pruning_max) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(score_pruning_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score_pruning_threshold) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(score_pruning_threshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score_pruning_count) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(score_pruning_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordend_best_score) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(wordend_best_score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordend_best_node) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(wordend_best_node)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordend_best_tre) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(wordend_best_tre)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordend_best_last_cword) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(wordend_best_last_cword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).totalnodenum) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(totalnodenum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bos) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(bos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boslist) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(boslist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodes_malloced) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(nodes_malloced)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lm_weight) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(lm_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lm_penalty) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(lm_penalty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lm_penalty_trans) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(lm_penalty_trans)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).penalty1) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(penalty1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_sparea) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(in_sparea)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmp_sparea_start) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(tmp_sparea_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_tre_word) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(last_tre_word)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).first_sparea) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(first_sparea)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_duration) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(sp_duration)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pausemodelnames) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(pausemodelnames)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pausemodel) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(pausemodel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pausemodelnum) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__FSBeam__),
            "::",
            stringify!(pausemodelnum)
        )
    );
}
pub type FSBeam = __FSBeam__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __RealBeam__ {
    pub maxframelen: ::std::os::raw::c_int,
    pub window: *mut SP16,
    pub windowlen: ::std::os::raw::c_int,
    pub windownum: ::std::os::raw::c_int,
    pub last_is_segmented: boolean,
    pub rest_Speech: *mut SP16,
    pub rest_alloc_len: ::std::os::raw::c_int,
    pub rest_len: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___RealBeam__() {
    const UNINIT: ::std::mem::MaybeUninit<__RealBeam__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__RealBeam__>(),
        48usize,
        concat!("Size of: ", stringify!(__RealBeam__))
    );
    assert_eq!(
        ::std::mem::align_of::<__RealBeam__>(),
        8usize,
        concat!("Alignment of ", stringify!(__RealBeam__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxframelen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__RealBeam__),
            "::",
            stringify!(maxframelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__RealBeam__),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windowlen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__RealBeam__),
            "::",
            stringify!(windowlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).windownum) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__RealBeam__),
            "::",
            stringify!(windownum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_is_segmented) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__RealBeam__),
            "::",
            stringify!(last_is_segmented)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rest_Speech) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__RealBeam__),
            "::",
            stringify!(rest_Speech)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rest_alloc_len) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__RealBeam__),
            "::",
            stringify!(rest_alloc_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rest_len) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__RealBeam__),
            "::",
            stringify!(rest_len)
        )
    );
}
pub type RealBeam = __RealBeam__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __StackDecode__ {
    pub hypo_len_count: [::std::os::raw::c_int; 151usize],
    pub maximum_filled_length: ::std::os::raw::c_int,
    pub framemaxscore: *mut LOGPROB,
    pub stocker_root: *mut NODE,
    pub popctr: ::std::os::raw::c_int,
    pub genectr: ::std::os::raw::c_int,
    pub pushctr: ::std::os::raw::c_int,
    pub finishnum: ::std::os::raw::c_int,
    pub current: *mut NODE,
    pub cm_alpha: LOGPROB,
    pub cm_tmpbestscore: LOGPROB,
    pub cm_tmpsum: LOGPROB,
    pub l_stacksize: ::std::os::raw::c_int,
    pub l_stacknum: ::std::os::raw::c_int,
    pub l_start: *mut NODE,
    pub l_bottom: *mut NODE,
    pub wordtrellis: [*mut LOGPROB; 2usize],
    pub g: *mut LOGPROB,
    pub phmmseq: *mut *mut HMM_Logical,
    pub phmmlen_max: ::std::os::raw::c_int,
    pub has_sp: *mut boolean,
    pub wend_token_frame: [*mut ::std::os::raw::c_short; 2usize],
    pub wend_token_gscore: [*mut LOGPROB; 2usize],
    pub wef: *mut ::std::os::raw::c_short,
    pub wes: *mut LOGPROB,
    pub cnword: *mut WORD_ID,
    pub cnwordrev: *mut WORD_ID,
}
#[test]
fn bindgen_test_layout___StackDecode__() {
    const UNINIT: ::std::mem::MaybeUninit<__StackDecode__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__StackDecode__>(),
        800usize,
        concat!("Size of: ", stringify!(__StackDecode__))
    );
    assert_eq!(
        ::std::mem::align_of::<__StackDecode__>(),
        8usize,
        concat!("Alignment of ", stringify!(__StackDecode__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hypo_len_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(hypo_len_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maximum_filled_length) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(maximum_filled_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framemaxscore) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(framemaxscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stocker_root) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(stocker_root)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).popctr) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(popctr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).genectr) as usize - ptr as usize },
        628usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(genectr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pushctr) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(pushctr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).finishnum) as usize - ptr as usize },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(finishnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cm_alpha) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(cm_alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cm_tmpbestscore) as usize - ptr as usize },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(cm_tmpbestscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cm_tmpsum) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(cm_tmpsum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_stacksize) as usize - ptr as usize },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(l_stacksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_stacknum) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(l_stacknum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_bottom) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(l_bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wordtrellis) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(wordtrellis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phmmseq) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(phmmseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phmmlen_max) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(phmmlen_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_sp) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(has_sp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wend_token_frame) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(wend_token_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wend_token_gscore) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(wend_token_gscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wef) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(wef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wes) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(wes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnword) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(cnword)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnwordrev) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(__StackDecode__),
            "::",
            stringify!(cnwordrev)
        )
    );
}
pub type StackDecode = __StackDecode__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LMFunc {
    pub uniprob: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut WORD_INFO, arg2: WORD_ID, arg3: LOGPROB) -> LOGPROB,
    >,
    pub biprob: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut WORD_INFO,
            arg2: WORD_ID,
            arg3: WORD_ID,
            arg4: LOGPROB,
        ) -> LOGPROB,
    >,
    pub lmprob: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut WORD_INFO,
            arg2: *mut WORD_ID,
            arg3: ::std::os::raw::c_int,
            arg4: WORD_ID,
            arg5: LOGPROB,
        ) -> LOGPROB,
    >,
}
#[test]
fn bindgen_test_layout_LMFunc() {
    const UNINIT: ::std::mem::MaybeUninit<LMFunc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<LMFunc>(),
        24usize,
        concat!("Size of: ", stringify!(LMFunc))
    );
    assert_eq!(
        ::std::mem::align_of::<LMFunc>(),
        8usize,
        concat!("Alignment of ", stringify!(LMFunc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uniprob) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LMFunc),
            "::",
            stringify!(uniprob)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).biprob) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(LMFunc),
            "::",
            stringify!(biprob)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmprob) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(LMFunc),
            "::",
            stringify!(lmprob)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __gmm_calc__ {
    pub gmm_score: *mut LOGPROB,
    pub is_voice: *mut boolean,
    pub framecount: ::std::os::raw::c_int,
    pub OP_nstream: ::std::os::raw::c_short,
    pub OP_vec_stream: [*mut VECT; 50usize],
    pub OP_veclen_stream: [::std::os::raw::c_short; 50usize],
    pub OP_calced_score: *mut LOGPROB,
    pub OP_calced_id: *mut ::std::os::raw::c_int,
    pub OP_calced_num: ::std::os::raw::c_int,
    pub OP_calced_maxnum: ::std::os::raw::c_int,
    pub OP_gprune_num: ::std::os::raw::c_int,
    pub OP_vec: *mut VECT,
    pub OP_veclen: ::std::os::raw::c_short,
    pub max_d: *mut HTK_HMM_Data,
    pub max_i: ::std::os::raw::c_int,
    pub gmm_max_cm: LOGPROB,
}
#[test]
fn bindgen_test_layout___gmm_calc__() {
    const UNINIT: ::std::mem::MaybeUninit<__gmm_calc__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__gmm_calc__>(),
        592usize,
        concat!("Size of: ", stringify!(__gmm_calc__))
    );
    assert_eq!(
        ::std::mem::align_of::<__gmm_calc__>(),
        8usize,
        concat!("Alignment of ", stringify!(__gmm_calc__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gmm_score) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(gmm_score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_voice) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(is_voice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).framecount) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(framecount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_nstream) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(OP_nstream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_vec_stream) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(OP_vec_stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_veclen_stream) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(OP_veclen_stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_calced_score) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(OP_calced_score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_calced_id) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(OP_calced_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_calced_num) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(OP_calced_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_calced_maxnum) as usize - ptr as usize },
        548usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(OP_calced_maxnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_gprune_num) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(OP_gprune_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_vec) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(OP_vec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OP_veclen) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(OP_veclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_d) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(max_d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_i) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(max_i)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gmm_max_cm) as usize - ptr as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__gmm_calc__),
            "::",
            stringify!(gmm_max_cm)
        )
    );
}
pub type GMMCalc = __gmm_calc__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sentence_align__ {
    pub num: ::std::os::raw::c_int,
    pub unittype: ::std::os::raw::c_short,
    pub w: *mut WORD_ID,
    pub ph: *mut *mut HMM_Logical,
    pub loc: *mut ::std::os::raw::c_short,
    pub is_iwsp: *mut boolean,
    pub begin_frame: *mut ::std::os::raw::c_int,
    pub end_frame: *mut ::std::os::raw::c_int,
    pub avgscore: *mut LOGPROB,
    pub allscore: LOGPROB,
    pub next: *mut __sentence_align__,
}
#[test]
fn bindgen_test_layout___sentence_align__() {
    const UNINIT: ::std::mem::MaybeUninit<__sentence_align__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sentence_align__>(),
        80usize,
        concat!("Size of: ", stringify!(__sentence_align__))
    );
    assert_eq!(
        ::std::mem::align_of::<__sentence_align__>(),
        8usize,
        concat!("Alignment of ", stringify!(__sentence_align__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence_align__),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unittype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence_align__),
            "::",
            stringify!(unittype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence_align__),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ph) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence_align__),
            "::",
            stringify!(ph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence_align__),
            "::",
            stringify!(loc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_iwsp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence_align__),
            "::",
            stringify!(is_iwsp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).begin_frame) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence_align__),
            "::",
            stringify!(begin_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_frame) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence_align__),
            "::",
            stringify!(end_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).avgscore) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence_align__),
            "::",
            stringify!(avgscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allscore) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence_align__),
            "::",
            stringify!(allscore)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence_align__),
            "::",
            stringify!(next)
        )
    );
}
pub type SentenceAlign = __sentence_align__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sentence__ {
    pub word: [WORD_ID; 150usize],
    pub word_num: ::std::os::raw::c_int,
    pub score: LOGPROB,
    pub confidence: [LOGPROB; 150usize],
    pub score_lm: LOGPROB,
    pub score_am: LOGPROB,
    pub gram_id: ::std::os::raw::c_int,
    pub align: *mut SentenceAlign,
    pub score_mbr: LOGPROB,
}
#[test]
fn bindgen_test_layout___sentence__() {
    const UNINIT: ::std::mem::MaybeUninit<__sentence__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sentence__>(),
        1240usize,
        concat!("Size of: ", stringify!(__sentence__))
    );
    assert_eq!(
        ::std::mem::align_of::<__sentence__>(),
        8usize,
        concat!("Alignment of ", stringify!(__sentence__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).word) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence__),
            "::",
            stringify!(word)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).word_num) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence__),
            "::",
            stringify!(word_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score) as usize - ptr as usize },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence__),
            "::",
            stringify!(score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confidence) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence__),
            "::",
            stringify!(confidence)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score_lm) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence__),
            "::",
            stringify!(score_lm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score_am) as usize - ptr as usize },
        1212usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence__),
            "::",
            stringify!(score_am)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gram_id) as usize - ptr as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence__),
            "::",
            stringify!(gram_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).align) as usize - ptr as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence__),
            "::",
            stringify!(align)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).score_mbr) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(__sentence__),
            "::",
            stringify!(score_mbr)
        )
    );
}
pub type Sentence = __sentence__;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __adin__ {
    pub ad_standby: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_void,
        ) -> boolean,
    >,
    pub ad_begin:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char) -> boolean>,
    pub ad_end: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
    pub ad_resume: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
    pub ad_pause: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
    pub ad_terminate: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
    pub ad_read: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut SP16, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub ad_input_name: ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char>,
    pub thres: ::std::os::raw::c_int,
    pub noise_zerocross: ::std::os::raw::c_int,
    pub nc_max: ::std::os::raw::c_int,
    pub chunk_size: ::std::os::raw::c_int,
    pub adin_cut_on: boolean,
    pub silence_cut_default: boolean,
    pub strip_flag: boolean,
    pub enable_thread: boolean,
    pub need_zmean: boolean,
    pub level_coef: f32,
    pub c_length: ::std::os::raw::c_int,
    pub c_offset: ::std::os::raw::c_int,
    pub swapbuf: *mut SP16,
    pub sbsize: ::std::os::raw::c_int,
    pub sblen: ::std::os::raw::c_int,
    pub rest_tail: ::std::os::raw::c_int,
    pub zc: ZEROCROSS,
    pub adin_thread: pthread_t,
    pub mutex: pthread_mutex_t,
    pub speech: *mut SP16,
    pub speechlen: ::std::os::raw::c_int,
    pub freezelen: ::std::os::raw::c_int,
    pub transfer_online: boolean,
    pub adinthread_buffer_overflowed: boolean,
    pub adinthread_ended: boolean,
    pub ignore_speech_while_recog: boolean,
    pub buffer: *mut SP16,
    pub bpmax: ::std::os::raw::c_int,
    pub bp: ::std::os::raw::c_int,
    pub current_len: ::std::os::raw::c_int,
    pub cbuf: *mut SP16,
    pub down_sample: boolean,
    pub buffer48: *mut SP16,
    pub io_rate: ::std::os::raw::c_int,
    pub is_valid_data: boolean,
    pub nc: ::std::os::raw::c_int,
    pub end_of_stream: boolean,
    pub need_init: boolean,
    pub ds: *mut DS_BUFFER,
    pub rehash: boolean,
    pub input_side_segment: boolean,
    pub total_captured_len: ::std::os::raw::c_uint,
    pub last_trigger_sample: ::std::os::raw::c_uint,
    pub last_trigger_len: ::std::os::raw::c_uint,
    pub current_input_name: [::std::os::raw::c_char; 2048usize],
    pub fvad: *mut ::std::os::raw::c_void,
    pub fvad_frameshiftinms: ::std::os::raw::c_int,
    pub fvad_framesize: ::std::os::raw::c_int,
    pub fvad_speech: [SP16; 320000usize],
    pub fvad_speechlen: ::std::os::raw::c_int,
    pub fvad_lastresultnum: ::std::os::raw::c_int,
    pub fvad_lastresult: *mut ::std::os::raw::c_int,
    pub fvad_lastp: ::std::os::raw::c_int,
    pub fvad_thres: f32,
}
#[test]
fn bindgen_test_layout___adin__() {
    const UNINIT: ::std::mem::MaybeUninit<__adin__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__adin__>(),
        642432usize,
        concat!("Size of: ", stringify!(__adin__))
    );
    assert_eq!(
        ::std::mem::align_of::<__adin__>(),
        8usize,
        concat!("Alignment of ", stringify!(__adin__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_standby) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(ad_standby)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_begin) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(ad_begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(ad_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_resume) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(ad_resume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_pause) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(ad_pause)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_terminate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(ad_terminate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_read) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(ad_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ad_input_name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(ad_input_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).thres) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(thres)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noise_zerocross) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(noise_zerocross)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nc_max) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(nc_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chunk_size) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(chunk_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adin_cut_on) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(adin_cut_on)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).silence_cut_default) as usize - ptr as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(silence_cut_default)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).strip_flag) as usize - ptr as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(strip_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).enable_thread) as usize - ptr as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(enable_thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).need_zmean) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(need_zmean)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level_coef) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(level_coef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_length) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(c_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_offset) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(c_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swapbuf) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(swapbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sbsize) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(sbsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sblen) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(sblen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rest_tail) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(rest_tail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zc) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(zc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adin_thread) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(adin_thread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutex) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speech) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(speech)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speechlen) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(speechlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freezelen) as usize - ptr as usize },
        244usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(freezelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transfer_online) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(transfer_online)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).adinthread_buffer_overflowed) as usize - ptr as usize
        },
        249usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(adinthread_buffer_overflowed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adinthread_ended) as usize - ptr as usize },
        250usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(adinthread_ended)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ignore_speech_while_recog) as usize - ptr as usize },
        251usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(ignore_speech_while_recog)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bpmax) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(bpmax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bp) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(bp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_len) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(current_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cbuf) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(cbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).down_sample) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(down_sample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer48) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(buffer48)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).io_rate) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(io_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_valid_data) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(is_valid_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nc) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(nc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_of_stream) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(end_of_stream)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).need_init) as usize - ptr as usize },
        317usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(need_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ds) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(ds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rehash) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(rehash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input_side_segment) as usize - ptr as usize },
        329usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(input_side_segment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).total_captured_len) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(total_captured_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_trigger_sample) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(last_trigger_sample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_trigger_len) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(last_trigger_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).current_input_name) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(current_input_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fvad) as usize - ptr as usize },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(fvad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fvad_frameshiftinms) as usize - ptr as usize },
        2400usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(fvad_frameshiftinms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fvad_framesize) as usize - ptr as usize },
        2404usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(fvad_framesize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fvad_speech) as usize - ptr as usize },
        2408usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(fvad_speech)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fvad_speechlen) as usize - ptr as usize },
        642408usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(fvad_speechlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fvad_lastresultnum) as usize - ptr as usize },
        642412usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(fvad_lastresultnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fvad_lastresult) as usize - ptr as usize },
        642416usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(fvad_lastresult)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fvad_lastp) as usize - ptr as usize },
        642424usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(fvad_lastp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fvad_thres) as usize - ptr as usize },
        642428usize,
        concat!(
            "Offset of field: ",
            stringify!(__adin__),
            "::",
            stringify!(fvad_thres)
        )
    );
}
pub type ADIn = __adin__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Output__ {
    pub status: ::std::os::raw::c_int,
    pub num_frame: ::std::os::raw::c_int,
    pub length_msec: ::std::os::raw::c_int,
    pub sent: *mut Sentence,
    pub sentnum: ::std::os::raw::c_int,
    pub wg1: *mut WordGraph,
    pub wg1_num: ::std::os::raw::c_int,
    pub wg: *mut WordGraph,
    pub confnet: *mut CN_CLUSTER,
    pub pass1: Sentence,
}
#[test]
fn bindgen_test_layout___Output__() {
    const UNINIT: ::std::mem::MaybeUninit<__Output__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Output__>(),
        1304usize,
        concat!("Size of: ", stringify!(__Output__))
    );
    assert_eq!(
        ::std::mem::align_of::<__Output__>(),
        8usize,
        concat!("Alignment of ", stringify!(__Output__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Output__),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_frame) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__Output__),
            "::",
            stringify!(num_frame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length_msec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__Output__),
            "::",
            stringify!(length_msec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sent) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__Output__),
            "::",
            stringify!(sent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sentnum) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__Output__),
            "::",
            stringify!(sentnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wg1) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__Output__),
            "::",
            stringify!(wg1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wg1_num) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__Output__),
            "::",
            stringify!(wg1_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wg) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__Output__),
            "::",
            stringify!(wg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).confnet) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__Output__),
            "::",
            stringify!(confnet)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass1) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Output__),
            "::",
            stringify!(pass1)
        )
    );
}
pub type Output = __Output__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mfcc_calc__ {
    pub id: ::std::os::raw::c_short,
    pub para: *mut Value,
    pub htk_loaded: boolean,
    pub hmm_loaded: boolean,
    pub paramtype_check_flag: boolean,
    pub wrk: *mut MFCCWork,
    pub param: *mut HTK_Param,
    pub rest_param: *mut HTK_Param,
    pub cmn: __mfcc_calc____bindgen_ty_1,
    pub frontend: __mfcc_calc____bindgen_ty_2,
    pub ewrk: ENERGYWork,
    pub db: *mut DeltaBuf,
    pub ab: *mut DeltaBuf,
    pub splicedmfcc: *mut VECT,
    pub splicedlen: ::std::os::raw::c_int,
    pub splice: ::std::os::raw::c_int,
    pub tmpmfcc: *mut VECT,
    pub valid: boolean,
    pub f: ::std::os::raw::c_int,
    pub last_time: ::std::os::raw::c_int,
    pub sparea_start: ::std::os::raw::c_int,
    pub segmented: boolean,
    pub segmented_by_input: boolean,
    pub plugin_source: ::std::os::raw::c_int,
    pub func: __mfcc_calc____bindgen_ty_3,
    pub next: *mut __mfcc_calc__,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mfcc_calc____bindgen_ty_1 {
    pub load_filename: *mut ::std::os::raw::c_char,
    pub map_cmn: boolean,
    pub update: boolean,
    pub save_filename: *mut ::std::os::raw::c_char,
    pub map_weight: f32,
    pub loaded: boolean,
    pub wrk: *mut CMNWork,
    pub static_cvn_only: boolean,
}
#[test]
fn bindgen_test_layout___mfcc_calc____bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mfcc_calc____bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mfcc_calc____bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(__mfcc_calc____bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mfcc_calc____bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__mfcc_calc____bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).load_filename) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_1),
            "::",
            stringify!(load_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_cmn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_1),
            "::",
            stringify!(map_cmn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).update) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_1),
            "::",
            stringify!(update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).save_filename) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_1),
            "::",
            stringify!(save_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).map_weight) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_1),
            "::",
            stringify!(map_weight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loaded) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_1),
            "::",
            stringify!(loaded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrk) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_1),
            "::",
            stringify!(wrk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_cvn_only) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_1),
            "::",
            stringify!(static_cvn_only)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mfcc_calc____bindgen_ty_2 {
    pub ssbuf: *mut f32,
    pub sslen: ::std::os::raw::c_int,
    pub ss_alpha: f32,
    pub ss_floor: f32,
    pub sscalc: boolean,
    pub sscalc_len: ::std::os::raw::c_int,
    pub ssload_filename: *mut ::std::os::raw::c_char,
    pub mfccwrk_ss: *mut MFCCWork,
}
#[test]
fn bindgen_test_layout___mfcc_calc____bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<__mfcc_calc____bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mfcc_calc____bindgen_ty_2>(),
        48usize,
        concat!("Size of: ", stringify!(__mfcc_calc____bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__mfcc_calc____bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__mfcc_calc____bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_2),
            "::",
            stringify!(ssbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sslen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_2),
            "::",
            stringify!(sslen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_alpha) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_2),
            "::",
            stringify!(ss_alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_floor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_2),
            "::",
            stringify!(ss_floor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sscalc) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_2),
            "::",
            stringify!(sscalc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sscalc_len) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_2),
            "::",
            stringify!(sscalc_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ssload_filename) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_2),
            "::",
            stringify!(ssload_filename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mfccwrk_ss) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_2),
            "::",
            stringify!(mfccwrk_ss)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __mfcc_calc____bindgen_ty_3 {
    pub fv_standby: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
    pub fv_begin: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
    pub fv_read: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut VECT, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub fv_end: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
    pub fv_resume: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
    pub fv_pause: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
    pub fv_terminate: ::std::option::Option<unsafe extern "C" fn() -> boolean>,
    pub fv_input_name: ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout___mfcc_calc____bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<__mfcc_calc____bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mfcc_calc____bindgen_ty_3>(),
        64usize,
        concat!("Size of: ", stringify!(__mfcc_calc____bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<__mfcc_calc____bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(__mfcc_calc____bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fv_standby) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_3),
            "::",
            stringify!(fv_standby)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fv_begin) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_3),
            "::",
            stringify!(fv_begin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fv_read) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_3),
            "::",
            stringify!(fv_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fv_end) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_3),
            "::",
            stringify!(fv_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fv_resume) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_3),
            "::",
            stringify!(fv_resume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fv_pause) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_3),
            "::",
            stringify!(fv_pause)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fv_terminate) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_3),
            "::",
            stringify!(fv_terminate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fv_input_name) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc____bindgen_ty_3),
            "::",
            stringify!(fv_input_name)
        )
    );
}
#[test]
fn bindgen_test_layout___mfcc_calc__() {
    const UNINIT: ::std::mem::MaybeUninit<__mfcc_calc__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mfcc_calc__>(),
        296usize,
        concat!("Size of: ", stringify!(__mfcc_calc__))
    );
    assert_eq!(
        ::std::mem::align_of::<__mfcc_calc__>(),
        8usize,
        concat!("Alignment of ", stringify!(__mfcc_calc__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).para) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(para)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).htk_loaded) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(htk_loaded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmm_loaded) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(hmm_loaded)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paramtype_check_flag) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(paramtype_check_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrk) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(wrk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rest_param) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(rest_param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmn) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(cmn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frontend) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(frontend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ewrk) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(ewrk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).db) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(db)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ab) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(ab)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).splicedmfcc) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(splicedmfcc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).splicedlen) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(splicedlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).splice) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(splice)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tmpmfcc) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(tmpmfcc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_time) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(last_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sparea_start) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(sparea_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segmented) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(segmented)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segmented_by_input) as usize - ptr as usize },
        217usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(segmented_by_input)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugin_source) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(plugin_source)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(__mfcc_calc__),
            "::",
            stringify!(next)
        )
    );
}
pub type MFCCCalc = __mfcc_calc__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __process_am__ {
    pub config: *mut JCONF_AM,
    pub mfcc: *mut MFCCCalc,
    pub hmminfo: *mut HTK_HMM_INFO,
    pub hmm_gs: *mut HTK_HMM_INFO,
    pub hmmwrk: HMMWork,
    pub dnn: *mut DNNData,
    pub next: *mut __process_am__,
}
#[test]
fn bindgen_test_layout___process_am__() {
    const UNINIT: ::std::mem::MaybeUninit<__process_am__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__process_am__>(),
        904usize,
        concat!("Size of: ", stringify!(__process_am__))
    );
    assert_eq!(
        ::std::mem::align_of::<__process_am__>(),
        8usize,
        concat!("Alignment of ", stringify!(__process_am__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_am__),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mfcc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_am__),
            "::",
            stringify!(mfcc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmminfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_am__),
            "::",
            stringify!(hmminfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmm_gs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_am__),
            "::",
            stringify!(hmm_gs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hmmwrk) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_am__),
            "::",
            stringify!(hmmwrk)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dnn) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_am__),
            "::",
            stringify!(dnn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_am__),
            "::",
            stringify!(next)
        )
    );
}
pub type PROCESS_AM = __process_am__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __process_lm__ {
    pub config: *mut JCONF_LM,
    pub am: *mut PROCESS_AM,
    pub lmtype: ::std::os::raw::c_int,
    pub lmvar: ::std::os::raw::c_int,
    pub winfo: *mut WORD_INFO,
    pub ngram: *mut NGRAM_INFO,
    pub grammars: *mut MULTIGRAM,
    pub gram_maxid: ::std::os::raw::c_int,
    pub dfa: *mut DFA_INFO,
    pub dfa_forward: *mut DFA_INFO,
    pub global_modified: boolean,
    pub lmfunc: LMFunc,
    pub next: *mut __process_lm__,
}
#[test]
fn bindgen_test_layout___process_lm__() {
    const UNINIT: ::std::mem::MaybeUninit<__process_lm__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__process_lm__>(),
        112usize,
        concat!("Size of: ", stringify!(__process_lm__))
    );
    assert_eq!(
        ::std::mem::align_of::<__process_lm__>(),
        8usize,
        concat!("Alignment of ", stringify!(__process_lm__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_lm__),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).am) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_lm__),
            "::",
            stringify!(am)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmtype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_lm__),
            "::",
            stringify!(lmtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmvar) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_lm__),
            "::",
            stringify!(lmvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).winfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_lm__),
            "::",
            stringify!(winfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ngram) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_lm__),
            "::",
            stringify!(ngram)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grammars) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_lm__),
            "::",
            stringify!(grammars)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gram_maxid) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_lm__),
            "::",
            stringify!(gram_maxid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfa) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_lm__),
            "::",
            stringify!(dfa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dfa_forward) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_lm__),
            "::",
            stringify!(dfa_forward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global_modified) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_lm__),
            "::",
            stringify!(global_modified)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmfunc) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_lm__),
            "::",
            stringify!(lmfunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__process_lm__),
            "::",
            stringify!(next)
        )
    );
}
pub type PROCESS_LM = __process_lm__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __recogprocess__ {
    pub live: boolean,
    pub active: ::std::os::raw::c_short,
    pub config: *mut JCONF_SEARCH,
    pub am: *mut PROCESS_AM,
    pub lm: *mut PROCESS_LM,
    pub lmtype: ::std::os::raw::c_int,
    pub lmvar: ::std::os::raw::c_int,
    pub ccd_flag: boolean,
    pub wchmm: *mut WCHMM_INFO,
    pub trellis_beam_width: ::std::os::raw::c_int,
    pub backtrellis: *mut BACKTRELLIS,
    pub pass1: FSBeam,
    pub pass2: StackDecode,
    pub pass1_wseq: [WORD_ID; 150usize],
    pub pass1_wnum: ::std::os::raw::c_int,
    pub pass1_score: LOGPROB,
    pub sp_break_last_word: WORD_ID,
    pub sp_break_last_nword: WORD_ID,
    pub sp_break_last_nword_allow_override: boolean,
    pub sp_break_2_begin_word: WORD_ID,
    pub sp_break_2_end_word: WORD_ID,
    pub peseqlen: ::std::os::raw::c_int,
    pub graph_totalwordnum: ::std::os::raw::c_int,
    pub result: Output,
    pub graphout: boolean,
    pub order_matrix: *mut ::std::os::raw::c_char,
    pub order_matrix_count: ::std::os::raw::c_int,
    pub have_interim: boolean,
    pub hook: *mut ::std::os::raw::c_void,
    pub next: *mut __recogprocess__,
}
#[test]
fn bindgen_test_layout___recogprocess__() {
    const UNINIT: ::std::mem::MaybeUninit<__recogprocess__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__recogprocess__>(),
        3080usize,
        concat!("Size of: ", stringify!(__recogprocess__))
    );
    assert_eq!(
        ::std::mem::align_of::<__recogprocess__>(),
        8usize,
        concat!("Alignment of ", stringify!(__recogprocess__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).live) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(live)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).am) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(am)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lm) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(lm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmtype) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(lmtype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmvar) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(lmvar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ccd_flag) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(ccd_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wchmm) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(wchmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trellis_beam_width) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(trellis_beam_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backtrellis) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(backtrellis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass1) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(pass1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass2) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(pass2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass1_wseq) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(pass1_wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass1_wnum) as usize - ptr as usize },
        1696usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(pass1_wnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pass1_score) as usize - ptr as usize },
        1700usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(pass1_score)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_break_last_word) as usize - ptr as usize },
        1704usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(sp_break_last_word)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_break_last_nword) as usize - ptr as usize },
        1708usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(sp_break_last_nword)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).sp_break_last_nword_allow_override) as usize - ptr as usize
        },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(sp_break_last_nword_allow_override)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_break_2_begin_word) as usize - ptr as usize },
        1716usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(sp_break_2_begin_word)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sp_break_2_end_word) as usize - ptr as usize },
        1720usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(sp_break_2_end_word)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peseqlen) as usize - ptr as usize },
        1724usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(peseqlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_totalwordnum) as usize - ptr as usize },
        1728usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(graph_totalwordnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graphout) as usize - ptr as usize },
        3040usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(graphout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order_matrix) as usize - ptr as usize },
        3048usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(order_matrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order_matrix_count) as usize - ptr as usize },
        3056usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(order_matrix_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).have_interim) as usize - ptr as usize },
        3060usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(have_interim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hook) as usize - ptr as usize },
        3064usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(hook)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(__recogprocess__),
            "::",
            stringify!(next)
        )
    );
}
pub type RecogProcess = __recogprocess__;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __Recog__ {
    pub jconf: *mut Jconf,
    pub adin: *mut ADIn,
    pub real: RealBeam,
    pub mfcclist: *mut MFCCCalc,
    pub amlist: *mut PROCESS_AM,
    pub lmlist: *mut PROCESS_LM,
    pub process_list: *mut RecogProcess,
    pub process_segment: boolean,
    pub speech: *mut SP16,
    pub speechalloclen: ::std::os::raw::c_int,
    pub speechlen: ::std::os::raw::c_int,
    pub peseqlen: ::std::os::raw::c_int,
    pub gmm: *mut HTK_HMM_INFO,
    pub gmmmfcc: *mut MFCCCalc,
    pub gc: *mut GMMCalc,
    pub process_active: boolean,
    pub process_want_terminate: boolean,
    pub process_want_reload: boolean,
    pub gram_switch_input_method: ::std::os::raw::c_short,
    pub process_online: boolean,
    pub calc_vector: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut MFCCCalc,
            arg2: *mut SP16,
            arg3: ::std::os::raw::c_int,
        ) -> boolean,
    >,
    pub triggered: boolean,
    pub callback_function: [[::std::option::Option<unsafe extern "C" fn()>; 10usize]; 33usize],
    pub callback_user_data: [[*mut ::std::os::raw::c_void; 10usize]; 33usize],
    pub callback_function_num: [::std::os::raw::c_int; 33usize],
    pub callback_list_code: [::std::os::raw::c_int; 330usize],
    pub callback_list_loc: [::std::os::raw::c_int; 330usize],
    pub callback_num: ::std::os::raw::c_int,
    pub hook: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___Recog__() {
    const UNINIT: ::std::mem::MaybeUninit<__Recog__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__Recog__>(),
        8240usize,
        concat!("Size of: ", stringify!(__Recog__))
    );
    assert_eq!(
        ::std::mem::align_of::<__Recog__>(),
        8usize,
        concat!("Alignment of ", stringify!(__Recog__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).jconf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(jconf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adin) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(adin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).real) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mfcclist) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(mfcclist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).amlist) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(amlist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmlist) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(lmlist)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).process_list) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(process_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).process_segment) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(process_segment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speech) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(speech)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speechalloclen) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(speechalloclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).speechlen) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(speechlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).peseqlen) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(peseqlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gmm) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(gmm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gmmmfcc) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(gmmmfcc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gc) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(gc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).process_active) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(process_active)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).process_want_terminate) as usize - ptr as usize },
        153usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(process_want_terminate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).process_want_reload) as usize - ptr as usize },
        154usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(process_want_reload)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gram_switch_input_method) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(gram_switch_input_method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).process_online) as usize - ptr as usize },
        158usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(process_online)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calc_vector) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(calc_vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).triggered) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(triggered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_function) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(callback_function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_user_data) as usize - ptr as usize },
        2816usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(callback_user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_function_num) as usize - ptr as usize },
        5456usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(callback_function_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_list_code) as usize - ptr as usize },
        5588usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(callback_list_code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_list_loc) as usize - ptr as usize },
        6908usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(callback_list_loc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callback_num) as usize - ptr as usize },
        8228usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(callback_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hook) as usize - ptr as usize },
        8232usize,
        concat!(
            "Offset of field: ",
            stringify!(__Recog__),
            "::",
            stringify!(hook)
        )
    );
}
pub type Recog = __Recog__;
extern "C" {
    pub static mut verbose_flag: boolean;
}
extern "C" {
    pub static mut debug2_flag: boolean;
}
extern "C" {
    pub static mut callback_debug_flag: boolean;
}
extern "C" {
    pub static mut global_plugin_list: *mut *mut PLUGIN_ENTRY;
}
extern "C" {
    pub static mut global_plugin_loaded_file_num: ::std::os::raw::c_int;
}
extern "C" {
    pub fn j_open_stream(
        recog: *mut Recog,
        file_or_dev_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j_close_stream(recog: *mut Recog) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j_recognize_stream(recog: *mut Recog) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j_request_pause(recog: *mut Recog);
}
extern "C" {
    pub fn j_request_terminate(recog: *mut Recog);
}
extern "C" {
    pub fn j_request_resume(recog: *mut Recog);
}
extern "C" {
    pub fn schedule_grammar_update(recog: *mut Recog);
}
extern "C" {
    pub fn j_reset_reload(recog: *mut Recog);
}
extern "C" {
    pub fn j_enable_debug_message();
}
extern "C" {
    pub fn j_disable_debug_message();
}
extern "C" {
    pub fn j_enable_verbose_message();
}
extern "C" {
    pub fn j_disable_verbose_message();
}
extern "C" {
    pub fn j_internal_error(fmt: *mut ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn j_config_load_args(
        jconf: *mut Jconf,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j_config_load_string(
        jconf: *mut Jconf,
        string: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j_config_load_file(
        jconf: *mut Jconf,
        filename: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j_config_load_args_new(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> *mut Jconf;
}
extern "C" {
    pub fn j_config_load_string_new(string: *mut ::std::os::raw::c_char) -> *mut Jconf;
}
extern "C" {
    pub fn j_config_load_file_new(filename: *mut ::std::os::raw::c_char) -> *mut Jconf;
}
extern "C" {
    pub fn j_add_dict(lm: *mut JCONF_LM, dictfile: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn j_add_word(lm: *mut JCONF_LM, wordentry: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn j_adin_init(recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn j_get_current_filename(recog: *mut Recog) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn j_recog_info(recog: *mut Recog);
}
extern "C" {
    pub fn j_create_instance_from_jconf(jconf: *mut Jconf) -> *mut Recog;
}
extern "C" {
    pub fn j_regist_user_lm_func(
        lm: *mut PROCESS_LM,
        unifunc: ::std::option::Option<
            unsafe extern "C" fn(winfo: *mut WORD_INFO, w: WORD_ID, ngram_prob: LOGPROB) -> LOGPROB,
        >,
        bifunc: ::std::option::Option<
            unsafe extern "C" fn(
                winfo: *mut WORD_INFO,
                context: WORD_ID,
                w: WORD_ID,
                ngram_prob: LOGPROB,
            ) -> LOGPROB,
        >,
        probfunc: ::std::option::Option<
            unsafe extern "C" fn(
                winfo: *mut WORD_INFO,
                contexts: *mut WORD_ID,
                context_len: ::std::os::raw::c_int,
                w: WORD_ID,
                ngram_prob: LOGPROB,
            ) -> LOGPROB,
        >,
    ) -> boolean;
}
extern "C" {
    pub fn j_regist_user_param_func(
        recog: *mut Recog,
        user_calc_vector: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut MFCCCalc,
                arg2: *mut SP16,
                arg3: ::std::os::raw::c_int,
            ) -> boolean,
        >,
    ) -> boolean;
}
extern "C" {
    pub fn j_get_amconf_by_name(
        jconf: *mut Jconf,
        name: *mut ::std::os::raw::c_char,
    ) -> *mut JCONF_AM;
}
extern "C" {
    pub fn j_get_amconf_by_id(jconf: *mut Jconf, id: ::std::os::raw::c_int) -> *mut JCONF_AM;
}
extern "C" {
    pub fn j_get_amconf_default(jconf: *mut Jconf) -> *mut JCONF_AM;
}
extern "C" {
    pub fn j_get_lmconf_by_name(
        jconf: *mut Jconf,
        name: *mut ::std::os::raw::c_char,
    ) -> *mut JCONF_LM;
}
extern "C" {
    pub fn j_get_lmconf_by_id(jconf: *mut Jconf, id: ::std::os::raw::c_int) -> *mut JCONF_LM;
}
extern "C" {
    pub fn j_get_searchconf_by_name(
        jconf: *mut Jconf,
        name: *mut ::std::os::raw::c_char,
    ) -> *mut JCONF_SEARCH;
}
extern "C" {
    pub fn j_get_searchconf_by_id(
        jconf: *mut Jconf,
        id: ::std::os::raw::c_int,
    ) -> *mut JCONF_SEARCH;
}
extern "C" {
    pub fn j_process_deactivate(recog: *mut Recog, name: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn j_process_deactivate_by_id(recog: *mut Recog, id: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn j_process_activate(recog: *mut Recog, name: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn j_process_activate_by_id(recog: *mut Recog, id: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn j_process_add_lm(
        recog: *mut Recog,
        lmconf: *mut JCONF_LM,
        sconf: *mut JCONF_SEARCH,
        name: *mut ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn j_process_remove(recog: *mut Recog, sconf: *mut JCONF_SEARCH) -> boolean;
}
extern "C" {
    pub fn j_process_lm_remove(recog: *mut Recog, lmconf: *mut JCONF_LM) -> boolean;
}
extern "C" {
    pub fn j_process_am_remove(recog: *mut Recog, amconf: *mut JCONF_AM) -> boolean;
}
extern "C" {
    pub fn j_adin_change_input_scaling_factor(recog: *mut Recog, factor: f32);
}
extern "C" {
    pub fn j_mfcccalc_new(amconf: *mut JCONF_AM) -> *mut MFCCCalc;
}
extern "C" {
    pub fn j_mfcccalc_free(mfcc: *mut MFCCCalc);
}
extern "C" {
    pub fn j_process_am_new(recog: *mut Recog, amconf: *mut JCONF_AM) -> *mut PROCESS_AM;
}
extern "C" {
    pub fn j_process_am_free(am: *mut PROCESS_AM);
}
extern "C" {
    pub fn j_process_lm_new(recog: *mut Recog, lmconf: *mut JCONF_LM) -> *mut PROCESS_LM;
}
extern "C" {
    pub fn j_process_lm_free(lm: *mut PROCESS_LM);
}
extern "C" {
    pub fn j_recogprocess_new(recog: *mut Recog, sconf: *mut JCONF_SEARCH) -> *mut RecogProcess;
}
extern "C" {
    pub fn j_recogprocess_free(process: *mut RecogProcess);
}
extern "C" {
    pub fn j_jconf_am_new() -> *mut JCONF_AM;
}
extern "C" {
    pub fn j_jconf_am_free(amconf: *mut JCONF_AM);
}
extern "C" {
    pub fn j_jconf_am_regist(
        jconf: *mut Jconf,
        amconf: *mut JCONF_AM,
        name: *mut ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn j_jconf_lm_new() -> *mut JCONF_LM;
}
extern "C" {
    pub fn j_jconf_lm_free(lmconf: *mut JCONF_LM);
}
extern "C" {
    pub fn j_jconf_lm_regist(
        jconf: *mut Jconf,
        lmconf: *mut JCONF_LM,
        name: *mut ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn j_jconf_search_new() -> *mut JCONF_SEARCH;
}
extern "C" {
    pub fn j_jconf_search_free(sconf: *mut JCONF_SEARCH);
}
extern "C" {
    pub fn j_jconf_search_regist(
        jconf: *mut Jconf,
        sconf: *mut JCONF_SEARCH,
        name: *mut ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn j_jconf_new() -> *mut Jconf;
}
extern "C" {
    pub fn j_jconf_free(jconf: *mut Jconf);
}
extern "C" {
    pub fn j_recog_new() -> *mut Recog;
}
extern "C" {
    pub fn j_recog_free(recog: *mut Recog);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __j_useropt__ {
    pub optstr: *mut ::std::os::raw::c_char,
    pub desc: *mut ::std::os::raw::c_char,
    pub argnum: ::std::os::raw::c_int,
    pub reqargnum: ::std::os::raw::c_int,
    pub func: ::std::option::Option<
        unsafe extern "C" fn(
            jconf: *mut Jconf,
            arg: *mut *mut ::std::os::raw::c_char,
            argnum: ::std::os::raw::c_int,
        ) -> boolean,
    >,
    pub next: *mut __j_useropt__,
}
#[test]
fn bindgen_test_layout___j_useropt__() {
    const UNINIT: ::std::mem::MaybeUninit<__j_useropt__> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__j_useropt__>(),
        40usize,
        concat!("Size of: ", stringify!(__j_useropt__))
    );
    assert_eq!(
        ::std::mem::align_of::<__j_useropt__>(),
        8usize,
        concat!("Alignment of ", stringify!(__j_useropt__))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optstr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__j_useropt__),
            "::",
            stringify!(optstr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__j_useropt__),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argnum) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__j_useropt__),
            "::",
            stringify!(argnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reqargnum) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__j_useropt__),
            "::",
            stringify!(reqargnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__j_useropt__),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__j_useropt__),
            "::",
            stringify!(next)
        )
    );
}
pub type USEROPT = __j_useropt__;
extern "C" {
    pub fn j_add_option(
        fmt: *mut ::std::os::raw::c_char,
        argnum: ::std::os::raw::c_int,
        reqargnum: ::std::os::raw::c_int,
        desc: *mut ::std::os::raw::c_char,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                jconf: *mut Jconf,
                arg: *mut *mut ::std::os::raw::c_char,
                argnum: ::std::os::raw::c_int,
            ) -> boolean,
        >,
    ) -> boolean;
}
extern "C" {
    pub fn useropt_free_all();
}
extern "C" {
    pub fn useropt_exec(
        jconf: *mut Jconf,
        argv: *mut *mut ::std::os::raw::c_char,
        argc: ::std::os::raw::c_int,
        n: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn useropt_show_desc(fp: *mut FILE);
}
extern "C" {
    pub fn bt_init(bt: *mut BACKTRELLIS);
}
extern "C" {
    pub fn bt_prepare(bt: *mut BACKTRELLIS);
}
extern "C" {
    pub fn bt_free(bt: *mut BACKTRELLIS);
}
extern "C" {
    pub fn bt_new(bt: *mut BACKTRELLIS) -> *mut TRELLIS_ATOM;
}
extern "C" {
    pub fn bt_store(bt: *mut BACKTRELLIS, aotm: *mut TRELLIS_ATOM);
}
extern "C" {
    pub fn bt_relocate_rw(bt: *mut BACKTRELLIS);
}
extern "C" {
    pub fn set_terminal_words(r: *mut RecogProcess);
}
extern "C" {
    pub fn bt_discount_pescore(wchmm: *mut WCHMM_INFO, bt: *mut BACKTRELLIS, param: *mut HTK_Param);
}
extern "C" {
    pub fn bt_discount_lm(bt: *mut BACKTRELLIS);
}
extern "C" {
    pub fn bt_sort_rw(bt: *mut BACKTRELLIS);
}
extern "C" {
    pub fn bt_binsearch_atom(
        bt: *mut BACKTRELLIS,
        time: ::std::os::raw::c_int,
        wkey: WORD_ID,
    ) -> *mut TRELLIS_ATOM;
}
extern "C" {
    pub fn make_iwcache_index(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn adjust_sc_index(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn make_successor_list(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn make_successor_list_unigram_factoring(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn max_successor_cache_init(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn max_successor_cache_free(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn max_successor_prob(
        wchmm: *mut WCHMM_INFO,
        lastword: WORD_ID,
        node: ::std::os::raw::c_int,
    ) -> LOGPROB;
}
extern "C" {
    pub fn max_successor_prob_iw(wchmm: *mut WCHMM_INFO, lastword: WORD_ID) -> *mut LOGPROB;
}
extern "C" {
    pub fn calc_all_unigram_factoring_values(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn can_succeed(
        wchmm: *mut WCHMM_INFO,
        lastword: WORD_ID,
        node: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn get_back_trellis_init(param: *mut HTK_Param, r: *mut RecogProcess) -> boolean;
}
extern "C" {
    pub fn get_back_trellis_proceed(
        t: ::std::os::raw::c_int,
        param: *mut HTK_Param,
        r: *mut RecogProcess,
        final_for_multipath: boolean,
    ) -> boolean;
}
extern "C" {
    pub fn get_back_trellis_end(param: *mut HTK_Param, r: *mut RecogProcess);
}
extern "C" {
    pub fn fsbeam_free(d: *mut FSBeam);
}
extern "C" {
    pub fn finalize_1st_pass(r: *mut RecogProcess, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn decode_proceed(recog: *mut Recog) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn decode_end_segmented(recog: *mut Recog);
}
extern "C" {
    pub fn decode_end(recog: *mut Recog);
}
extern "C" {
    pub fn get_back_trellis(recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn is_sil(w: WORD_ID, r: *mut RecogProcess) -> boolean;
}
extern "C" {
    pub fn mfcc_copy_to_rest_and_shrink(
        mfcc: *mut MFCCCalc,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mfcc_shrink(mfcc: *mut MFCCCalc, p: ::std::os::raw::c_int);
}
extern "C" {
    pub fn detect_end_of_segment(r: *mut RecogProcess, time: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn finalize_segment(recog: *mut Recog);
}
extern "C" {
    pub fn spsegment_init(recog: *mut Recog);
}
extern "C" {
    pub fn spsegment_trigger_sync(recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn spsegment_need_restart(
        recog: *mut Recog,
        rf_ret: *mut ::std::os::raw::c_int,
        repro_ret: *mut boolean,
    ) -> boolean;
}
extern "C" {
    pub fn spsegment_restart_mfccs(
        recog: *mut Recog,
        rewind_frame: ::std::os::raw::c_int,
        reprocess: boolean,
    );
}
extern "C" {
    pub fn outprob_style_cache_init(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn lcdset_lookup_with_category(
        wchmm: *mut WCHMM_INFO,
        hmm: *mut HMM_Logical,
        category: WORD_ID,
    ) -> *mut CD_Set;
}
extern "C" {
    pub fn lcdset_register_with_category_all(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn lcdset_remove_with_category_all(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn outprob_style(
        wchmm: *mut WCHMM_INFO,
        node: ::std::os::raw::c_int,
        last_wid: ::std::os::raw::c_int,
        t: ::std::os::raw::c_int,
        param: *mut HTK_Param,
    ) -> LOGPROB;
}
extern "C" {
    pub fn error_missing_right_triphone(
        base: *mut HMM_Logical,
        rc_name: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn error_missing_left_triphone(
        base: *mut HMM_Logical,
        lc_name: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ngram_firstwords(
        nw: *mut *mut NEXTWORD,
        peseqlen: ::std::os::raw::c_int,
        maxnw: ::std::os::raw::c_int,
        r: *mut RecogProcess,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ngram_nextwords(
        hypo: *mut NODE,
        nw: *mut *mut NEXTWORD,
        maxnw: ::std::os::raw::c_int,
        r: *mut RecogProcess,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ngram_acceptable(hypo: *mut NODE, r: *mut RecogProcess) -> boolean;
}
extern "C" {
    pub fn dfa_firstwords(
        nw: *mut *mut NEXTWORD,
        peseqlen: ::std::os::raw::c_int,
        maxnw: ::std::os::raw::c_int,
        r: *mut RecogProcess,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dfa_nextwords(
        hypo: *mut NODE,
        nw: *mut *mut NEXTWORD,
        maxnw: ::std::os::raw::c_int,
        r: *mut RecogProcess,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dfa_acceptable(hypo: *mut NODE, r: *mut RecogProcess) -> boolean;
}
extern "C" {
    pub fn dfa_look_around(nword: *mut NEXTWORD, hypo: *mut NODE, r: *mut RecogProcess) -> boolean;
}
extern "C" {
    pub fn segment_set_last_nword(hypo: *mut NODE, r: *mut RecogProcess);
}
extern "C" {
    pub fn pass2_finalize_on_no_result(r: *mut RecogProcess, use_1pass_as_final: boolean);
}
extern "C" {
    pub fn wchmm_fbs(
        param: *mut HTK_Param,
        r: *mut RecogProcess,
        cate_bgn: ::std::os::raw::c_int,
        cate_num: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wchmm_fbs_prepare(r: *mut RecogProcess);
}
extern "C" {
    pub fn wchmm_fbs_free(r: *mut RecogProcess);
}
extern "C" {
    pub fn clear_stocker(s: *mut StackDecode);
}
extern "C" {
    pub fn free_node(node: *mut NODE);
}
extern "C" {
    pub fn cpy_node(dst: *mut NODE, src: *mut NODE) -> *mut NODE;
}
extern "C" {
    pub fn newnode(r: *mut RecogProcess) -> *mut NODE;
}
extern "C" {
    pub fn malloc_wordtrellis(r: *mut RecogProcess);
}
extern "C" {
    pub fn free_wordtrellis(dwrk: *mut StackDecode);
}
extern "C" {
    pub fn scan_word(now: *mut NODE, param: *mut HTK_Param, r: *mut RecogProcess);
}
extern "C" {
    pub fn next_word(
        now: *mut NODE,
        newParam: *mut NODE,
        nword: *mut NEXTWORD,
        param: *mut HTK_Param,
        r: *mut RecogProcess,
    );
}
extern "C" {
    pub fn start_word(
        newParam: *mut NODE,
        nword: *mut NEXTWORD,
        param: *mut HTK_Param,
        r: *mut RecogProcess,
    );
}
extern "C" {
    pub fn last_next_word(
        now: *mut NODE,
        newParam: *mut NODE,
        param: *mut HTK_Param,
        r: *mut RecogProcess,
    );
}
extern "C" {
    pub fn wav2mfcc(
        speech: *mut SP16,
        speechlen: ::std::os::raw::c_int,
        recog: *mut Recog,
    ) -> boolean;
}
extern "C" {
    pub fn j_put_header(stream: *mut FILE);
}
extern "C" {
    pub fn j_put_version(stream: *mut FILE);
}
extern "C" {
    pub fn j_put_compile_defs(stream: *mut FILE);
}
extern "C" {
    pub fn j_put_library_defs(stream: *mut FILE);
}
extern "C" {
    pub fn wchmm_new() -> *mut WCHMM_INFO;
}
extern "C" {
    pub fn wchmm_free(w: *mut WCHMM_INFO);
}
extern "C" {
    pub fn print_wchmm_info(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn build_wchmm(wchmm: *mut WCHMM_INFO, lmconf: *mut JCONF_LM) -> boolean;
}
extern "C" {
    pub fn build_wchmm2(wchmm: *mut WCHMM_INFO, lmconf: *mut JCONF_LM) -> boolean;
}
extern "C" {
    pub fn wchmm_check_interactive(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn check_wchmm(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn RealTimeInit(recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn reset_mfcc(recog: *mut Recog);
}
extern "C" {
    pub fn RealTimePipeLinePrepare(recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn RealTimeMFCC(
        mfcc: *mut MFCCCalc,
        window: *mut SP16,
        windowlen: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn RealTimePipeLine(
        Speech: *mut SP16,
        len: ::std::os::raw::c_int,
        recog: *mut Recog,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RealTimeResume(recog: *mut Recog) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RealTimeParam(recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn RealTimeCMNUpdate(mfcc: *mut MFCCCalc, recog: *mut Recog);
}
extern "C" {
    pub fn RealTimeTerminate(recog: *mut Recog);
}
extern "C" {
    pub fn realbeam_free(recog: *mut Recog);
}
extern "C" {
    pub fn mfcc_go(
        recog: *mut Recog,
        ad_check: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut Recog) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn word_align(
        words: *mut WORD_ID,
        wnum: ::std::os::raw::c_short,
        param: *mut HTK_Param,
        align: *mut SentenceAlign,
        r: *mut RecogProcess,
    );
}
extern "C" {
    pub fn phoneme_align(
        words: *mut WORD_ID,
        wnum: ::std::os::raw::c_short,
        param: *mut HTK_Param,
        align: *mut SentenceAlign,
        r: *mut RecogProcess,
    );
}
extern "C" {
    pub fn state_align(
        words: *mut WORD_ID,
        wnum: ::std::os::raw::c_short,
        param: *mut HTK_Param,
        align: *mut SentenceAlign,
        r: *mut RecogProcess,
    );
}
extern "C" {
    pub fn word_rev_align(
        revwords: *mut WORD_ID,
        wnum: ::std::os::raw::c_short,
        param: *mut HTK_Param,
        align: *mut SentenceAlign,
        r: *mut RecogProcess,
    );
}
extern "C" {
    pub fn phoneme_rev_align(
        revwords: *mut WORD_ID,
        wnum: ::std::os::raw::c_short,
        param: *mut HTK_Param,
        align: *mut SentenceAlign,
        r: *mut RecogProcess,
    );
}
extern "C" {
    pub fn state_rev_align(
        revwords: *mut WORD_ID,
        wnum: ::std::os::raw::c_short,
        param: *mut HTK_Param,
        align: *mut SentenceAlign,
        r: *mut RecogProcess,
    );
}
extern "C" {
    pub fn do_alignment_all(r: *mut RecogProcess, param: *mut HTK_Param);
}
extern "C" {
    pub fn opt_terminate();
}
extern "C" {
    pub fn j_output_argument_help(fp: *mut FILE);
}
extern "C" {
    pub fn filepath(
        filename: *mut ::std::os::raw::c_char,
        dirname: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn opt_parse(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        cwd: *mut ::std::os::raw::c_char,
        jconf: *mut Jconf,
    ) -> boolean;
}
extern "C" {
    pub fn opt_release(jconf: *mut Jconf);
}
extern "C" {
    pub fn get_dirname(path: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn config_string_parse(str_: *mut ::std::os::raw::c_char, jconf: *mut Jconf) -> boolean;
}
extern "C" {
    pub fn config_string_parse_basedir(
        str_: *mut ::std::os::raw::c_char,
        jconf: *mut Jconf,
        dir: *mut ::std::os::raw::c_char,
    ) -> boolean;
}
extern "C" {
    pub fn config_file_parse(conffile: *mut ::std::os::raw::c_char, jconf: *mut Jconf) -> boolean;
}
extern "C" {
    pub fn dnn_config_file_parse(
        filename: *mut ::std::os::raw::c_char,
        am: *mut JCONF_AM,
        jconf: *mut Jconf,
    ) -> boolean;
}
extern "C" {
    pub fn checkpath(filename: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn j_jconf_finalize(jconf: *mut Jconf) -> boolean;
}
extern "C" {
    pub fn set_beam_width(
        wchmm: *mut WCHMM_INFO,
        specified: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn print_jconf_overview(jconf: *mut Jconf);
}
extern "C" {
    pub fn print_mfcc_info(fp: *mut FILE, mfcc: *mut MFCCCalc, jconf: *mut Jconf);
}
extern "C" {
    pub fn print_engine_info(recog: *mut Recog);
}
extern "C" {
    pub fn system_bootup(recog: *mut Recog);
}
extern "C" {
    pub fn adin_initialize(recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn j_load_am(recog: *mut Recog, amconf: *mut JCONF_AM) -> boolean;
}
extern "C" {
    pub fn j_load_lm(recog: *mut Recog, lmconf: *mut JCONF_LM) -> boolean;
}
extern "C" {
    pub fn j_load_all(recog: *mut Recog, jconf: *mut Jconf) -> boolean;
}
extern "C" {
    pub fn j_launch_recognition_instance(recog: *mut Recog, sconf: *mut JCONF_SEARCH) -> boolean;
}
extern "C" {
    pub fn j_final_fusion(recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn create_mfcc_calc_instances(recog: *mut Recog);
}
extern "C" {
    pub fn j_reload_adddict(recog: *mut Recog, lm: *mut PROCESS_LM) -> boolean;
}
extern "C" {
    pub fn hmm_check(r: *mut RecogProcess);
}
extern "C" {
    pub fn visual_init(recog: *mut Recog);
}
extern "C" {
    pub fn visual_show(bt: *mut BACKTRELLIS);
}
extern "C" {
    pub fn visual2_init(maxhypo: ::std::os::raw::c_int);
}
extern "C" {
    pub fn visual2_popped(n: *mut NODE, popctr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn visual2_next_word(next: *mut NODE, prev: *mut NODE, popctr: ::std::os::raw::c_int);
}
extern "C" {
    pub fn visual2_best(now: *mut NODE, winfo: *mut WORD_INFO);
}
extern "C" {
    pub fn gmm_init(recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn gmm_prepare(recog: *mut Recog);
}
extern "C" {
    pub fn gmm_proceed(recog: *mut Recog);
}
extern "C" {
    pub fn gmm_end(recog: *mut Recog);
}
extern "C" {
    pub fn gmm_valid_input(recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn gmm_free(recog: *mut Recog);
}
extern "C" {
    pub fn wordgraph_init(wchmm: *mut WCHMM_INFO);
}
extern "C" {
    pub fn wordgraph_free(wg: *mut WordGraph);
}
extern "C" {
    pub fn put_wordgraph(fp: *mut FILE, wg: *mut WordGraph, winfo: *mut WORD_INFO);
}
extern "C" {
    pub fn wordgraph_dump(fp: *mut FILE, root: *mut WordGraph, winfo: *mut WORD_INFO);
}
extern "C" {
    pub fn wordgraph_assign(
        wid: WORD_ID,
        wid_left: WORD_ID,
        wid_right: WORD_ID,
        leftframe: ::std::os::raw::c_int,
        rightframe: ::std::os::raw::c_int,
        fscore_head: LOGPROB,
        fscore_tail: LOGPROB,
        gscore_head: LOGPROB,
        gscore_tail: LOGPROB,
        lscore: LOGPROB,
        cmscore: LOGPROB,
        r: *mut RecogProcess,
    ) -> *mut WordGraph;
}
extern "C" {
    pub fn wordgraph_check_and_add_rightword(
        wg: *mut WordGraph,
        right: *mut WordGraph,
        lscore: LOGPROB,
    ) -> boolean;
}
extern "C" {
    pub fn wordgraph_check_and_add_leftword(
        wg: *mut WordGraph,
        left: *mut WordGraph,
        lscore: LOGPROB,
    ) -> boolean;
}
extern "C" {
    pub fn wordgraph_save(wg: *mut WordGraph, right: *mut WordGraph, root: *mut *mut WordGraph);
}
extern "C" {
    pub fn wordgraph_check_merge(
        now: *mut WordGraph,
        root: *mut *mut WordGraph,
        next_wid: WORD_ID,
        merged_p: *mut boolean,
        jconf: *mut JCONF_SEARCH,
    ) -> *mut WordGraph;
}
extern "C" {
    pub fn wordgraph_dup(wg: *mut WordGraph, root: *mut *mut WordGraph) -> *mut WordGraph;
}
extern "C" {
    pub fn wordgraph_purge_leaf_nodes(rootp: *mut *mut WordGraph, r: *mut RecogProcess);
}
extern "C" {
    pub fn wordgraph_depth_cut(rootp: *mut *mut WordGraph, r: *mut RecogProcess);
}
extern "C" {
    pub fn wordgraph_adjust_boundary(rootp: *mut *mut WordGraph, r: *mut RecogProcess);
}
extern "C" {
    pub fn wordgraph_clean(rootp: *mut *mut WordGraph);
}
extern "C" {
    pub fn wordgraph_compaction_thesame(rootp: *mut *mut WordGraph);
}
extern "C" {
    pub fn wordgraph_compaction_exacttime(rootp: *mut *mut WordGraph, r: *mut RecogProcess);
}
extern "C" {
    pub fn wordgraph_compaction_neighbor(rootp: *mut *mut WordGraph, r: *mut RecogProcess);
}
extern "C" {
    pub fn wordgraph_sort_and_annotate_id(
        rootp: *mut *mut WordGraph,
        r: *mut RecogProcess,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wordgraph_check_coherence(rootp: *mut WordGraph, r: *mut RecogProcess);
}
extern "C" {
    pub fn graph_forward_backward(root: *mut WordGraph, r: *mut RecogProcess);
}
extern "C" {
    pub fn jconf_set_default_values(j: *mut Jconf);
}
extern "C" {
    pub fn jconf_set_default_values_am(j: *mut JCONF_AM);
}
extern "C" {
    pub fn jconf_set_default_values_lm(j: *mut JCONF_LM);
}
extern "C" {
    pub fn jconf_set_default_values_search(j: *mut JCONF_SEARCH);
}
extern "C" {
    pub fn multigram_add(
        dfa: *mut DFA_INFO,
        winfo: *mut WORD_INFO,
        name: *mut ::std::os::raw::c_char,
        lm: *mut PROCESS_LM,
        dfa_forward: *mut DFA_INFO,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn multigram_delete(gid: ::std::os::raw::c_int, lm: *mut PROCESS_LM) -> boolean;
}
extern "C" {
    pub fn multigram_delete_all(lm: *mut PROCESS_LM);
}
extern "C" {
    pub fn multigram_update(lm: *mut PROCESS_LM) -> boolean;
}
extern "C" {
    pub fn multigram_build(r: *mut RecogProcess) -> boolean;
}
extern "C" {
    pub fn multigram_activate(
        gid: ::std::os::raw::c_int,
        lm: *mut PROCESS_LM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn multigram_deactivate(
        gid: ::std::os::raw::c_int,
        lm: *mut PROCESS_LM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn multigram_load_all_gramlist(lm: *mut PROCESS_LM) -> boolean;
}
extern "C" {
    pub fn multigram_get_gram_from_category(
        category: ::std::os::raw::c_int,
        lm: *mut PROCESS_LM,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn multigram_get_gram_from_wid(wid: WORD_ID, lm: *mut PROCESS_LM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn multigram_get_all_num(lm: *mut PROCESS_LM) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn multigram_free_all(root: *mut MULTIGRAM);
}
extern "C" {
    pub fn multigram_get_id_by_name(
        lm: *mut PROCESS_LM,
        gramname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn multigram_get_grammar_by_name(
        lm: *mut PROCESS_LM,
        gramname: *mut ::std::os::raw::c_char,
    ) -> *mut MULTIGRAM;
}
extern "C" {
    pub fn multigram_get_grammar_by_id(
        lm: *mut PROCESS_LM,
        id: ::std::os::raw::c_ushort,
    ) -> *mut MULTIGRAM;
}
extern "C" {
    pub fn multigram_add_words_to_grammar(
        lm: *mut PROCESS_LM,
        m: *mut MULTIGRAM,
        winfo: *mut WORD_INFO,
    ) -> boolean;
}
extern "C" {
    pub fn multigram_add_words_to_grammar_by_name(
        lm: *mut PROCESS_LM,
        gramname: *mut ::std::os::raw::c_char,
        winfo: *mut WORD_INFO,
    ) -> boolean;
}
extern "C" {
    pub fn multigram_add_words_to_grammar_by_id(
        lm: *mut PROCESS_LM,
        id: ::std::os::raw::c_ushort,
        winfo: *mut WORD_INFO,
    ) -> boolean;
}
extern "C" {
    pub fn multigram_add_gramlist(
        dfafile: *mut ::std::os::raw::c_char,
        dictfile: *mut ::std::os::raw::c_char,
        j: *mut JCONF_LM,
        lmvar: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn multigram_remove_gramlist(j: *mut JCONF_LM);
}
extern "C" {
    pub fn multigram_add_prefix_list(
        prefix_list: *mut ::std::os::raw::c_char,
        cwd: *mut ::std::os::raw::c_char,
        j: *mut JCONF_LM,
        lmvar: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn multigram_add_prefix_filelist(
        listfile: *mut ::std::os::raw::c_char,
        j: *mut JCONF_LM,
        lmvar: ::std::os::raw::c_int,
    ) -> boolean;
}
extern "C" {
    pub fn adin_setup_param(adin: *mut ADIn, jconf: *mut Jconf) -> boolean;
}
extern "C" {
    pub fn adin_thread_create(recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn adin_thread_cancel(recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn adin_go(
        ad_process: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut SP16,
                arg2: ::std::os::raw::c_int,
                arg3: *mut Recog,
            ) -> ::std::os::raw::c_int,
        >,
        ad_check: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut Recog) -> ::std::os::raw::c_int,
        >,
        recog: *mut Recog,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adin_standby(
        a: *mut ADIn,
        freq: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ) -> boolean;
}
extern "C" {
    pub fn adin_begin(a: *mut ADIn, file_or_dev_name: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn adin_end(a: *mut ADIn) -> boolean;
}
extern "C" {
    pub fn adin_free_param(recog: *mut Recog);
}
extern "C" {
    pub fn confnet_create(root: *mut WordGraph, r: *mut RecogProcess) -> *mut CN_CLUSTER;
}
extern "C" {
    pub fn graph_make_order(root: *mut WordGraph, r: *mut RecogProcess);
}
extern "C" {
    pub fn graph_free_order(r: *mut RecogProcess);
}
extern "C" {
    pub fn cn_free_all(croot: *mut *mut CN_CLUSTER);
}
extern "C" {
    pub fn callback_init(recog: *mut Recog);
}
extern "C" {
    pub fn callback_add(
        recog: *mut Recog,
        code: ::std::os::raw::c_int,
        func: ::std::option::Option<
            unsafe extern "C" fn(recog: *mut Recog, data: *mut ::std::os::raw::c_void),
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn callback_add_adin(
        recog: *mut Recog,
        code: ::std::os::raw::c_int,
        func: ::std::option::Option<
            unsafe extern "C" fn(
                recog: *mut Recog,
                buf: *mut SP16,
                len: ::std::os::raw::c_int,
                data: *mut ::std::os::raw::c_void,
            ),
        >,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn callback_exec(code: ::std::os::raw::c_int, recog: *mut Recog);
}
extern "C" {
    pub fn callback_exec_adin(
        code: ::std::os::raw::c_int,
        recog: *mut Recog,
        buf: *mut SP16,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn callback_exist(recog: *mut Recog, code: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn callback_delete(recog: *mut Recog, id: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    pub fn adin_cut_callback_store_buffer(
        now: *mut SP16,
        len: ::std::os::raw::c_int,
        recog: *mut Recog,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn result_align_new() -> *mut SentenceAlign;
}
extern "C" {
    pub fn result_align_free(a: *mut SentenceAlign);
}
extern "C" {
    pub fn result_sentence_malloc(r: *mut RecogProcess, num: ::std::os::raw::c_int);
}
extern "C" {
    pub fn result_sentence_free(r: *mut RecogProcess);
}
extern "C" {
    pub fn clear_result(r: *mut RecogProcess);
}
extern "C" {
    pub fn plugin_get_id(name: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plugin_init();
}
extern "C" {
    pub fn plugin_load_file(file: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn plugin_load_dir(dir: *mut ::std::os::raw::c_char) -> boolean;
}
extern "C" {
    pub fn plugin_load_dirs(dirent: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn plugin_find_optname(
        optfuncname: *mut ::std::os::raw::c_char,
        str_: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn plugin_get_func(
        sid: ::std::os::raw::c_int,
        name: *mut ::std::os::raw::c_char,
    ) -> FUNC_VOID;
}
extern "C" {
    pub fn plugin_exec_engine_startup(recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn plugin_exec_adin_captured(buf: *mut ::std::os::raw::c_short, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn plugin_exec_adin_triggered(
        buf: *mut ::std::os::raw::c_short,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn plugin_exec_vector_postprocess(
        vecbuf: *mut VECT,
        veclen: ::std::os::raw::c_int,
        nframe: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn plugin_exec_vector_postprocess_all(param: *mut HTK_Param);
}
extern "C" {
    pub fn plugin_exec_process_result(recog: *mut Recog);
}
extern "C" {
    pub fn mfc_module_init(mfcc: *mut MFCCCalc, recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn mfc_module_set_header(mfcc: *mut MFCCCalc, recog: *mut Recog) -> boolean;
}
extern "C" {
    pub fn mfc_module_standby(mfcc: *mut MFCCCalc) -> boolean;
}
extern "C" {
    pub fn mfc_module_begin(mfcc: *mut MFCCCalc) -> boolean;
}
extern "C" {
    pub fn mfc_module_end(mfcc: *mut MFCCCalc) -> boolean;
}
extern "C" {
    pub fn mfc_module_read(
        mfcc: *mut MFCCCalc,
        new_t: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mfc_module_input_name(mfcc: *mut MFCCCalc) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn candidate_mbr(
        r_start: *mut *mut NODE,
        r_bottom: *mut *mut NODE,
        r_stacknum: ::std::os::raw::c_int,
        r: *mut RecogProcess,
    );
}
